{
  "Uuid": "0c9f45f1-26b6-40ba-94dd-18043ce3501d",
  "IsCustomNode": false,
  "Description": null,
  "Name": "BuildingMasser-2programsBiLT_NA2019-mdj-new-evaluator",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "01acd9995aeb4146afb7ee2d4e073c86",
      "Name": "Retail-BaseLength",
      "Type": "number",
      "Value": "167.828",
      "MaximumValue": 200.0,
      "MinimumValue": 100.0,
      "StepValue": 0.001,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "c226447e8525453d966d3a68305df971",
      "Name": "Retail-Base Width ",
      "Type": "number",
      "Value": "162.665",
      "MaximumValue": 200.0,
      "MinimumValue": 100.0,
      "StepValue": 0.001,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "0cf8fb265de44403899c56c40d4ea0a0",
      "Name": "Retail-Rotation",
      "Type": "number",
      "Value": "46.9",
      "MaximumValue": 90.0,
      "MinimumValue": 0.0,
      "StepValue": 0.1,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "893e1340c6fd47c28265c17f393723d7",
      "Name": "INPUT - Program 2 - Mass Rotation",
      "Type": "number",
      "Value": "69.4",
      "MaximumValue": 90.0,
      "MinimumValue": 0.0,
      "StepValue": 0.1,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "faf214a09d714c7785ac3bbb533cb716",
      "Name": "INPUT - Program 2 - Base Length (Feet)",
      "Type": "number",
      "Value": "158.431",
      "MaximumValue": 200.0,
      "MinimumValue": 100.0,
      "StepValue": 0.001,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "d9270299c18f4543832d3e61d0d4f2f2",
      "Name": "INPUT - Program 2 - Base Width (Feet)",
      "Type": "number",
      "Value": "117.098",
      "MaximumValue": 200.0,
      "MinimumValue": 100.0,
      "StepValue": 0.001,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "fe30eb6635f145a6bc65100f50892c97",
      "Name": "Retail%",
      "Type": "number",
      "Value": "0.1",
      "MaximumValue": 0.5,
      "MinimumValue": 0.1,
      "StepValue": 0.1,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    }
  ],
  "Outputs": [
    {
      "Id": "69edd1b639a2429aa1a9e9d78976123b",
      "Name": "TotValue/Yr",
      "Type": "float",
      "InitialValue": "43560247.662596",
      "Description": "Visualize the output of node."
    },
    {
      "Id": "96d8f353b98a49f5b46d18e7b4c8385b",
      "Name": "TotCost",
      "Type": "float",
      "InitialValue": "288000000",
      "Description": "Visualize the output of node."
    },
    {
      "Id": "6f66488db4514f2e898fab7f69e5b543",
      "Name": "VolumeOutsideZoning",
      "Type": "float",
      "InitialValue": "946923.662985393",
      "Description": "Visualize the output of node."
    },
    {
      "Id": "bbcb95176ac6445db10f5f13750b5b8f",
      "Name": "Volume",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Visualize the output of node."
    },
    {
      "Id": "275d639ded39479ea65cc000b98a0713",
      "Name": "Mean Score",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Visualize the output of node."
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "08ea61f4-a1b0-4872-a06b-735776a49467-00056948"
      ],
      "Id": "e47835728a284f859955308a5430e98f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4447f502ae66471e8e007254da927e08",
          "Name": "Element",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "035fceb6-8a33-4fa7-8943-37f6b8f97651-0005a4c2"
      ],
      "Id": "577e49374abe41798c1435389dc99658",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c9a493e780e64241a372ca5667b74c3d",
          "Name": "Element",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Solids",
      "Id": "c6d67a4b6f5149bfa0340cfef2601624",
      "Inputs": [
        {
          "Id": "2242d362d939448cbd62a8d0b0ddd3dc",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a45d9ad2525840a3a242f54f0ec47196",
          "Name": "Solid[]",
          "Description": "Solid[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The Solids in this Element\n\nElement.Solids: Solid[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Solids",
      "Id": "8aaef1814eb24e6f9d6a90e8342e5d77",
      "Inputs": [
        {
          "Id": "dd8f700409d74250937bfbb338fd116d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "39bac4149964453e83c6be3635b7b1e2",
          "Name": "Solid[]",
          "Description": "Solid[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The Solids in this Element\n\nElement.Solids: Solid[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.ByUnion@Autodesk.DesignScript.Geometry.Solid[]",
      "Id": "d5185e210f1e4c72bfd31bd64de43de4",
      "Inputs": [
        {
          "Id": "9bc5ab7d527245d4892ff4b29ee35622",
          "Name": "solids",
          "Description": "A collection of solids\n\nSolid[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f5384a8fd40e41168d79daee7abf5116",
          "Name": "Solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Union a collection of solids into one solid\n\nSolid.ByUnion (solids: Solid[]): Solid"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolySurface.BySolid@Autodesk.DesignScript.Geometry.Solid",
      "Id": "863c5edb61f9432b8110e54cdb9cf112",
      "Inputs": [
        {
          "Id": "7f60642de4fe4439b06faebb72168053",
          "Name": "solid",
          "Description": "Solid which surfaces to use\n\nSolid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "362dea3a7b684c288d0c4c6fa711ad8a",
          "Name": "PolySurface",
          "Description": "PolySurface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make Polysurface by surfaces of Solid.\n\nPolySurface.BySolid (solid: Solid): PolySurface"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "124c3f393fb848f7a9ccbd88f4a1c945",
      "Inputs": [
        {
          "Id": "3f401ecf76e84209bf732bacc14bc332",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eac8feb25f8348c28365dab3690d3100",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4fddbdf6c92a44708e2cb09ae8f06142",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0ffbd5c2b52541adba9091d719afbf1d",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.5,
      "Id": "419a1ab2567c41569e20df1f61a2079f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "423e6c2e539c435087041082c761b82b",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.SortByKey@var[]..[],var[]..[]",
      "Id": "29e6513c7ec74ebf8c1507b1bc300d7d",
      "Inputs": [
        {
          "Id": "c78f8044fb7347aeaec693653817f2f8",
          "Name": "list",
          "Description": "list to be sorted\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "73d20249d86f43a897fa0b0f2a9ef001",
          "Name": "keys",
          "Description": "list of keys\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "84a05125b35c4677a54b34e4642a60d9",
          "Name": "sorted list",
          "Description": "sorted list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "873a28ac6fbd4e998e1f077eb32da2b2",
          "Name": "sorted keys",
          "Description": "sorted keys",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Sort list based on its keys\n\nList.SortByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "32ddd9a7dd6c4a98b9e4edc65882cce3",
      "Inputs": [
        {
          "Id": "37804c584f084cab9e8cdc6c2af9a6b6",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "35bcef5b16a34952ac148bd48061b47e",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "30cf8ec78bd24a90b3ad0a19dd206ba9",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.0,
      "Id": "080a1ffc911244f3b9ea1da8234f8cfd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "10712c43fca04de998b6c5cea39c3c5e",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "579bc5c8d1c846d89b178838df258beb",
      "Inputs": [
        {
          "Id": "6360632088264b19aee2139dbcf9a093",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "72bc9c783aa54254b6a7a5ba78d5afc6",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f591edab6a5417791b6966a0bc224c0",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "68ef9a504f9e428b81ff0a82c64336f6",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 1.0,
      "MinimumValue": 0.0,
      "StepValue": 0.001,
      "InputValue": 0.5,
      "Id": "7364443fdafc4513bbe436d7b1d422e4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "00013a3cde8f4f1d8ee530534ad02ba5",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Rectangle.ByWidthLength@Autodesk.DesignScript.Geometry.Plane,double,double",
      "Id": "bda8c6ae0e944ff58c2a641fbedb9163",
      "Inputs": [
        {
          "Id": "5599a380a81447c2a41e1e6a15296789",
          "Name": "plane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ad5e953ae59a4918bd332d37ea26fd05",
          "Name": "width",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c5867126308b4d7eaf281f63a1be37bb",
          "Name": "length",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d13d5777123849c4a0085acd6955efeb",
          "Name": "Rectangle",
          "Description": "Rectangle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Rectangle centered at input Plane root, with input width (Plane X axis length), and length (Plane Y axis length).\n\nRectangle.ByWidthLength (plane: Plane, width: double = 1, length: double = 1): Rectangle"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Plane.ByOriginNormal@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector",
      "Id": "47b90335b8e740acbbd4d1621bfce6d5",
      "Inputs": [
        {
          "Id": "82c8493bd52b422c81b8610207f218ce",
          "Name": "origin",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "17166ac133a74249b2b3bba7b96c71fb",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f3838c901f8d463dbe72352d54f54775",
          "Name": "Plane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Plane centered at root Point, with input normal Vector.\n\nPlane.ByOriginNormal (origin: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Plane"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 200.0,
      "MinimumValue": 100.0,
      "StepValue": 0.001,
      "InputValue": 167.828,
      "Id": "01acd9995aeb4146afb7ee2d4e073c86",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "66bd4961b40e4271a23353876bd24d1c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 200.0,
      "MinimumValue": 100.0,
      "StepValue": 0.001,
      "InputValue": 162.665,
      "Id": "c226447e8525453d966d3a68305df971",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "926eb00fca174543a19e1bc59cdbdde8",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "8da5426d1b4942528025ca470b43db75",
      "Inputs": [
        {
          "Id": "7cbf646469354d8a964727310754f19f",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "50fe8f919a064227b8b6810458eaab14",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "74cab1f8ab104abb9ca4250bf1439bfb",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "/@var[]..[],var[]..[]",
      "Id": "7210ce36dfa6489a91ce37d0f3e74c91",
      "Inputs": [
        {
          "Id": "a198f100425d407283478ea759767b5d",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4562b21577bc4b8bbd61a19f5169bbf1",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a16b865237554d7787debba54252ac7a",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides x by y.\n\n/ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "fdc628f209aa49fa98ca2cc42f8ad6cd",
      "Inputs": [
        {
          "Id": "4d99c4beb7284021b5a00e1d3aa567de",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "36bda33f4bd94fc1989939b0926aa92d",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9c6e04e87fde43ce8de2128002502b04",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.ExtrudeAsSolid@Autodesk.DesignScript.Geometry.Vector,double",
      "Id": "83c8410172ed478585597481f346a327",
      "Inputs": [
        {
          "Id": "65aba1a2aa1043d4be69c82d41d52650",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b4d19e54830f4d6a9b3400ef9e787006",
          "Name": "direction",
          "Description": "Vector to extrude along\n\nVector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "49b838a353184ecaa4b12a7004b7416e",
          "Name": "distance",
          "Description": "Distance to extrude\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c8135c34c3234c12b7f1e1d82f6f944d",
          "Name": "Solid",
          "Description": "The extruded Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Extrudes a Curve in the specified direction, by the specified distance. Curve must be closed.\n\nCurve.ExtrudeAsSolid (direction: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1), distance: double = 1): Solid"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "f3d3c0ed58dd47e985b78652978f04a8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "93a45f6f1dab45068398eb085966842b",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Rotate@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,double",
      "Id": "8daede497dbd40a188c01e1da413cc6d",
      "Inputs": [
        {
          "Id": "59493ac97fae438f95df05e898cf617a",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "305796dab34f4d9a8f96adbdbdb7d2b0",
          "Name": "origin",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4a888398d92b4b9bbaf4f5cf409826d4",
          "Name": "axis",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7ea46922effa496d825cce7c684ee0be",
          "Name": "degrees",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1593102256f8445590fa9212065680dd",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Rotates an object around an origin and an axis by a specified degree\n\nGeometry.Rotate (origin: Point, axis: Vector, degrees: double = 0): Geometry"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 90.0,
      "MinimumValue": 0.0,
      "StepValue": 0.1,
      "InputValue": 46.900000000000006,
      "Id": "0cf8fb265de44403899c56c40d4ea0a0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "af648b1eb03d42cbadd1ea7cfaa32842",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Sequence, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "46801006db6e48f5a2346e5d17fe3304",
      "Inputs": [
        {
          "Id": "ee5a8c775c274f278166901468b57627",
          "Name": "start",
          "Description": "Number or letter to start the sequence at\r\nDefault value: 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fca39408cde84c6dabc0913fccdbaebf",
          "Name": "amount",
          "Description": "Amount of numbers in the sequence\r\nDefault value: 10",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f3c78f0c5494b229be3f6133d177928",
          "Name": "step",
          "Description": "Space between numbers or letters\r\nDefault value: 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fb814f4baeaa4d2ba3b483a4c2d7f720",
          "Name": "seq",
          "Description": "New sequence",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a sequence of numbers."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Plane.ByOriginNormal@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector",
      "Id": "364c9f62f9cd4932993319c873c42fa4",
      "Inputs": [
        {
          "Id": "c63d8b7ee9624f5dba080484a2f8075f",
          "Name": "origin",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c77ed09357314ff9ac317cb542454377",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "beb068222e124a38a0e310a8fff46f94",
          "Name": "Plane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Plane centered at root Point, with input normal Vector.\n\nPlane.ByOriginNormal (origin: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Plane"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "76cba9146b7844c38e3cb15ab33aa829",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c1ae05289393447c8fba2d156d1228cd",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Id": "b72c763ec332427aaeb812e35ff5b317",
      "Inputs": [
        {
          "Id": "4b13239878f14cc880603e1f829829ce",
          "Name": "x",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1e636a22defe4423b7eb4a52a04116c5",
          "Name": "y",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "564c6b0fbe584a45b20c82eed69ec6b8",
          "Name": "z",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "75e5f5bc57084c8c935aa4f1fd435ee3",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "196ef861e3a040ddb52b2ebdac3c0619",
      "Inputs": [
        {
          "Id": "22b27defa4854096901518b50fdd29d8",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "26cd598a401d4615ad1d3a539e387579",
          "Name": "other",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9edc9c5cbef14558a5258f5ba3940122",
          "Name": "Geometry[]",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the intersection Geometry for this object and another\n\nGeometry.Intersect (other: Geometry): Geometry[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "1e30329d1e284df1a0335fc5c7d84ca6",
      "Inputs": [
        {
          "Id": "8a3db03187f948dcaa51b31e300b4b29",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c066bb97e804f468e07c29e888e5740",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "28588bbfce0746089015c3dd1aa3be16",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Color.ByARGB@int,int,int,int",
      "Id": "008105518fa8404ca6f4ce40c82b12a4",
      "Inputs": [
        {
          "Id": "b653d7a0da774b04a52322e9974bc9e9",
          "Name": "a",
          "Description": "The alpha value.\n\nint\nDefault value : 255",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "73f4cae623414f5194cd2118943dc78e",
          "Name": "r",
          "Description": "The red value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9e7964cbdac04fa0b4dd51dd3604cc84",
          "Name": "g",
          "Description": "The green value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d989bf9b0a354719a1b47d855fdc60a8",
          "Name": "b",
          "Description": "The blue value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d00ce2607e4a45198e4f2573d43a58e5",
          "Name": "color",
          "Description": "Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct a color by alpha, red, green, and blue components.\n\nColor.ByARGB (a: int = 255, r: int = 0, g: int = 0, b: int = 0): Color"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 40.0,
      "Id": "5147cfa7170b4672baa4e0cabf2040a3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "670b2c4754c54bf3993fd11720b7d792",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 255.0,
      "Id": "83abd94e62144dddb6459d3bf25055e9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8b68da9eaf3649b69f4e32673cc1fade",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "e365c589bc154462a94ada93b4ee3791",
      "Inputs": [
        {
          "Id": "2e40e87999924f6abce636ae451c9a15",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "81f47a8067e14e17b5bef4ce68e6043b",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d669602aa76640a5a65e68db2ee5f5f5",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Color.ByARGB@int,int,int,int",
      "Id": "e999ab27676a41f482c0480e6595c397",
      "Inputs": [
        {
          "Id": "c9d2fd51220d4c6bb391d21a2b8435b7",
          "Name": "a",
          "Description": "The alpha value.\n\nint\nDefault value : 255",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "660d602dbcd8464792b6d74da44bbea2",
          "Name": "r",
          "Description": "The red value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0187708437d3441283cd4cde52444b78",
          "Name": "g",
          "Description": "The green value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c60d6228a1e3467281dea435c7afad17",
          "Name": "b",
          "Description": "The blue value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "16d4bd59021c44babde67df0fbc077f5",
          "Name": "color",
          "Description": "Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct a color by alpha, red, green, and blue components.\n\nColor.ByARGB (a: int = 255, r: int = 0, g: int = 0, b: int = 0): Color"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 255.0,
      "Id": "e89fa2589ac74bceb309080eb8631a74",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "15f60981f46a41a08a83be5825d00e4c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 115.0,
      "Id": "7b45b322815a46648d0dc5b2d17c091b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0f23181230e24e3ea316371b22f1630d",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolySurface.BySolid@Autodesk.DesignScript.Geometry.Solid",
      "Id": "f8d68e49c503403aa548fe1799dc4b8b",
      "Inputs": [
        {
          "Id": "c32298c443594ef381dc45d96a818469",
          "Name": "solid",
          "Description": "Solid which surfaces to use\n\nSolid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1b86297261894d71bb535b5c719b613d",
          "Name": "PolySurface",
          "Description": "PolySurface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make Polysurface by surfaces of Solid.\n\nPolySurface.BySolid (solid: Solid): PolySurface"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "43b276925891416a996906e7f96b7129",
      "Inputs": [
        {
          "Id": "acae0ef2290c4a2da7c7d82e435f24cb",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78e879fe1ede43889f353f22b1f6d9bb",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "cecda705df4a46a8978df9a04cb9c274",
      "Inputs": [
        {
          "Id": "b44ffb1a7e8c498185bfc2416416c66d",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b48dc067fe9b42ec81433fcd544c1d3d",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d66213d707614df3b4f2d84babeb4582",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "83e4db675c27420199385670757caa26",
      "Inputs": [
        {
          "Id": "569eabb2c4ff4816a3458371c5b6449f",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6c45053330b549c6a03f22cd73d49772",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e71fa97b2a3f41a2932ba6360296b2bb",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.Area",
      "Id": "1d73c7feff1842ce9151cc4f9b835482",
      "Inputs": [
        {
          "Id": "73d51d4cdd2f4f268671b4886b76f6a3",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "828d9affa9e04683a0ef83176862d3ad",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the total surface area.\n\nSurface.Area: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "878a48e39584425f8580e0c4c45d6c11",
      "Inputs": [
        {
          "Id": "214eca4990b743179e50b24a10a43758",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b11e650ca9064053aebda19b23e3b9f4",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "272eb8b6fb2e4f60b8f415e4334e8789",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.5,
      "Id": "994eebc8c1cf4ad7aa594d026b37775f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bb0d8feff524429f898fdf70e0c44c61",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "1e4e0be7c5714a32bf29913757c108f7",
      "Inputs": [
        {
          "Id": "03d53116a67c41c299856b047e131ad7",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "43593157ede84ca8898c92f4c69153c1",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2bc9a569dfe54d34a80adb2baa68df2a",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ed1c687d5d4d4a49b6a04cf33cfd6e98",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "b416f008c3fb43b38e89d419c14d469a",
      "Inputs": [
        {
          "Id": "4e9bca098f6c48ef9882ff8902f37993",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "87ad2af0448047c590d200d41c30ca01",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4a42fb1bcc6540b9bbd61b9eb8603831",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a59e24a377249928c4aa3a12ef8ef8d",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "0246f57202ec4e258e21b7a627e4f937",
      "Inputs": [
        {
          "Id": "87d9e6e71a6846c28d6e8f35f664d8f9",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d75e4e485e704802b8e268c815df24a0",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "132d3cadf0d8426aa9f0bf6f694e5e71",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1cd027ba16a94f30988a162ce0e46c93",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "82e8627b121740429b0b3337d5661499",
      "Inputs": [
        {
          "Id": "a6973f7836564119bc702a903c71ec33",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "01cfb212d24643a6948380b077ad7943",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b388ecd7b1794b23a61e36bbaa7a68f3",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "146644f9fb354bf3b7bc6ad8047f2a66",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN[0]\r\n\r\nbools = []\r\n# Place your code below this line\r\nfor val in dataEnteringNode:\r\n\tif val >= 0 and val < 50:\r\n\t\tbools.append(True)\r\n\telse:\r\n\t\tbools.append(False)\r\n\t\t\r\nOUT = bools",
      "VariableInputPorts": true,
      "Id": "4c430b5422ba4afa94852ced625be50c",
      "Inputs": [
        {
          "Id": "083460b545ef450aaace418a6a45b0a1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3cd83ecbc1b8494aadd5351c8d8eab6d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN[0]\r\n\r\nbools = []\r\n# Place your code below this line\r\nfor val in dataEnteringNode:\r\n\tif val >= 51 and val < 150:\r\n\t\tbools.append(True)\r\n\telse:\r\n\t\tbools.append(False)\r\n\t\t\r\nOUT = bools",
      "VariableInputPorts": true,
      "Id": "db23ce34cfcc47f197c34e1b8c13938a",
      "Inputs": [
        {
          "Id": "b1c8585434964f5f93b960224fe45e12",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf0558fc0d124e2f9f0515f677f457de",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN[0]\r\n\r\nbools = []\r\n# Place your code below this line\r\nfor val in dataEnteringNode:\r\n\tif val >= 151:\r\n\t\tbools.append(True)\r\n\telse:\r\n\t\tbools.append(False)\r\n\t\t\r\nOUT = bools",
      "VariableInputPorts": true,
      "Id": "3cd1488a46574f8dab26fa1c07741df4",
      "Inputs": [
        {
          "Id": "cf4ee8e2b57947cb93ea3d3ba94be675",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f053992bde5449f87d5059995afcf6c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "390f9c3ee0534887b0463478737fa209",
      "Inputs": [
        {
          "Id": "490740eca337452e9da9fcdbc2982cc3",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "365d11db8d93406d9cd7f9c8f6f1dafd",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a5d4b59bff46478badf8f2c08a6c8748",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "bf9d4c3b12734e0d80ae2e9db2b7169f",
      "Inputs": [
        {
          "Id": "b9470cc3f3f64836b97f9a0532cc7536",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b9010033533498e900f87c38ef0cf39",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1594ff2c08f849de83552a014fbd1e76",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "e3f7b073de604db0a285218d4b1db378",
      "Inputs": [
        {
          "Id": "fa6aa6d82842454693df252735f1cf13",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "853ee244ae4f40f6af2a3ecec2330a42",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4f2e12a9f9e4492986f2ba3d7aa34d97",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "87c232ee909644c0a19ff206e5eb9ee1",
      "Inputs": [
        {
          "Id": "f10771c513df42a59177638860ffc58d",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7095048d689848788ab997ee017ef874",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f09526b4486a44a2a2a1daf061b75138",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "840767eda9064cb2ae7dcaac26786412",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "e32f4a1adf2f429e8d461c6fbfcf7cf3",
      "Inputs": [
        {
          "Id": "926ff90fe9fc4fa297f493db91fa2216",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "34bb60b5cf37449194c89c1ed55acd4b",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "334ceebb499646b4ba4c2bd0b632a865",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Sum@double[]",
      "Id": "faff7e7c0be748359629c0b48801441c",
      "Inputs": [
        {
          "Id": "9be98f3e252c401da0aa9f27a77550ed",
          "Name": "values",
          "Description": "The numbers to sum\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a4361c02b0a741a381c978421c533d6d",
          "Name": "sum",
          "Description": "The sum of the values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Find the sum of a series of numbers\n\nMath.Sum (values: double[]): double"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "ff6074e1920a4c61b846dcdea684fade",
      "Inputs": [
        {
          "Id": "e73b1ee0436c41069e9f72238136f278",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1c283558cc984b66b3a5bb93d6226d3c",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "08f5f169c76142b983627d78fb9449ce",
      "Inputs": [
        {
          "Id": "15f5fedc2be24c38b6c09f113db4f3ce",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "678bb8a64a7349de91dd12df7ad2eb99",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "94e8d31b3b41412888833c73bbfe9443",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "085fb6f3b52f4418a46dfcf04d5f40b6",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN[0]\r\n\r\nbools = []\r\n# Place your code below this line\r\nfor val in dataEnteringNode:\r\n\tif val >= 151:\r\n\t\tbools.append(True)\r\n\telse:\r\n\t\tbools.append(False)\r\n\t\t\r\nOUT = bools",
      "VariableInputPorts": true,
      "Id": "6dc2f218fd544f43b7797cf297f7677e",
      "Inputs": [
        {
          "Id": "8813cf26d98145818025f5b32490759b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "465f26bfb18b49d6b9e44187a6a878ae",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "e013aaec0a79460f9e44260125611f6f",
      "Inputs": [
        {
          "Id": "0aadc3b0892b439cab78ac8f8887f2a3",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "67e0f680a02b43299b783e9ace34b6e6",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b29429cd128a48fda0dcce5458ee23c6",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "e7881fa080e046859d0f6ed84060e53f",
      "Inputs": [
        {
          "Id": "31924d3afee948e09b2f99182027e7cf",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8130a486245f4edaac4840f8be3d7439",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9d4062237e4944e1bdb1146d679f0333",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Sum@double[]",
      "Id": "3cc415b7dcb34668820a31a2a5cfaaaa",
      "Inputs": [
        {
          "Id": "c57e219866b14ca09e31e6c87f4f7062",
          "Name": "values",
          "Description": "The numbers to sum\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "94eed2e195c94dc79496e09990611f21",
          "Name": "sum",
          "Description": "The sum of the values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Find the sum of a series of numbers\n\nMath.Sum (values: double[]): double"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "30efa5036c304b96acd3bb5cd625d28a",
      "Inputs": [
        {
          "Id": "c3fd488e0605419ba7edc49e8dffa7cb",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "387c4c392e0146dfab9c3cbd754ed509",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\nval = IN[0]\r\nmult1 = IN[1]\r\nmult2 = IN[2]\r\nmult3 = IN[3]\r\n\r\n# Place your code below this line\r\nif val >= 0 and val < 20:\r\n\tOUT = mult1\r\nelif val >= 21 and val < 40:\r\n\tOUT = mult2\r\nelif val >= 41:\r\n\tOUT = mult2",
      "VariableInputPorts": true,
      "Id": "33d7c3b453b54142b31050b6489da92d",
      "Inputs": [
        {
          "Id": "4dbd0f324dd541bba903699e3fe4f6a8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "968621f3cb904f6ea47659543e893bef",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1bb160e30b944ffaabb98d0237d70e24",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f079d98379143e0894e9bdcabd5b4eb",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4b9ceb1d983648258feedd674fb9bb33",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "20ac434c1c7b4a9b9b3fa3bd0973e853",
      "Inputs": [
        {
          "Id": "7a6a9436e29541a79def74c67aad44d2",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d7768d9eaab04f2f9e5fbb9aaf0d7e35",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c84b1469b5d34d82b1fba1e3aa8cd4a0",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.5,
      "Id": "b48aee1a90254ae7a12944ed2293ebf6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "357d36a7c64c4388954584523611444c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "0073bfaeb4774685a302acbe72282b4b",
      "Inputs": [
        {
          "Id": "ece8ae647c6040b8ad28a62296befdaf",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "082123ac0d1c4486acadd2c4099276c7",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9ffb740437994697b5bdb71015e96c0a",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "38612683a6a2409a8a60918c0383b67f",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "b305ac0d8e004d00b67d898dc8966492",
      "Inputs": [
        {
          "Id": "8d53be6b3f55484f9eee2640b8df5dff",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "47139e5efac949ea9bc077db0037cd47",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "11230a3b90084aa891030aecc9cbf7aa",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "649d84dd826b4d63bebfa181e0983e58",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN[0]\r\n\r\nbools = []\r\n# Place your code below this line\r\nfor val in dataEnteringNode:\r\n\tif val >= 51 and val < 150:\r\n\t\tbools.append(True)\r\n\telse:\r\n\t\tbools.append(False)\r\n\t\t\r\nOUT = bools",
      "VariableInputPorts": true,
      "Id": "1c70a30ba27c4c93b11c0e873650e529",
      "Inputs": [
        {
          "Id": "c3dbb7144fd940f09c3b8372a5e3ffb0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e85c6702a92c40d58a8ec6b95c48438c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "b2867d12f4da45179b4052f29444c945",
      "Inputs": [
        {
          "Id": "3502c5526bbf4ba7941f791410d2eeb6",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5d9dbcfd1a064b578ee5a49ae49e4306",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "18b82be1f62c4511b7ce83a19b3f9739",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "61c993a266eb4e3da17e028c445e2eb8",
      "Inputs": [
        {
          "Id": "f80f6a0a0c5c44f7998d44686a8ba1f4",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1d244e99591d48a1861be09a8e9d4fa8",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5a02d1b50c37445ebc60131316d4e644",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2721d3486302488586620f9049130fde",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN[0]\r\n\r\nbools = []\r\n# Place your code below this line\r\nfor val in dataEnteringNode:\r\n\tif val >= 0 and val < 50:\r\n\t\tbools.append(True)\r\n\telse:\r\n\t\tbools.append(False)\r\n\t\t\r\nOUT = bools",
      "VariableInputPorts": true,
      "Id": "50f1957b42b745f893532d2af37e6ed0",
      "Inputs": [
        {
          "Id": "bc2a7114705143ceabb4e354cb9d2e06",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5ca38d56853e41799bd1ea73797b8541",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.Area",
      "Id": "d00b228633b74281af95896e050286bd",
      "Inputs": [
        {
          "Id": "8fec6df8777e4a69b92792582352aafb",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b89f6c7456434ac9ad96b1d11b0cbb52",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the total surface area.\n\nSurface.Area: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "88c79eedbc2e4303893fe82e573f789d",
      "Inputs": [
        {
          "Id": "4eef78ce825348308f7c9213c8768692",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f410735322a4ade96c7ce9a0a1628b8",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c0cc181bb2e44301a5d2c35f018309b1",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "97776695def84d028ca42b15e0fd2ce5",
      "Inputs": [
        {
          "Id": "a41ec36a58914c06911c1dec8915b97e",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4a0cb677be5e499788ee1bd4d7784fd5",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "25694868be6b472ca5506928e3fc372a",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4ebf59a7d795491fa2755d64d3e69f61",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "8cb6515501bb43c5b8faa3a2da6a618f",
      "Inputs": [
        {
          "Id": "59e57c886ba04cefad6c076392654834",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "954d8d7cc198463b985688a14b9ecf32",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7253a5d44c6d4650bec6635483b3a989",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "7301eec0657245cb83a20b764322bb58",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6e3b90ec740a4399bace12a677e47b43",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "CoreNodeModels.Sequence, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e454e10bf33e41878ad6b77d9de05cfc",
      "Inputs": [
        {
          "Id": "1b46e975e53f4d7f90fdf1b66034f117",
          "Name": "start",
          "Description": "Number or letter to start the sequence at\r\nDefault value: 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "496dd1654b244ed789fc1666c5cfe9b1",
          "Name": "amount",
          "Description": "Amount of numbers in the sequence\r\nDefault value: 10",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c14e345f7cb6412e8b527a2ea6cf02e7",
          "Name": "step",
          "Description": "Space between numbers or letters\r\nDefault value: 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a9cdc28c46c94faba4890f1327e1dcbe",
          "Name": "seq",
          "Description": "New sequence",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a sequence of numbers."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Plane.ByOriginNormal@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector",
      "Id": "3becc28ceb544d80ab397fea1435f289",
      "Inputs": [
        {
          "Id": "124e0593e2b1415c98c86fad33b21b05",
          "Name": "origin",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd2156ae3a524be99d2e055f354dd73b",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2b4cb57741c548f4b136b7ef5a57ff43",
          "Name": "Plane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Plane centered at root Point, with input normal Vector.\n\nPlane.ByOriginNormal (origin: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Plane"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "8f87a75b99624083be7d68fe4debf7dd",
      "Inputs": [
        {
          "Id": "ebfe4dd302a24ddc9c5f3cbffc6b33a1",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7c0b896b81144298857a5ffea4a0a1b6",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9922efad42944be489eaacb63199603b",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "11294ae4807145c99bb7d24fd56e62e6",
      "Inputs": [
        {
          "Id": "349472162e584c9ab937e64abce4e00c",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a965b6ddb52f4096acfe7f3e7bc1d9c0",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1217c9ec57b3425e88c3cd8449d13e3f",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "/@var[]..[],var[]..[]",
      "Id": "514878d08f3e4ac9a9403d7a77602d9e",
      "Inputs": [
        {
          "Id": "522f8452ff794b3eb27c40e2c1bdc9ad",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0e14969f21c5472e86cbf59c60acbaad",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "acdcaf64ec1642ca8070f53128d1a371",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides x by y.\n\n/ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "b13111987fbb48369cac7320d7fbfee4",
      "Inputs": [
        {
          "Id": "a5d7f7886c854d46a525181501e763e5",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16134557470b44f882de3b3d48e5809b",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "05dc3076a7624658b79378787e09c441",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 90.0,
      "MinimumValue": 0.0,
      "StepValue": 0.1,
      "InputValue": 69.4,
      "Id": "893e1340c6fd47c28265c17f393723d7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2450cd670cc9426bbbc89b1693658f2a",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Id": "f8d12a3a276b4a66ba522ce7b9e7d19e",
      "Inputs": [
        {
          "Id": "aae866d327fb41cb83e9636bb58b1dc1",
          "Name": "x",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ccf029f58a0a45269a4443d01176c446",
          "Name": "y",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fb2eff6622f546eea725fc1bc71bf23a",
          "Name": "z",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e3b626caf08f432a8d40fbe0ff7d4b6f",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "94f2d2d1921b4c7985d4618615999d56",
      "Inputs": [
        {
          "Id": "104de5004f3f49d18f50cf971f7dfd39",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3cf0435aebab41be9e8beeccbb20310e",
          "Name": "other",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78a35f81e86d4c4fa5e033f82a8179a9",
          "Name": "Geometry[]",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the intersection Geometry for this object and another\n\nGeometry.Intersect (other: Geometry): Geometry[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 200.0,
      "MinimumValue": 100.0,
      "StepValue": 0.001,
      "InputValue": 158.431,
      "Id": "faf214a09d714c7785ac3bbb533cb716",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7f23cfcc92344217b428aeda2acde013",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Rotate@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,double",
      "Id": "9fbe4cea724647329b4f75de1ec117ec",
      "Inputs": [
        {
          "Id": "a16b690d67a04fbaaa2bcf35f537b9de",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1221f50801ab4af78a44baaf9447f0dd",
          "Name": "origin",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "efb671ffed054abea90db5cad1c92f85",
          "Name": "axis",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2fc064100a345ed98f79bb12eb38009",
          "Name": "degrees",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6bfaf0fa99de460ea2d0be4d63faa465",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Rotates an object around an origin and an axis by a specified degree\n\nGeometry.Rotate (origin: Point, axis: Vector, degrees: double = 0): Geometry"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 200.0,
      "MinimumValue": 100.0,
      "StepValue": 0.001,
      "InputValue": 117.098,
      "Id": "d9270299c18f4543832d3e61d0d4f2f2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "13ebddfd435443d38b6415c0d9e76c71",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "ea10600fcf484f88962de1eb436c8a9a",
      "Inputs": [
        {
          "Id": "eecce6d0127e48fb90f6ac5b7ba0e2b5",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "60911bbd15f3429a9e1797f46a5372b9",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "024047c177234e9da0b882ede7c5f1db",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "361c905d10cd4f2ea732a221356508dc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e70330a672334958bb3758c3c6ead5b2",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "de083f5e7d56445c93e81c1b0ec708ec",
      "Inputs": [
        {
          "Id": "dcc5b36958f84cf6874a52db08e9dbaa",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "98eb831a927042009f8db1b5341d7d98",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "456ebb02bb2948da8c4997abe1d02482",
      "Inputs": [
        {
          "Id": "fd12b79320be410195f40a47e917e66d",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9c978ddcbe0f4b5491b3516e1c631e34",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6bb23af38df14bbc9a8f5f96caa9d01e",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f40625b6c4dc4252ab6ae8c522e65133",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 1.0,
      "MinimumValue": 0.0,
      "StepValue": 0.001,
      "InputValue": 0.5,
      "Id": "ac9e7d2da2694e1d91a86235befc0e35",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aff27b227a7b48c19830fb2661d326df",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Rectangle.ByWidthLength@Autodesk.DesignScript.Geometry.Plane,double,double",
      "Id": "22677d9c01034fdaadb344af3cad92f1",
      "Inputs": [
        {
          "Id": "dc839e26c5104f8abde13d316c5c1e47",
          "Name": "plane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b4d6f4be231d4c69aad00bad8b549531",
          "Name": "width",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0a53b3a6bad945fbb61bbd80b3fca62b",
          "Name": "length",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "83cc58422786415fb1739a5385cc303a",
          "Name": "Rectangle",
          "Description": "Rectangle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Rectangle centered at input Plane root, with input width (Plane X axis length), and length (Plane Y axis length).\n\nRectangle.ByWidthLength (plane: Plane, width: double = 1, length: double = 1): Rectangle"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.ExtrudeAsSolid@Autodesk.DesignScript.Geometry.Vector,double",
      "Id": "b13fd6c6ac854c8787f1255ba685bb1c",
      "Inputs": [
        {
          "Id": "459fc43680a84d0795fa7b1b70781112",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5f1df1426d434c28aadaaeecfdee19ae",
          "Name": "direction",
          "Description": "Vector to extrude along\n\nVector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a675e3c3e02348769b58e78412dc753a",
          "Name": "distance",
          "Description": "Distance to extrude\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6080626f98e345ef8294aefe508f7049",
          "Name": "Solid",
          "Description": "The extruded Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Extrudes a Curve in the specified direction, by the specified distance. Curve must be closed.\n\nCurve.ExtrudeAsSolid (direction: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1), distance: double = 1): Solid"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 1.0,
      "MinimumValue": 0.0,
      "StepValue": 0.001,
      "InputValue": 0.5,
      "Id": "6bfd11a028ab4fd18340df717e8a18de",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aa62ea3b68304c86ba9ef01e1b37c09f",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Plane.ByOriginNormal@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector",
      "Id": "c4858c0430d449df8aaf363719710ff9",
      "Inputs": [
        {
          "Id": "1dfa796f52144088a5b6875acab1f7e6",
          "Name": "origin",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1cbb57b6f4c3407f90b3e3eb4a1316db",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eec95316090247cc97feb1675a326ed1",
          "Name": "Plane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Plane centered at root Point, with input normal Vector.\n\nPlane.ByOriginNormal (origin: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Plane"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "06371f3044c8417c9e1ed83d59c9ceb6",
      "Inputs": [
        {
          "Id": "00a0aab93155420c8c43b4d8231ab262",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bbb24e7dc5944d9e8f585701e1fbb923",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "98810e6b12934c12863ad5642ab61f9c",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Sum@double[]",
      "Id": "9712eed346ca4abe86e588634dc3a150",
      "Inputs": [
        {
          "Id": "f760c86a89ff48feb47d12c89929b9f2",
          "Name": "values",
          "Description": "The numbers to sum\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9aedf3058b1e462d83d73db3997c406a",
          "Name": "sum",
          "Description": "The sum of the values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Find the sum of a series of numbers\n\nMath.Sum (values: double[]): double"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "69edd1b639a2429aa1a9e9d78976123b",
      "Inputs": [
        {
          "Id": "f5522247b1184cc2960b93c005498bab",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b9860f6844c2488da3d2ff3e4db68152",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "8f802e6d1b1744cfa7cd9bbf08bcaaa4",
      "Inputs": [
        {
          "Id": "ca5d342acdb34b2e90bb0418a0c41228",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e741079354c040f0a464d5e0a2462fb7",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be8156b144ea4dcfbf79831511f189b4",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "1f593c64c9474a6bab353510d91d4a81",
      "Inputs": [
        {
          "Id": "161eb7b87c0644be9224bad42140b20c",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d7c96caf2de142cb843ec95727482090",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "46f854c7d417496b90ba4d5060b2ee0e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "3eebaaba846d48de8758f9ed6d742f5a",
      "Inputs": [
        {
          "Id": "7d6b410a8c4b4f0d9d7f2a380e539a24",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f26c11ec866499a835456682b82f2e7",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "afbfc327500a4d1296602f1a64e6c9cd",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "6856a3096a1c4d9daacf1b8091b43af4",
      "Inputs": [
        {
          "Id": "cd8ee810dfaf45bebf73b2879c137f3d",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "15e98f0691eb45d88fa0057517cd617b",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fcd3402ac11c4a708e26343f864956d2",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Sum@double[]",
      "Id": "e087768916874ca4b9efb1481c5ecc93",
      "Inputs": [
        {
          "Id": "18bc0d80635542e188ec023837613e56",
          "Name": "values",
          "Description": "The numbers to sum\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dd5835a0290b42d6a23c38170fb29c22",
          "Name": "sum",
          "Description": "The sum of the values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Find the sum of a series of numbers\n\nMath.Sum (values: double[]): double"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "96d8f353b98a49f5b46d18e7b4c8385b",
      "Inputs": [
        {
          "Id": "4ebe7b1b765a4c09a7e5b8501e993654",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "38832914013b484cbb83a69f33ab3ca6",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "3986756dfa9f46b797949a45e2c8d72d",
      "Inputs": [
        {
          "Id": "a2ab2eb8b1f8457fa69480cc016e4779",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "65f5e74a3a974215b0c169419a9d1ef2",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6de7dae399cf45fdb42a7597a633bdc5",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "/@var[]..[],var[]..[]",
      "Id": "df0ffa6d40a445f1b5bf2feeb4e7814e",
      "Inputs": [
        {
          "Id": "69ccb9be2fde4d69bc1ac41313974336",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "842aecab54a94e77b19b86c276869ca7",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b9d26b7ddad14f878e4bb75d7324bd27",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides x by y.\n\n/ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "d1066a3596ad49969dab28cea0e6e6c0",
      "Inputs": [
        {
          "Id": "015da0988b59481c8fa55f1a2b5a9cff",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fad48851f4034e159a6500f4c22eec19",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 1000000.0,
      "Id": "f8200f8b8c8e4cfa89a3d47b30a3707a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "456c5212e3a646e482c682562cce491c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 0.5,
      "MinimumValue": 0.1,
      "StepValue": 0.1,
      "InputValue": 0.1,
      "Id": "fe30eb6635f145a6bc65100f50892c97",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4547cab306e1412a8053889f73914597",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Refinery.Remember, RefineryNodes",
      "NodeType": "ExtensionNode",
      "Id": "25f7002c44e942e8b59f2dca2e6b6d2b",
      "Inputs": [
        {
          "Id": "7a54a17f918541d98270d3698361d65b",
          "Name": ">",
          "Description": "Data to sample and store in the file.\n\rlist<object>",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "85b8bbb6f7994151bf44c7f5df76c229",
          "Name": ">",
          "Description": "Data \n\rObject",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Store data flowing through this node to the Dynamo file.  Return the stored data if the input is null."
    },
    {
      "ConcreteType": "Refinery.Remember, RefineryNodes",
      "NodeType": "ExtensionNode",
      "Id": "76bc313ac1bf4aa3a820c11e9f4bd2a9",
      "Inputs": [
        {
          "Id": "9023c983df51421b89126bedcfec5cc7",
          "Name": ">",
          "Description": "Data to sample and store in the file.\n\rlist<object>",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "32f62348879f46b1a8de97ed4c9abacf",
          "Name": ">",
          "Description": "Data \n\rObject",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Store data flowing through this node to the Dynamo file.  Return the stored data if the input is null."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "3f9e35f3ee7d4e2ea457c38cec0cd607",
      "Inputs": [
        {
          "Id": "4063ff267cef4137b6ed52772869da71",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "77ac3397be474d7ab9b19f6500c1bbfc",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "98d46ee858ee40efbdcf3e4ea8bd05d3",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "3a8984a7f00d4220b89797594ebb169d",
      "Inputs": [
        {
          "Id": "97b0bd1d43cc4548867ce64df5e28678",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6252e1b302784763bc3f96647cb0a760",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "158cb92b30e34b208b4486ff0262bbf7",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "739a1981020b4286a1f4e3d27cb6a23f",
      "Inputs": [
        {
          "Id": "3c7100fbe5474ce4aa2f1649138dfecb",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "548d1cddc75c49fb9803cbb4ccf4b3a1",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "CoreNodeModels.Sequence, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "ab37f6080a1046ee9a731cd796ab9a4c",
      "Inputs": [
        {
          "Id": "f8d2e0499d6448d886cb1aab92d1e9fa",
          "Name": "start",
          "Description": "Number or letter to start the sequence at\r\nDefault value: 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "05509ec02eba42c8a83374c68c78facf",
          "Name": "amount",
          "Description": "Amount of numbers in the sequence\r\nDefault value: 10",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "91484703328e4e30b4570b2b6d0d993f",
          "Name": "step",
          "Description": "Space between numbers or letters\r\nDefault value: 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8eb3d545a5214f2cbc68f7381da33447",
          "Name": "seq",
          "Description": "New sequence",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a sequence of numbers."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 1.0,
      "Id": "b27ab61dd9de43ca9a4d608635b25bf6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2a8ce80be6e04ff8acfb2cda7291438c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Mass_Level_",
      "Id": "b81d481159df4b4cb04fca31c5e587df",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6710a5feffea4a32a2bc8c70c0c05c82",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "6a643403222e4d98a51a7ba0203a5352",
      "Inputs": [
        {
          "Id": "c6198421e617412bbbb014a09640e73e",
          "Name": "obj",
          "Description": "Object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4736676db0d2421db8787d0252f0d3a9",
          "Name": "str",
          "Description": "Result of math computation",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an object to a string representation."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "8280fc234381491bbdbc58e9ffa7d514",
      "Inputs": [
        {
          "Id": "62dc4b181d8d4e239729ce4db8ddf7c9",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b080ecefab05470c9f39debd4338a949",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0571c73e5e1c4b8dab620a62c6f1ad8c",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3351656dbbd040f6bab7dcdb9c33c679",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.5,
      "Id": "6fefda0d19be4b2d8be0d9b790509b12",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b59c82a322de4d23886306c4985db027",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Level.ByElevationAndName@double,string",
      "Id": "cc267419c3c84d779c54291f3f343012",
      "Inputs": [
        {
          "Id": "d202d0bee50d4c40939a72e6c5b61f6a",
          "Name": "elevation",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ed3b7f964cc94d6889da374532dca901",
          "Name": "name",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fde1773db1b346588b20c30043434f5f",
          "Name": "Level",
          "Description": "Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit Level given it's elevation and name in the project\n\nLevel.ByElevationAndName (elevation: double, name: string): Level"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Floor.ByOutlineTypeAndLevel@Autodesk.DesignScript.Geometry.PolyCurve,Revit.Elements.FloorType,Revit.Elements.Level",
      "Id": "04d3b70697bf4e7bb24de58da9b391c6",
      "Inputs": [
        {
          "Id": "11840eb934774b67a9dadbe33cda4e6d",
          "Name": "outline",
          "Description": "PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3f66c252697a49419a125886bf647cb1",
          "Name": "floorType",
          "Description": "FloorType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e2af076efde425f81a1729665e19194",
          "Name": "level",
          "Description": "Level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df93f3f6b23e4023b9303708aafe717f",
          "Name": "Floor",
          "Description": "The floor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Revit Floor given its curve outline and Level\n\nFloor.ByOutlineTypeAndLevel (outline: PolyCurve, floorType: FloorType, level: Level): Floor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolyCurve.ByJoinedCurves@Autodesk.DesignScript.Geometry.Curve[],double",
      "Id": "681eb615dad7465181a24e50f3e9e9d7",
      "Inputs": [
        {
          "Id": "e03144a2f3ee48dbac0747ce97d68dd1",
          "Name": "curves",
          "Description": "Curves to join into polycurve\n\nCurve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5a120e11793443a998f463f6ba6cfbee",
          "Name": "joinTolerance",
          "Description": "Tolerance to determine size of gap allowed between curves to be joined\n\ndouble\nDefault value : 0.001",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4f2e0a1125264e629ac5994beec5de3c",
          "Name": "PolyCurve",
          "Description": "PolyCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make PolyCurve by joining curves. Flips curve as needed for connectivity. Choose a preferred join tolerance between 1e-6 and 1e-3 units.\n\nPolyCurve.ByJoinedCurves (curves: Curve[], joinTolerance: double = 0.001): PolyCurve"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FloorTypes, DSRevitNodesUI",
      "SelectedIndex": 2,
      "NodeType": "ExtensionNode",
      "Id": "853340820c954f138b50e5f5e26ccf96",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bf0ce21333b443768cf7529387864327",
          "Name": "Floor Type",
          "Description": "The selected Floor Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All floor types available in the document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 1.0,
      "MinimumValue": 0.0,
      "StepValue": 0.001,
      "InputValue": 0.5,
      "Id": "a0a5ba3e7d1a45cfb51b8d0dc6c9ce76",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "67f73c1600af481198cf432c3cce4595",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "7e20b08a662f493a9f38c9ecd7aa1b99",
      "Inputs": [
        {
          "Id": "e693f42308094c8aa3395f93af3fbc6a",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eec6a6502c3a406686aa324d2da45aeb",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "85c0806daeda409e91f0d18cbb7e7347",
      "Inputs": [
        {
          "Id": "0e2d1d26519f4484bf7ab3f4b8c27363",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d4abe8c388ea41fd82c3dfb6962d4633",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.Extrude@double",
      "Id": "4d8e64a4577545049e874436a61e4cb0",
      "Inputs": [
        {
          "Id": "476cb9458d794589ab3d244d872041b9",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "272a8751c45f4bec8f6b3d512cec8aa1",
          "Name": "distance",
          "Description": "The distance to extrude the curve\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "58dbc2d076c04901ac00956619cf798c",
          "Name": "Surface",
          "Description": "The extruded Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Extrudes a Curve in the normal Vector direction\n\nCurve.Extrude (distance: double = 1): Surface"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.Area",
      "Id": "225c63d428174f4381bc5c4c3970c0f3",
      "Inputs": [
        {
          "Id": "e5641f846bbc4ec8aec1303348507242",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9aaf66308e4644bca84bc470d12015c4",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the total surface area.\n\nSurface.Area: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.Extrude@double",
      "Id": "5a3814944558442ea6ff827083cbca94",
      "Inputs": [
        {
          "Id": "6cf1ec3bb8134bc9a364388d1033cafa",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d7c3c02e39ca4dcb9466f4e25730237c",
          "Name": "distance",
          "Description": "The distance to extrude the curve\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0562daf54e584888a327f64491694c75",
          "Name": "Surface",
          "Description": "The extruded Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Extrudes a Curve in the normal Vector direction\n\nCurve.Extrude (distance: double = 1): Surface"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.Area",
      "Id": "70a9ecd12c31437c8636d4084f6675f9",
      "Inputs": [
        {
          "Id": "fbb8c7e7de8043afb5d7c1353689e85a",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "696122c5f5414e329e26907aebcac572",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the total surface area.\n\nSurface.Area: double"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "65ccd0ff4d1b4882b49848bb6e07f036",
      "Inputs": [
        {
          "Id": "49e55997b2544acf84b7116b63373cc2",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e16f0317d85e42bd8e47c75bd8f4914e",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "9fd92f7f986644d0a2b399bec5dc84cb",
      "Inputs": [
        {
          "Id": "90362a5f29dd4df4bd98720fcf7d37c7",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e00edef3663846cebfd591b3b6219a55",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "6f62523ee2f64a6cb55b65067df15270",
      "Inputs": [
        {
          "Id": "30b8e39ee6894776b52eaf8172646fb2",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "267593ce67d74cb7b9ff6fed77551585",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "56c4eafac010474282bb830a641e4192",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Sum@double[]",
      "Id": "e0ed5d3f80aa49ec9faa12a913314045",
      "Inputs": [
        {
          "Id": "8e66b2711c744610886de99d33052f89",
          "Name": "values",
          "Description": "The numbers to sum\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "96953f1087254831b8494553191d3bc0",
          "Name": "sum",
          "Description": "The sum of the values",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Find the sum of a series of numbers\n\nMath.Sum (values: double[]): double"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "4cb9e2c336ab413b9e05f60de1ee2636",
      "Inputs": [
        {
          "Id": "e22ad8e75a1f43d69a70807aa08ff5e8",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "09d471ed27804eeb8c6f4f9bb2d70e03",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolySurface.Surfaces",
      "Id": "d540fcc341e04b399d1dda4278573d07",
      "Inputs": [
        {
          "Id": "0c15d2a1ecb049b295b4131737c48937",
          "Name": "polySurface",
          "Description": "Autodesk.DesignScript.Geometry.PolySurface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fb3ce9f817834c069a4662f7afef1fb3",
          "Name": "Surface[]",
          "Description": "Surface[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return new Surfaces representing the underlying Surfaces.\n\nPolySurface.Surfaces ( ): Surface[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PerimeterCurves",
      "Id": "703bf8cbb71942ea975a47e5308a5aaf",
      "Inputs": [
        {
          "Id": "3f023e48c36842f2810099f492e553a3",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2240339328d04264bac7653dbd1bdc93",
          "Name": "Curve[]",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return all the boundary Curves of the Surface.\n\nSurface.PerimeterCurves ( ): Curve[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolySurface.Surfaces",
      "Id": "dacca06c24554ab09dcdc2d925b39669",
      "Inputs": [
        {
          "Id": "b263310874734948bfe28ab8bfc780d8",
          "Name": "polySurface",
          "Description": "Autodesk.DesignScript.Geometry.PolySurface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "103a7dee18114a57b0278ac5129ce082",
          "Name": "Surface[]",
          "Description": "Surface[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return new Surfaces representing the underlying Surfaces.\n\nPolySurface.Surfaces ( ): Surface[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "2038fbcddf0b49e58591f761d676f25f",
      "Inputs": [
        {
          "Id": "b1f8032dcf414b548515e8b6a0e8b93e",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e6ceed3ff3dc4c0dbf1ca067ca92cab2",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.X",
      "Id": "39ff65c2cc5047e9aad0cac6deea3a95",
      "Inputs": [
        {
          "Id": "a53314991ba345ed822fe7707bf0bcf0",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f10aa629f65d49b2b6aeba3c2de437ad",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the X component of a Point\n\nPoint.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Y",
      "Id": "96e7b66efdc746dc841823c37d09a184",
      "Inputs": [
        {
          "Id": "7d209d08cb6242978b32ad514852c60c",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "380af45b78544b2497bc76e7ea2fed74",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Y component of a Point\n\nPoint.Y: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "7641d4267ab947b494e869fae7902690",
      "Inputs": [
        {
          "Id": "d79e32fe9e7a4115912e9241b6d0ccca",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "072a62e592ae474db57fa69a3c41dc23",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolySurface.Surfaces",
      "Id": "4733798a7a71419a9136fe1017ce6f9b",
      "Inputs": [
        {
          "Id": "b6290123c06249318f24a7642b57a5ad",
          "Name": "polySurface",
          "Description": "Autodesk.DesignScript.Geometry.PolySurface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "52e83fbf1a294e3a9f7a9fef9ca41b15",
          "Name": "Surface[]",
          "Description": "Surface[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return new Surfaces representing the underlying Surfaces.\n\nPolySurface.Surfaces ( ): Surface[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Reverse@var[]..[]",
      "Id": "e1e4c9ecdb184dc3afce5c1a13fa2c57",
      "Inputs": [
        {
          "Id": "383db9bed05140bda6af0f94d69189d8",
          "Name": "list",
          "Description": "List to be reversed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9ea66a09cb2a4e06b4b4d5036e1e0c57",
          "Name": "list",
          "Description": "New list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list containing the items of the given list but in reverse order.\n\nList.Reverse (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.5,
      "Id": "c1423f932b5a4ed39d67901b818d6a29",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1f92383d21c74deab1d8c9c5ed9aab0c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "66c487e90e884f78852439ba45e7f9e6",
      "Inputs": [
        {
          "Id": "87762472af1646d4bada8b70557623b8",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "89d2356932c54411bc73bbab63516900",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a4890df5d4544df887471a7c4f7216a",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "87f93e0e878a4d578fb220d8fcd1d72c",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.PolySurface.BySolid@Autodesk.DesignScript.Geometry.Solid",
      "Id": "65ee879e93dc403bb8bd891c0f95b048",
      "Inputs": [
        {
          "Id": "4c4555ad3de14dbc95e38be1ebe4bba0",
          "Name": "solid",
          "Description": "Solid which surfaces to use\n\nSolid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "21bff435aec14bd0bbc9e299d537206c",
          "Name": "PolySurface",
          "Description": "PolySurface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Make Polysurface by surfaces of Solid.\n\nPolySurface.BySolid (solid: Solid): PolySurface"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "7b9b52784f5a4f8c84af8bce79bd3f84",
      "Inputs": [
        {
          "Id": "e4187ecd31354318b999eb74489d95e0",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "97e967c94a5343f28fe664a0f0335584",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "63ddfe60f27743b4909a76e2803e5faa",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.SortByKey@var[]..[],var[]..[]",
      "Id": "cc35c903b2964a70a7aef819c555cf3a",
      "Inputs": [
        {
          "Id": "8b18c0b756ff4f778dd8d7925007d04b",
          "Name": "list",
          "Description": "list to be sorted\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a6c5a89270b2453a94330da1bb316772",
          "Name": "keys",
          "Description": "list of keys\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "403c3a5521f4420ab4a192ddeb5471e9",
          "Name": "sorted list",
          "Description": "sorted list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9c5fbba9cc204d2eb635317b423459d0",
          "Name": "sorted keys",
          "Description": "sorted keys",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Sort list based on its keys\n\nList.SortByKey (list: var[]..[], keys: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.0,
      "Id": "c31b9b35c9414a6c8aaeb33fe8f646ca",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "47b11a49b3ca4c77aecfb08da5b6270c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "0b68d993b2d24c21990b89fcc9a458a0",
      "Inputs": [
        {
          "Id": "da250ef77c9f4499b796f3d7ccdb8b11",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8696ed829e0e4a1eb472082059b87a9a",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PerimeterCurves",
      "Id": "50cf14d0f0704eca8e01438a59e284f0",
      "Inputs": [
        {
          "Id": "d2c267a480b94e11b8471bb85c96f522",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "21db4c2532e641c0b132f827ac0970e5",
          "Name": "Curve[]",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return all the boundary Curves of the Surface.\n\nSurface.PerimeterCurves ( ): Curve[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "8631b8a0ce99432cb43ab2dc7c6e33c6",
      "Inputs": [
        {
          "Id": "2fe641f9e4c74e978e71967ddeff5673",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1e97c7bb3cc4933ad1704141e4f4c9c",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.X",
      "Id": "eefb454198674f2c833cdc3bda24d0ae",
      "Inputs": [
        {
          "Id": "aa9c9072e4e743378ceb1410f03cd875",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "398e905377c24ff59f1d7b9cb0745946",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the X component of a Point\n\nPoint.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Y",
      "Id": "3f30d2f66f224fd4a848bd286cf8b3e9",
      "Inputs": [
        {
          "Id": "6b755b53fcca4465b2616346483fd294",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d086f59371394d2eaf983ff55edad3e2",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Y component of a Point\n\nPoint.Y: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "4252b2b2e025403e82ee04b74c18aadc",
      "Inputs": [
        {
          "Id": "c753a0d896924a6db352a032f55306ce",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e43ee92c6fb243fc812c54856be436c1",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PerimeterCurves",
      "Id": "bdebeae036d64a25899a108fb07d7480",
      "Inputs": [
        {
          "Id": "5875352ff54643a580f4226de9d275ef",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "38e3e02e65c84b61bf8c6387cd3faef4",
          "Name": "Curve[]",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return all the boundary Curves of the Surface.\n\nSurface.PerimeterCurves ( ): Curve[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "f00ee6c4d8b34dd7a79cc0184d9b0e9e",
      "Inputs": [
        {
          "Id": "8ad6e70c097d462aa08c5b9785164f91",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a2dd0031aa104b0e901c7560bc08526c",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "retail = area*percentage;\noffice = area - retail;\nsum = retail + office;",
      "Id": "b48d8983c61746c18f063a0d06e19e58",
      "Inputs": [
        {
          "Id": "e189d73b80434e0e8d225dd40b67590b",
          "Name": "area",
          "Description": "area",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f58823f27d534baa94d894f201f5013e",
          "Name": "percentage",
          "Description": "percentage",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "48ea084cb85547ea8e9e882e1c737cc6",
          "Name": "",
          "Description": "retail",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e2c61a8a959448ab97e764e642ece026",
          "Name": "",
          "Description": "office",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ddc7f190faea4b4e99bad336c4e50c23",
          "Name": "",
          "Description": "sum",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "c3cbfb80c81a4b05aad462c6fe99238e",
      "Inputs": [
        {
          "Id": "256250b61332416baa8cd892b2ebbd78",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e335cd0ddd5b405bb1f7975fd7c2bd4c",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "CostPerSF=180;\nFloorToFloor=14;\nRevenuePerSFPerYear=35;\nValueBonusElevation1=1;\n //0-50;\nValueBonusElevation2=0.25;\n//51-150;\nValueBonusElevation3=0.1;\n//151+;",
      "Id": "e7935e8b9bec4f03a41f3d0175fae863",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8c2bb0e34de549f9bd9e5f359dda671e",
          "Name": "",
          "Description": "CostPerSF",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bae4dfe687d942a7aa56daa961aaa9ca",
          "Name": "",
          "Description": "FloorToFloor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "383b804147244ee4b52647f130c4f948",
          "Name": "",
          "Description": "RevenuePerSFPerYear",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d88eb279256949d9a50f64e72bf36a1c",
          "Name": "",
          "Description": "ValueBonusElevation1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "270cac9c874848c1aa627044853ef321",
          "Name": "",
          "Description": "ValueBonusElevation2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2f85511bb205458eb0485b20610f5b9b",
          "Name": "",
          "Description": "ValueBonusElevation3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "CostPerSF=300;\nFloorToFloor=15;\nRevenuePerSFPerYear=25;\nValueBonusElevation1=1;\n //0-50;\nValueBonusElevation2=1.2;\n//51-150;\nValueBonusElevation3=1.5;\n//151+;\nValueBonusOrientation1=1;\n//0-20;\nValueBonusOrientation2=1.2;\n//21-40;\nValueBonusOrientation3=1.5;\n//41+;",
      "Id": "50376c03755b43dc8fcd0cbc2c5bd92e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5fd8c3081b4c4df2b11d6e5fb168c5ab",
          "Name": "",
          "Description": "CostPerSF",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b2b0b173491f4e48b32569e2d8237f6a",
          "Name": "",
          "Description": "FloorToFloor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ac99553d5b3d4e558b2613df7de2b8ba",
          "Name": "",
          "Description": "RevenuePerSFPerYear",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f65d778b89004a908eab98b08690ad28",
          "Name": "",
          "Description": "ValueBonusElevation1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fd853bb99b7649708e138e3cdbffe8b8",
          "Name": "",
          "Description": "ValueBonusElevation2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "761dc5faea694d8e8cfa8ed5bd0973bf",
          "Name": "",
          "Description": "ValueBonusElevation3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a536484c80b04550829aa07baecb056b",
          "Name": "",
          "Description": "ValueBonusOrientation1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "50cab9e4a4e1432c8413d4f1a14cec69",
          "Name": "",
          "Description": "ValueBonusOrientation2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ae2843a72d42499796316d5870851980",
          "Name": "",
          "Description": "ValueBonusOrientation3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "1e4a7e67801145c390ef5e2b8c8d62cc",
      "Inputs": [
        {
          "Id": "7a72c2ac8e30423d8d9af1d40b82dda0",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e1067ed00cae4b8cbafd5dcadfa7bdbc",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PerimeterCurves",
      "Id": "253617051d0d42d281188f2b9db5864d",
      "Inputs": [
        {
          "Id": "365cf749ab3540dfa1866764dbbcb27c",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e90a5a1a722c43068489e13f57bae66f",
          "Name": "Curve[]",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return all the boundary Curves of the Surface.\n\nSurface.PerimeterCurves ( ): Curve[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 255,
        "G": 140,
        "B": 0,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "ec955658e63a47339dd956f5a07c8d53",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "672d993438844c83b1578518dbdd0a5e",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 255,
        "G": 255,
        "B": 255,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "b7497f0e3a404859a5d33291a1a32651",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4cf45f84276f4c37a993cda092203ff7",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 245,
        "G": 255,
        "B": 250,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "b97b2da1235849e8b8d5964bf1a296f2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2fee110675f149f28f08e2afbf7d1d47",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 127,
        "G": 255,
        "B": 0,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "db0f62c16b2142df9d0ea3d202bafc7a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "783219e88f854cd3b543f71cd5d21e16",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "zoningboundary;\nretailblock;\nofficeblock;",
      "Id": "ef0de6ed84514df29d840fe0d508343c",
      "Inputs": [
        {
          "Id": "ae4e316923ac43b9b68e1b4854c6913c",
          "Name": "zoningboundary",
          "Description": "zoningboundary",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84018128fc054a619c32963cd4e0b995",
          "Name": "retailblock",
          "Description": "retailblock",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6bc046a1e482484198cc6e391d989800",
          "Name": "officeblock",
          "Description": "officeblock",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4ea07304569c4ec1a841785f85198159",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1c200880ed5d49cb8b6977aafb5f5cff",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b66d84996b984a1a90f9db7b53f4858c",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.Volume",
      "Id": "e1265dc1228b41be8a58b92a6cdc6f53",
      "Inputs": [
        {
          "Id": "f1708b07bd4449ec9b2fdc9079774b4a",
          "Name": "solid",
          "Description": "Autodesk.DesignScript.Geometry.Solid",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a44f76d87b8c4f11a53f16ac24df0725",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The total volume of the Solid\n\nSolid.Volume: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.Union@Autodesk.DesignScript.Geometry.Solid",
      "Id": "8b72ed9bac63487f9f13c643219e2f92",
      "Inputs": [
        {
          "Id": "2a90223dea4245638dc83eb1670ab23a",
          "Name": "solid",
          "Description": "Autodesk.DesignScript.Geometry.Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b8129f60659c49b9b0a7b0da4c6c0185",
          "Name": "solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5ea91a3ff03a4396bea81ef46557b742",
          "Name": "Solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The boolean union of this Solid and another.\n\nSolid.Union (solid: Solid): Solid"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "6f66488db4514f2e898fab7f69e5b543",
      "Inputs": [
        {
          "Id": "d244ed0aadce4f19be393a18a133fe62",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8228829390dc452fb9df319678725643",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.Difference@Autodesk.DesignScript.Geometry.Solid",
      "Id": "6be59004ab1c4198bd0184bd8ff5bf13",
      "Inputs": [
        {
          "Id": "ea877de7919d4c98b991b4d2a1d8fe3a",
          "Name": "solid",
          "Description": "Autodesk.DesignScript.Geometry.Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "83c31a7c476a466aa2a9427494de3820",
          "Name": "other",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "086dcf3b77624e4b83a2bbcf6a0819eb",
          "Name": "Solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The boolean difference of this Solid with another\n\nSolid.Difference (other: Solid): Solid"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "87b0790298334e439ee6d719567071d5",
      "Inputs": [
        {
          "Id": "9b561bf838f24af68b70aecc4eeb8185",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "472f5734435047209979c9a571867b73",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4695188adab84ff2ad029d441addd702",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "66aee6e710fe4ce5b5c2abb0fd1b8806",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0dab0d47d5e74057914cb09e0892383a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "9f081c7782954e0da86a0dacc2187051",
      "Inputs": [
        {
          "Id": "77c95318dcab407990d2fc57e0f2f34f",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d5926d5f915a47a6933a845513637b7c",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6fe5b1ef318e4732b124c60a3be665a0",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Color.ByARGB@int,int,int,int",
      "Id": "1076f97ebac64a11a030cf6115b38d25",
      "Inputs": [
        {
          "Id": "82d07e8fcf004b0881cb9aaf680f4e97",
          "Name": "a",
          "Description": "The alpha value.\n\nint\nDefault value : 255",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6d6f637d76814b88945d82ceb63c65dd",
          "Name": "r",
          "Description": "The red value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6555404918d54c9ba4f60d9e2dece47c",
          "Name": "g",
          "Description": "The green value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "acdb6c7863394a84a4d613f195e462d5",
          "Name": "b",
          "Description": "The blue value.\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9c9a3499c67642819f1f533047b30c91",
          "Name": "color",
          "Description": "Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct a color by alpha, red, green, and blue components.\n\nColor.ByARGB (a: int = 255, r: int = 0, g: int = 0, b: int = 0): Color"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "30;",
      "Id": "530472146c9e42219344c9e9317876dd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "685c727aa73f4f59a4c518e0f282a6f5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "LevelName + LevelNo;",
      "Id": "49f9476953194ea79c395b0d6b11a6a2",
      "Inputs": [
        {
          "Id": "169b3eceb27247869ae6eb8fb5468a46",
          "Name": "LevelName",
          "Description": "LevelName",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d5b41cf83ed54e30ba313703abbdd85b",
          "Name": "LevelNo",
          "Description": "LevelNo",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1e4c1ad52d04b3e99681ee4fbf81c02",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.Volume",
      "Id": "f22e88c92c4e4c94bc6d854603457681",
      "Inputs": [
        {
          "Id": "6e85b6c0c10342e7bb11c09a7361be5c",
          "Name": "solid",
          "Description": "Autodesk.DesignScript.Geometry.Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c468651dafc04072b35082d9791ec149",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The total volume of the Solid\n\nSolid.Volume: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ByTwoPoints@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point",
      "Id": "009555212cfb446b992170552315800f",
      "Inputs": [
        {
          "Id": "7df7d52491d84292af5e91c3a9481873",
          "Name": "start",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3d0e7441ac4b44d9bcb50aea018e6d4b",
          "Name": "end",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b7f49092ef6c413aab0a522dae366546",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Form a Vector by two end points. The result is a vector from the start to the end point.\n\nVector.ByTwoPoints (start: Point, end: Point): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.AngleWithVector@Autodesk.DesignScript.Geometry.Vector",
      "Id": "7a896bdff0d54920950c5cb4792c129b",
      "Inputs": [
        {
          "Id": "021bd141b32f469590a12582d77c4171",
          "Name": "vector",
          "Description": "Autodesk.DesignScript.Geometry.Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1d04e04c13db47979e09e246f52a93b4",
          "Name": "otherVector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c5e7718a880b42179659686d08cf0dce",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the angle between the two Vectors, in the range [0, 180] degrees.\n\nVector.AngleWithVector (otherVector: Vector): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": ">@var[]..[],var[]..[]",
      "Id": "4a36b01dd0644fdfaccbf465f01f6b16",
      "Inputs": [
        {
          "Id": "c233a2afd3db448598a36dc0c1479f20",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "feb4b74d48c640ecbc281cc6a9320040",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "20193c5ee70c4ab281c24d510d3d51f2",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "x greater y?\n\n> (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "10;",
      "Id": "cfce2831b4964560af87245864e3239c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "de5fe901811d48c3bec576218e623046",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.X",
      "Id": "bf628ae135e2467398287dc16834c408",
      "Inputs": [
        {
          "Id": "85f092b721ca4b5d9c3dc9cf7b3decbf",
          "Name": "vector",
          "Description": "Autodesk.DesignScript.Geometry.Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2956a4e1595b499b81bfa69152537d0f",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the X component of a Vector\n\nVector.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x==0;",
      "Id": "24ce4838da8b4f42b1501b6b304b421d",
      "Inputs": [
        {
          "Id": "e915adaf5aaa4bba8348d58415406a91",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "83d3f7d2f4174880b63921c94f225aed",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "cc11affa953f4db4abb33d2c6ae955b6",
      "Inputs": [
        {
          "Id": "943d95d139ad4bf1936bff4e262c6766",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "edeb08e0c7ed4daf801ef0ca6110a6e1",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "646d0c4ce65545ea877529003801ff6c",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "49d9ce95bae14eca9db79625b5c0d923",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "9c9d554c947c451da29212e2acc21f1c",
      "Inputs": [
        {
          "Id": "5bc6a867db4d42b99c30d29f803476ff",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cc6eb3ff98aa4b96a68e401654ce967a",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0a3df08ee91b43ea88c16e393bd89eb8",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a607e2548e6e42d1a9c05b51b9827797",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "7496cc0555b742f0bbf91caa27a3a28e",
      "Inputs": [
        {
          "Id": "b51a076ada804d788558e0f299b93fdf",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dd3e9306f39c4a488dc77bf00f6ea394",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4d3ce376f9cf4e27a0c47d0475632fba",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "09eebfb8f3fc4349abe4e5e14b674799",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "78db98dbd4e64d1cbafe9fa38bf3d1c5",
      "Inputs": [
        {
          "Id": "e38ec452b13f45f7af29f769baf9f94b",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "193e39f88bbe4c2c8f5e33c413052dcd",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Cycle@var[]..[],int",
      "Id": "8f557a62a70644fe857bc1f572400c78",
      "Inputs": [
        {
          "Id": "52b622fdf97742f7854da12e8c0b2a51",
          "Name": "list",
          "Description": "List to repeat.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0ef4a070c16c4be390005ccac3744019",
          "Name": "amount",
          "Description": "Number of times to repeat.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f596e040ea9442cf9387870a673c17da",
          "Name": "list",
          "Description": "List of repeated lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a new list by concatenining copies of a given list.\n\nList.Cycle (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "7eecb695082b49baaddf5935e24c7e11",
      "Inputs": [
        {
          "Id": "172b82c430fd42cb9238e057957cd3f4",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "85311f189a9f4cc5927ae8db87057302",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[x];",
      "Id": "94bc59590b394594b4994f91f73c439c",
      "Inputs": [
        {
          "Id": "7c5d18b73fbd4b63beaf019eb4350e5e",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "050d423bca134dcb88397436bb5b10ec",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "f9f366a0d2794b21ab5affe4c8b65022",
      "Inputs": [
        {
          "Id": "cdac7afdca7c40e3add454ba600f59dc",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1087e68288e34f1680372d92c895bfc1",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b56ae6186a064f0fbd089495b92f3790",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cacc30fdcc9546a8819a716f3d1ac3f2",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Geometry.Panel.PanelQuad@Autodesk.DesignScript.Geometry.Surface,int,int",
      "Id": "4481290a174d480e8ee2138c9dd2fc9a",
      "Inputs": [
        {
          "Id": "74a1c1e931df495bbe949e6781081bb8",
          "Name": "srf",
          "Description": "Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4ec96b15881c4177874682d7d7a1c9c2",
          "Name": "u",
          "Description": "int",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ca8395e8b0348639485f7830d37e0d2",
          "Name": "v",
          "Description": "int",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4bd58def7042443ba52245c9c19d4430",
          "Name": "Panels",
          "Description": "var",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b19de7b1f18e40e7b71133e140747cdc",
          "Name": "Points",
          "Description": "var",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Panel.PanelQuad (srf: Surface, u: int, v: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "4;",
      "Id": "2c740e8791744dc3bdf94e1fecb2753a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "eea992901c854c5caf8825c307eef2dc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Enable Python support and load DesignScript library\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nimport math\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\npoints = IN[0]\r\npanels = IN[1]\r\nbuildings = IN[2]\r\n\r\nlines = []\r\ntruncLines = []\r\ntruncLinesCol = []\r\ndists = []\r\nbuildingsSort = []\r\nkeysSort = []\r\nbools = []\r\nscores = []\r\npansFail = []\r\npansPass = []\r\n\r\nfor p1, bPanels in zip(points, panels): # single viewpoint\r\n\t#dists.append([])\r\n\tdist = []\r\n\tbools.append([])\r\n\tfor b in buildings: # loop through surfaces of buildings and get distance from viewpoint\r\n\t\tdist.append(Geometry.DistanceTo(p1, b))\r\n\tdists.append(dist)\r\n\tbSort = [x for _,x in sorted(zip(dist,buildings))] # sort by distance from viewpoint\r\n\tbuildingsSort.append(bSort)\r\n\t#dists.append(dist)\r\n\tlines.append([])\r\n\ttruncLines.append([])\r\n\ttruncLinesCol.append([])\r\n\tscore = 0\r\n\tpanPass = 0\r\n\tpanFail = 0\r\n\tfor sPanels in bPanels: # side panels in viewpoint\r\n\t\tlines[-1].append([])\r\n\t\ttruncLines[-1].append([])\r\n\t\ttruncLinesCol[-1].append([])\r\n\t\tbools[-1].append([])\r\n\t\tfor pan in sPanels: # for each panel\r\n\t\t\tp2 = Surface.PointAtParameter(pan, 0.5, 0.5)\r\n\t\t\tln = Line.ByStartPointEndPoint(p1,p2)\r\n\t\t\tlines[-1][-1].append(ln)\r\n\t\t\tbool = False\r\n\t\t\tfor b in bSort:\r\n\t\t\t\tif Geometry.DoesIntersect(b, ln):\r\n\t\t\t\t\ttp = Geometry.Intersect(b, ln)[0]\r\n\t\t\t\t\ttruncLines[-1][-1].append(Line.ByStartPointEndPoint(p1,tp))\r\n\t\t\t\t\ttruncLinesCol[-1][-1].append(0)\r\n\t\t\t\t\tbool = True\r\n\t\t\t\t\tbreak\r\n\t\t\tbools[-1][-1].append(bool)\r\n\t\t\tif bool:\r\n\t\t\t\tpanPass += 1\r\n\t\t\telse:\r\n\t\t\t\tpanFail += 1\r\n\t\t\t\ttruncLines[-1][-1].append(ln)\r\n\t\t\t\ttruncLinesCol[-1][-1].append(1)\r\n\tscore = float(panPass) / (panPass + panFail) * 100\r\n\tscores.append(score)\r\n\tpansFail.append(panFail)\r\n\tpansPass.append(panPass)\r\n\t\t\t\t\t\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = truncLines, bools, scores, pansFail, pansPass, truncLinesCol",
      "VariableInputPorts": true,
      "Id": "3366a95520344973a15ae2685916d51a",
      "Inputs": [
        {
          "Id": "d1d3376b8db74123aaa65f9f21aeabb5",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bc4ddfa7d5984ba181796730931c480a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3d254c61f9724bfdb5dace7e4a2773f2",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2112261a956844daac627699028df688",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "f76f3d94d7e8425d9a26dd6424d2c180",
      "Inputs": [
        {
          "Id": "192f9f8b35ae44e2b9abb19e2405b690",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be066a6bf51543d98d25de91cf584a20",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.Average@double[]",
      "Id": "ad2a84f2ad694c6eb00e4857e5b840f2",
      "Inputs": [
        {
          "Id": "dc8f1c2d843a4d59a064093324578f7a",
          "Name": "numbers",
          "Description": "List of numbers to be averaged.\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "17bf4b4eb64941e09a3e3a7a32a6a62b",
          "Name": "average",
          "Description": "Average of the list of numbers.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Averages a list of numbers.\n\nMath.Average (numbers: double[]): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Sphere.ByCenterPointRadius@Autodesk.DesignScript.Geometry.Point,double",
      "Id": "b15a6a89e1914386a2f33a732a813779",
      "Inputs": [
        {
          "Id": "6113220af14b4a2e98c0115f0696a1a6",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ba8f735b92484c3390d08216fb0834eb",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "42f277162b0946ea8803e2c774bebf40",
          "Name": "Sphere",
          "Description": "Sphere",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Solid Sphere cetered at the input Point, with given radius.\n\nSphere.ByCenterPointRadius (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1): Sphere"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "5;",
      "Id": "4b114e34d0c448aab8d2dd38e6d749d5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1d50d421a6f24d05a70071331849efad",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.ColorRange, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "b0353c826aea4cc5854f9db34ce097fd",
      "Inputs": [
        {
          "Id": "988161e147634f49bb79caf8eaeac3f9",
          "Name": "colors",
          "Description": "A list of colors to include in the range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "43e637a65ef54c3eb47568e84fca2672",
          "Name": "indices",
          "Description": "A list of values between 0.0 and 1.0 which position the input colors along the range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "081fefba6da44022985fccff65b073e2",
          "Name": "value",
          "Description": "A list of values between 0.0 and 1.0. These values are used to look up the color within the range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4cf92c42858146f4a947aac987ee3969",
          "Name": "color",
          "Description": "The selected colors.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get a color given a color range."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 255,
        "G": 69,
        "B": 0,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "9ba161e91a42431c8d6b28e514d17174",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9e18046337ea4b419497c9fd5a222fe6",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.ColorPalette, CoreNodeModels",
      "InputValue": {
        "R": 127,
        "G": 255,
        "B": 0,
        "A": 255
      },
      "NodeType": "ColorInputNode",
      "Id": "5d79454d7bd54f07a3626fe769bc083d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "38d634f4d2584223a8a729e9ea0c73eb",
          "Name": "Color",
          "Description": "Selected Color.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a Color from the palette"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[r,r,g];",
      "Id": "389e48ace46d47348f7e5bc2c9786e37",
      "Inputs": [
        {
          "Id": "6a4724270b9140b79d18ca86858a5ebb",
          "Name": "r",
          "Description": "r",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ede6dcdc78b34a3990c5d59532f0c3a0",
          "Name": "g",
          "Description": "g",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f75d57c4e9f04344b9496de697041064",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[0,0.75,1];",
      "Id": "04322deb87d64453b1c480796de3ed32",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9c37073615a646f0ba374acb954d739b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "2956186f01f04ec0be54eb684dc6bfac",
      "Inputs": [
        {
          "Id": "1bb510ebbf0c4a2ba3a7120e156c70c2",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aed246504f2e43bc95c39315ff2a88a4",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "18c10a8ac55547e2b9b50dcd5f52b531",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.MapTo@double,double,double,double,double",
      "Id": "253d7b9f8b3448449ed89b494be2c9da",
      "Inputs": [
        {
          "Id": "a452d9223cc94fa2969e9ea31c30c3ea",
          "Name": "rangeMin",
          "Description": "The minimum value of the input range.\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a90153b417f4ca3b5c200080ce39986",
          "Name": "rangeMax",
          "Description": "The maximum value of the input range.\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8bb9992b038a40dc91d8dc1113327684",
          "Name": "inputValue",
          "Description": "The number to be mapped.\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3eeb39e6d278433c9cff9031ae11c305",
          "Name": "targetRangeMin",
          "Description": "The minimum value of the new range.\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c34c33a4f1e45859b208ce0fe3a19a7",
          "Name": "targetRangeMax",
          "Description": "The maximum value of the new range.\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cad8d0e2c53e47deab59f3f89729a412",
          "Name": "double",
          "Description": "The mapped value.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Maps the input value to a number between targetRangeMin and targetRangeMax.\n\nMath.MapTo (rangeMin: double, rangeMax: double, inputValue: double, targetRangeMin: double, targetRangeMax: double): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;\n100;\n1;",
      "Id": "cbbf3d90cf3e4e228d110c39fd2433b3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e87e069a522a4e7d87b1a9b49d2721fa",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "43cd5b1abe6e4b79bac67cc2b36901e7",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3f651a230f0e4e72904dd335ccb4c09d",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[5];",
      "Id": "a4e943c4c2324075a39f4c3b57dcf3ec",
      "Inputs": [
        {
          "Id": "472ca881b77e4fdc8b9f0fc53a5f78fb",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f2f186f02de432da9b79173d1b12272",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[g,r];",
      "Id": "56d4a95c451240669ef483cd7ce070ff",
      "Inputs": [
        {
          "Id": "dd8978fc20ae41199c67c103765a4e6b",
          "Name": "g",
          "Description": "g",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7bd2e6b3e1504d79a7107693e4d43da3",
          "Name": "r",
          "Description": "r",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "faa23f327c6f48a79ac673b5b45396a0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "c[x];",
      "Id": "c60e8927d13d4432b977239eacccd4a1",
      "Inputs": [
        {
          "Id": "e5750db9721a465f91d557e9b5980300",
          "Name": "c",
          "Description": "c",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9ea938205eee4aa5ac824ba61959789c",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fd0f26c023e04805b0b4798033ea6092",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Modifiers.GeometryColor.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "5fec3108dc6240b696c26cf1147df20d",
      "Inputs": [
        {
          "Id": "e555f749fca843028643d9539703eb33",
          "Name": "geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "88f0f168bd06426c80a87f8684bcb9fa",
          "Name": "color",
          "Description": "Color",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6c24d5323d9541ca90ebb64aed8eb79e",
          "Name": "GeometryColor",
          "Description": "GeometryColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "GeometryColor.ByGeometryColor (geometry: Geometry, color: Color): GeometryColor"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "truncLines = x[0];\nbools = x[1];\nscores = x[2];\npansFail = x[3];\npansPass = x[4];\ntruncLinesCol = x[5];",
      "Id": "f29cf2546dc04a3d8bd941da2bf75dfc",
      "Inputs": [
        {
          "Id": "b1814a8d6279461c969ce87413952dc0",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5ab37197e4a64a0495328c0b20fe3a00",
          "Name": "",
          "Description": "truncLines",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "38baf72e2c194045aaf19ad1dd81832d",
          "Name": "",
          "Description": "bools",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1db3af769c984141b2e5ff9a228d9194",
          "Name": "",
          "Description": "scores",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16b4d9ad76df4bf9bb1540ddb2c01ae4",
          "Name": "",
          "Description": "pansFail",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a7960ed00434ec18b51f65dc76b8e36",
          "Name": "",
          "Description": "pansPass",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "396a9dc27e67401e919d0e9a25d343c9",
          "Name": "",
          "Description": "truncLinesCol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Topology.Faces",
      "Id": "c77007caa057495e9f15edee25301f30",
      "Inputs": [
        {
          "Id": "97db5c7532894890a8e5993196188e20",
          "Name": "topology",
          "Description": "Autodesk.DesignScript.Geometry.Topology",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2448bb412e84434fb328e761c30052be",
          "Name": "Face[]",
          "Description": "Face[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The Faces of the Topology\n\nTopology.Faces: Face[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Face.SurfaceGeometry",
      "Id": "54320309a08248e4a9d76ab2a8a3123a",
      "Inputs": [
        {
          "Id": "59e770a85dc440159b8f6f1be93b610d",
          "Name": "face",
          "Description": "Autodesk.DesignScript.Geometry.Face",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d29501bc803a4934b83ae7af4b0cdb40",
          "Name": "Surface",
          "Description": "Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The underlying Surface making up the Face\n\nFace.SurfaceGeometry ( ): Surface"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.NormalAtParameter@double,double",
      "Id": "53f6ede7cce34edf8da729ef475d3bee",
      "Inputs": [
        {
          "Id": "89930acc7c514cb7b05d8dff6610d7bb",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9a842634c8294a41bdec1cb5e0b7a479",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f1a0d77408a74cb480512911d6dc2c88",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c8e2cc2dbaba43888e14cb6b22622c28",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the normal Vector at specified U and V parameters.\n\nSurface.NormalAtParameter (u: double = 0, v: double = 0): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0.5;",
      "Id": "8a7446ae724943bd9176923bcaba2186",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f202474159984002ba6e13a1228957c4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "7768595597f949a899c58c6a251e54de",
      "Inputs": [
        {
          "Id": "96bb6a843af9436e868dd6eccfc5d4df",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5a3d3049e9de4a439858796bf692bfe8",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5b18959391804e16b1476e1f9aaf75b4",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a3927a38ccaf4d78a3907494cac2ebed",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[3..33..2];\nx;",
      "Id": "4c20ff08fc4a44889a50d37f944bb9c4",
      "Inputs": [
        {
          "Id": "2228662488ea440c9bc46c06c6c05aea",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a4d5ece707e946dd83a6388aecf00b08",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "29d9d461c44e468e827abe5cc4454964",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "bbcb95176ac6445db10f5f13750b5b8f",
      "Inputs": [
        {
          "Id": "aaece05a33604c3a9a59e2f0d955eea3",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e9ebfe9bd9af472bbb21d9fc22e73131",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "275d639ded39479ea65cc000b98a0713",
      "Inputs": [
        {
          "Id": "81cd23e6466a4480908922499728cbca",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ab6ae3110c484a0a822466d53215449d",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.ImportFromSAT@string",
      "Id": "43d8f670b9ba4eeb9c04e66b74b19fd5",
      "Inputs": [
        {
          "Id": "d7748cc61ac8461b996ba5db4d28c199",
          "Name": "filePath",
          "Description": "Path to the SAT file\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "59d3a38a0f4243f7881177386ca1168e",
          "Name": "Geometry[]..[]",
          "Description": "List of imported geometries",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Imports a SAT file and returns an array of imported geometries\n\nGeometry.ImportFromSAT (filePath: string): Geometry[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\mjezyk\\OneDrive - Tesla\\100_ExternalPresentations\\BiLT_NA_2019_How_To_Train_Your_Model\\SampleFiles\\03.5_StealthyRoofscapes\\resource\\1-points - Copy.sat",
      "InputValue": "..\\03.5_StealthyRoofscapes\\resource\\1-points - Copy.sat",
      "NodeType": "ExtensionNode",
      "Id": "5f31f4d87ed14448b2d41248a8d9c000",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ca14694daa8b4cc2aa9df4f140059c15",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Translate@double,double,double",
      "Id": "230c7cafa4794e259d3ab0c80801d467",
      "Inputs": [
        {
          "Id": "77b3b9bb5f5c49618df4227bbe38fe7b",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c5e8363952404597a1b02d07c205e4df",
          "Name": "xTranslation",
          "Description": "Displacement along X-axis.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ead735a0cc304d50bed250a2896ecdc3",
          "Name": "yTranslation",
          "Description": "Displacement along Y-axis.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8ed8617f2cc341d1bc0b714e25de2611",
          "Name": "zTranslation",
          "Description": "Displacement along Z-axis.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a5cc1718bdec4ab1a3a78f4b39d12f62",
          "Name": "Geometry",
          "Description": "Transformed Geometry.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Translates any given geometry by the given displacements in the x, y, and z directions defined in WCS respectively.\n\nGeometry.Translate (xTranslation: double = 0, yTranslation: double = 0, zTranslation: double = 0): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;\n-150;",
      "Id": "2c33c87fc45d41909954872efeea9bab",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "51947ab9076d41c0972fe76cd06e1247",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e9f7f09fca834114967b97233dd4fe9e",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Scale@double",
      "Id": "69b45228683f4dfab6e349c6073c6b10",
      "Inputs": [
        {
          "Id": "352bf928d2004cf38a45125731a274dd",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b9fedb246a4b44cd8291fc354960aa5c",
          "Name": "amount",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0ad73e01de064e1d8cd3fbcb0ea1cac8",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Scale uniformly around the origin\n\nGeometry.Scale (amount: double = 1): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "10;",
      "Id": "8f04a7b7a037482d9684d59a3bdc2a9d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "20d304fbefc546c9a9e0ee2dc7695a16",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "39e503ee73444e4abfe27a34655905cd",
      "Inputs": [
        {
          "Id": "119b70efe0164640b19ddfe55736911d",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "97c27130e8184870b6b2d0980b976d09",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b95d8fa868ca4baba494e31295f2ffb6",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "7d541e25f09c45b58e5111888ac5b854",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a16f5cd67df249b9917ada690975968c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "0e38d11595b548a5a7f217340b31f1fd",
      "Inputs": [
        {
          "Id": "af60e34a243e4d56a32d34b46c3030bc",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cd1b4e311d734ce8aaab0d247605ee03",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "53d592e8d0944475a7dbeaf6ec3a92a6",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "b086aac0c828447d8d53c83c8ea478ea",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ef639ce700804fb78b5e59dc3916bbc7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "eac916ca29fa4d07b55720cccb7d7a22",
      "Inputs": [
        {
          "Id": "67253b79b63544ea8726d0c0dc71bbb2",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3c3bb9a61dce40e8902ed20587f46740",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b8f4c14a851841c9baff19d12ee90da6",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    }
  ],
  "Connectors": [
    {
      "Start": "4447f502ae66471e8e007254da927e08",
      "End": "2242d362d939448cbd62a8d0b0ddd3dc",
      "Id": "61cec79137124241995658bf0e17fef3"
    },
    {
      "Start": "c9a493e780e64241a372ca5667b74c3d",
      "End": "dd8f700409d74250937bfbb338fd116d",
      "Id": "5874510c45ee463ba1621988225081ec"
    },
    {
      "Start": "a45d9ad2525840a3a242f54f0ec47196",
      "End": "7a54a17f918541d98270d3698361d65b",
      "Id": "ad2f40b480ba49ae9e1d415a94de8603"
    },
    {
      "Start": "39bac4149964453e83c6be3635b7b1e2",
      "End": "9023c983df51421b89126bedcfec5cc7",
      "Id": "96e71f9fcd024936a58f3432d989aca2"
    },
    {
      "Start": "f5384a8fd40e41168d79daee7abf5116",
      "End": "7f60642de4fe4439b06faebb72168053",
      "Id": "d7e4154058734633ba6b336d1ddce3bd"
    },
    {
      "Start": "f5384a8fd40e41168d79daee7abf5116",
      "End": "c32298c443594ef381dc45d96a818469",
      "Id": "d4f1b3e4ed6b4fcc9f11b3a80db1f50f"
    },
    {
      "Start": "f5384a8fd40e41168d79daee7abf5116",
      "End": "ae4e316923ac43b9b68e1b4854c6913c",
      "Id": "6ed7bc20ffcb45f98f6495e35c2d78eb"
    },
    {
      "Start": "362dea3a7b684c288d0c4c6fa711ad8a",
      "End": "b263310874734948bfe28ab8bfc780d8",
      "Id": "b309d79398e6428d948da0e1f17973a1"
    },
    {
      "Start": "0ffbd5c2b52541adba9091d719afbf1d",
      "End": "b1f8032dcf414b548515e8b6a0e8b93e",
      "Id": "6077acbdfcdf4c3e822d64b7d7f9b98f"
    },
    {
      "Start": "423e6c2e539c435087041082c761b82b",
      "End": "eac8feb25f8348c28365dab3690d3100",
      "Id": "e2cef7f509284c2ab8a2d6a1e686bc65"
    },
    {
      "Start": "423e6c2e539c435087041082c761b82b",
      "End": "4fddbdf6c92a44708e2cb09ae8f06142",
      "Id": "a240061311b740428e58044f55851d07"
    },
    {
      "Start": "84a05125b35c4677a54b34e4642a60d9",
      "End": "37804c584f084cab9e8cdc6c2af9a6b6",
      "Id": "a753bbc3d71d4527bc25a804a444b535"
    },
    {
      "Start": "30cf8ec78bd24a90b3ad0a19dd206ba9",
      "End": "6360632088264b19aee2139dbcf9a093",
      "Id": "8d228926e8ab43c8a8b00e4bb9e22887"
    },
    {
      "Start": "10712c43fca04de998b6c5cea39c3c5e",
      "End": "35bcef5b16a34952ac148bd48061b47e",
      "Id": "08ea33b9fc2242c1aa3412ae51c1e99e"
    },
    {
      "Start": "68ef9a504f9e428b81ff0a82c64336f6",
      "End": "82c8493bd52b422c81b8610207f218ce",
      "Id": "537069d2d66a4f358515c177a1cbcca5"
    },
    {
      "Start": "68ef9a504f9e428b81ff0a82c64336f6",
      "End": "305796dab34f4d9a8f96adbdbdb7d2b0",
      "Id": "628b658fa9874d9282e9ace42e57b508"
    },
    {
      "Start": "68ef9a504f9e428b81ff0a82c64336f6",
      "End": "d79e32fe9e7a4115912e9241b6d0ccca",
      "Id": "d45ccf15f93d4f6790a340ad210fe428"
    },
    {
      "Start": "68ef9a504f9e428b81ff0a82c64336f6",
      "End": "a53314991ba345ed822fe7707bf0bcf0",
      "Id": "dc4a3312e2bd4ca380711fc4305eedb8"
    },
    {
      "Start": "68ef9a504f9e428b81ff0a82c64336f6",
      "End": "7d209d08cb6242978b32ad514852c60c",
      "Id": "83706328782a4b52973d608d9bd05080"
    },
    {
      "Start": "00013a3cde8f4f1d8ee530534ad02ba5",
      "End": "4f591edab6a5417791b6966a0bc224c0",
      "Id": "98ff748319734a9498bf7f2bfac0df48"
    },
    {
      "Start": "d13d5777123849c4a0085acd6955efeb",
      "End": "65aba1a2aa1043d4be69c82d41d52650",
      "Id": "5dc4da8cc5604fe6a81a56e9e6c01f2d"
    },
    {
      "Start": "d13d5777123849c4a0085acd6955efeb",
      "End": "476cb9458d794589ab3d244d872041b9",
      "Id": "393222ce934d40578e5664609da600a5"
    },
    {
      "Start": "f3838c901f8d463dbe72352d54f54775",
      "End": "5599a380a81447c2a41e1e6a15296789",
      "Id": "572386e43cbe47828ec8b9410d44736e"
    },
    {
      "Start": "66bd4961b40e4271a23353876bd24d1c",
      "End": "c5867126308b4d7eaf281f63a1be37bb",
      "Id": "0d738ed2d8004b67bfe13cc18ff694cf"
    },
    {
      "Start": "66bd4961b40e4271a23353876bd24d1c",
      "End": "50fe8f919a064227b8b6810458eaab14",
      "Id": "2be5076ca13e4615b5e62cbab736a063"
    },
    {
      "Start": "926eb00fca174543a19e1bc59cdbdde8",
      "End": "ad5e953ae59a4918bd332d37ea26fd05",
      "Id": "40b013969ba74819b5206839863f7158"
    },
    {
      "Start": "926eb00fca174543a19e1bc59cdbdde8",
      "End": "7cbf646469354d8a964727310754f19f",
      "Id": "ac48f04ffe204fd1aea249d2a1e374a9"
    },
    {
      "Start": "74cab1f8ab104abb9ca4250bf1439bfb",
      "End": "4562b21577bc4b8bbd61a19f5169bbf1",
      "Id": "e94cde8808c0411292b357f3c5ce6c4a"
    },
    {
      "Start": "a16b865237554d7787debba54252ac7a",
      "End": "4d99c4beb7284021b5a00e1d3aa567de",
      "Id": "dfdf8d6686bc4e7294670185205f6e6d"
    },
    {
      "Start": "a16b865237554d7787debba54252ac7a",
      "End": "fca39408cde84c6dabc0913fccdbaebf",
      "Id": "fe1a9dd1824b42fdb92970b0d9651905"
    },
    {
      "Start": "9c6e04e87fde43ce8de2128002502b04",
      "End": "49b838a353184ecaa4b12a7004b7416e",
      "Id": "6310d2b19161458aab1f0be008244560"
    },
    {
      "Start": "9c6e04e87fde43ce8de2128002502b04",
      "End": "272a8751c45f4bec8f6b3d512cec8aa1",
      "Id": "f50f0a83cab24bcfb46522e4fbf94f68"
    },
    {
      "Start": "c8135c34c3234c12b7f1e1d82f6f944d",
      "End": "59493ac97fae438f95df05e898cf617a",
      "Id": "fb699436e45a41b786e445011a25d510"
    },
    {
      "Start": "93a45f6f1dab45068398eb085966842b",
      "End": "b4d19e54830f4d6a9b3400ef9e787006",
      "Id": "1e5ec527560443758e0cf7d39bcd45c7"
    },
    {
      "Start": "93a45f6f1dab45068398eb085966842b",
      "End": "4a888398d92b4b9bbaf4f5cf409826d4",
      "Id": "5250825e47ac4cbd894d17714ded8f0d"
    },
    {
      "Start": "1593102256f8445590fa9212065680dd",
      "End": "22b27defa4854096901518b50fdd29d8",
      "Id": "e585cf92ce104c1c978ab3f07a45fe83"
    },
    {
      "Start": "1593102256f8445590fa9212065680dd",
      "End": "4c4555ad3de14dbc95e38be1ebe4bba0",
      "Id": "c4c29069fb5448289e23ea734d422f85"
    },
    {
      "Start": "1593102256f8445590fa9212065680dd",
      "End": "84018128fc054a619c32963cd4e0b995",
      "Id": "3d81c7df4b8c46bda702128c2bbc8b85"
    },
    {
      "Start": "1593102256f8445590fa9212065680dd",
      "End": "af60e34a243e4d56a32d34b46c3030bc",
      "Id": "eaced831672646bfb7652c45a357a845"
    },
    {
      "Start": "af648b1eb03d42cbadd1ea7cfaa32842",
      "End": "7ea46922effa496d825cce7c684ee0be",
      "Id": "5ccbdd79ca16477a917d7f1c9bfb4e61"
    },
    {
      "Start": "fb814f4baeaa4d2ba3b483a4c2d7f720",
      "End": "564c6b0fbe584a45b20c82eed69ec6b8",
      "Id": "cf32f67f5f274d5e88c4fde4c1e54831"
    },
    {
      "Start": "beb068222e124a38a0e310a8fff46f94",
      "End": "26cd598a401d4615ad1d3a539e387579",
      "Id": "4d88719f445743dd818e5305c98f11da"
    },
    {
      "Start": "c1ae05289393447c8fba2d156d1228cd",
      "End": "c77ed09357314ff9ac317cb542454377",
      "Id": "d9915da21bb743b8baa232080a2fe0f8"
    },
    {
      "Start": "75e5f5bc57084c8c935aa4f1fd435ee3",
      "End": "c63d8b7ee9624f5dba080484a2f8075f",
      "Id": "8497b097f1e243ec92e96a990e787179"
    },
    {
      "Start": "9edc9c5cbef14558a5258f5ba3940122",
      "End": "214eca4990b743179e50b24a10a43758",
      "Id": "94a9a7613277457fb97e7b9f959e2531"
    },
    {
      "Start": "9edc9c5cbef14558a5258f5ba3940122",
      "End": "4063ff267cef4137b6ed52772869da71",
      "Id": "3a980ada1b274faaa7e963ec7bf09478"
    },
    {
      "Start": "9edc9c5cbef14558a5258f5ba3940122",
      "End": "d2c267a480b94e11b8471bb85c96f522",
      "Id": "b3fd234d7c704602b4902cedfa93c930"
    },
    {
      "Start": "9edc9c5cbef14558a5258f5ba3940122",
      "End": "b44ffb1a7e8c498185bfc2416416c66d",
      "Id": "1b1f6a2d8d304784a67fb4966afc43a6"
    },
    {
      "Start": "d00ce2607e4a45198e4f2573d43a58e5",
      "End": "8c066bb97e804f468e07c29e888e5740",
      "Id": "a7c17df0c1034c5281914b50fec1eaac"
    },
    {
      "Start": "670b2c4754c54bf3993fd11720b7d792",
      "End": "b653d7a0da774b04a52322e9974bc9e9",
      "Id": "0c6fc13594fb4a8fa32c53c70e8672bd"
    },
    {
      "Start": "8b68da9eaf3649b69f4e32673cc1fade",
      "End": "73f4cae623414f5194cd2118943dc78e",
      "Id": "8655cfadb8724a7697776fcf24ec0f14"
    },
    {
      "Start": "8b68da9eaf3649b69f4e32673cc1fade",
      "End": "9e7964cbdac04fa0b4dd51dd3604cc84",
      "Id": "b1ae67e65fcd4810b28bbacab2e62f25"
    },
    {
      "Start": "8b68da9eaf3649b69f4e32673cc1fade",
      "End": "d989bf9b0a354719a1b47d855fdc60a8",
      "Id": "203cf319f412413b8a2aed1abd06ead8"
    },
    {
      "Start": "16d4bd59021c44babde67df0fbc077f5",
      "End": "81f47a8067e14e17b5bef4ce68e6043b",
      "Id": "f26906a4a282406a9ecc6505e6ee2060"
    },
    {
      "Start": "15f60981f46a41a08a83be5825d00e4c",
      "End": "660d602dbcd8464792b6d74da44bbea2",
      "Id": "cecebad1f6d845dc8eeba254887c2108"
    },
    {
      "Start": "0f23181230e24e3ea316371b22f1630d",
      "End": "c60d6228a1e3467281dea435c7afad17",
      "Id": "4347e8da349e47a1b4f68077f243907c"
    },
    {
      "Start": "1b86297261894d71bb535b5c719b613d",
      "End": "0c15d2a1ecb049b295b4131737c48937",
      "Id": "96a4eaaac21f43fcbd7e175a5f43fcab"
    },
    {
      "Start": "78e879fe1ede43889f353f22b1f6d9bb",
      "End": "a198f100425d407283478ea759767b5d",
      "Id": "0cc143aa92f64a848006835baa5c982b"
    },
    {
      "Start": "78e879fe1ede43889f353f22b1f6d9bb",
      "End": "cd8ee810dfaf45bebf73b2879c137f3d",
      "Id": "9557162d418846a8ac2f48d14e7c52b7"
    },
    {
      "Start": "828d9affa9e04683a0ef83176862d3ad",
      "End": "ca5d342acdb34b2e90bb0418a0c41228",
      "Id": "243c1ba04e604fe2a4c4980ce69b44fc"
    },
    {
      "Start": "272eb8b6fb2e4f60b8f415e4334e8789",
      "End": "73d51d4cdd2f4f268671b4886b76f6a3",
      "Id": "871b1eb3a5dd464bbe921e44b3af2eff"
    },
    {
      "Start": "272eb8b6fb2e4f60b8f415e4334e8789",
      "End": "03d53116a67c41c299856b047e131ad7",
      "Id": "b1288d2529e749dda9ca558a419a924d"
    },
    {
      "Start": "bb0d8feff524429f898fdf70e0c44c61",
      "End": "43593157ede84ca8898c92f4c69153c1",
      "Id": "11c5ab48b3c142d680f5f93b99a5fdac"
    },
    {
      "Start": "bb0d8feff524429f898fdf70e0c44c61",
      "End": "2bc9a569dfe54d34a80adb2baa68df2a",
      "Id": "dfaa893401ed47b5825fd64027129e7f"
    },
    {
      "Start": "ed1c687d5d4d4a49b6a04cf33cfd6e98",
      "End": "2fe641f9e4c74e978e71967ddeff5673",
      "Id": "55e83964b98340e3a8da8f79a22542be"
    },
    {
      "Start": "4a42fb1bcc6540b9bbd61b9eb8603831",
      "End": "490740eca337452e9da9fcdbc2982cc3",
      "Id": "6ce0e49211dd4e1cb3108040f57bba61"
    },
    {
      "Start": "132d3cadf0d8426aa9f0bf6f694e5e71",
      "End": "fa6aa6d82842454693df252735f1cf13",
      "Id": "0ae80bce71724eb398c58905842e9ab7"
    },
    {
      "Start": "b388ecd7b1794b23a61e36bbaa7a68f3",
      "End": "b9470cc3f3f64836b97f9a0532cc7536",
      "Id": "d7c27ebf443b491a924258a50fdedfe7"
    },
    {
      "Start": "3cd83ecbc1b8494aadd5351c8d8eab6d",
      "End": "87ad2af0448047c590d200d41c30ca01",
      "Id": "4518e9c19f284305b4d113dc0ca254b4"
    },
    {
      "Start": "cf0558fc0d124e2f9f0515f677f457de",
      "End": "01cfb212d24643a6948380b077ad7943",
      "Id": "6fd734b8b98b432c94f7b740bb01865c"
    },
    {
      "Start": "9f053992bde5449f87d5059995afcf6c",
      "End": "d75e4e485e704802b8e268c815df24a0",
      "Id": "007fa9efcd624eb08a65ae0853388658"
    },
    {
      "Start": "a5d4b59bff46478badf8f2c08a6c8748",
      "End": "f10771c513df42a59177638860ffc58d",
      "Id": "d25d705afa10412dbb7ffd0f95e0e1cf"
    },
    {
      "Start": "1594ff2c08f849de83552a014fbd1e76",
      "End": "7095048d689848788ab997ee017ef874",
      "Id": "74642466b5a746fa8b334734c852bda8"
    },
    {
      "Start": "4f2e12a9f9e4492986f2ba3d7aa34d97",
      "End": "f09526b4486a44a2a2a1daf061b75138",
      "Id": "1d3fcefdb31e4c309f97a7437a34c85f"
    },
    {
      "Start": "840767eda9064cb2ae7dcaac26786412",
      "End": "926ff90fe9fc4fa297f493db91fa2216",
      "Id": "fabb3664b562417aa3ccdcfe8cfc14f8"
    },
    {
      "Start": "334ceebb499646b4ba4c2bd0b632a865",
      "End": "9be98f3e252c401da0aa9f27a77550ed",
      "Id": "b37904d42d274ab8adde9e3461e0ca16"
    },
    {
      "Start": "a4361c02b0a741a381c978421c533d6d",
      "End": "e73b1ee0436c41069e9f72238136f278",
      "Id": "12f633ee881d4ef48d5e76bee23b4053"
    },
    {
      "Start": "1c283558cc984b66b3a5bb93d6226d3c",
      "End": "00a0aab93155420c8c43b4d8231ab262",
      "Id": "2502cb50ab1841058b3418e630e3ffb5"
    },
    {
      "Start": "94e8d31b3b41412888833c73bbfe9443",
      "End": "0aadc3b0892b439cab78ac8f8887f2a3",
      "Id": "b09e32d8cb8445369c428d5a165f0a05"
    },
    {
      "Start": "465f26bfb18b49d6b9e44187a6a878ae",
      "End": "678bb8a64a7349de91dd12df7ad2eb99",
      "Id": "97509edd98004a1380a4414bc97f6ecc"
    },
    {
      "Start": "b29429cd128a48fda0dcce5458ee23c6",
      "End": "5a02d1b50c37445ebc60131316d4e644",
      "Id": "8bf91a732a4f4079a4e70d7d09ba2dda"
    },
    {
      "Start": "9d4062237e4944e1bdb1146d679f0333",
      "End": "c57e219866b14ca09e31e6c87f4f7062",
      "Id": "549ec292a1a04fd7839d72077a93ff00"
    },
    {
      "Start": "94eed2e195c94dc79496e09990611f21",
      "End": "c3fd488e0605419ba7edc49e8dffa7cb",
      "Id": "cd92b388bfac4b5f84bc39fe279ce73f"
    },
    {
      "Start": "387c4c392e0146dfab9c3cbd754ed509",
      "End": "bbb24e7dc5944d9e8f585701e1fbb923",
      "Id": "35362eeb41fd430e97219c093f687830"
    },
    {
      "Start": "4b9ceb1d983648258feedd674fb9bb33",
      "End": "d7768d9eaab04f2f9e5fbb9aaf0d7e35",
      "Id": "a1fba753be704b708ea868755f455d72"
    },
    {
      "Start": "c84b1469b5d34d82b1fba1e3aa8cd4a0",
      "End": "31924d3afee948e09b2f99182027e7cf",
      "Id": "db6a3c0190cc4de6b9742cc020b33fc1"
    },
    {
      "Start": "357d36a7c64c4388954584523611444c",
      "End": "082123ac0d1c4486acadd2c4099276c7",
      "Id": "93a96bfd3ee3438a86b5c4d5db63f744"
    },
    {
      "Start": "357d36a7c64c4388954584523611444c",
      "End": "9ffb740437994697b5bdb71015e96c0a",
      "Id": "d290e139523145ada08c017b46026af0"
    },
    {
      "Start": "38612683a6a2409a8a60918c0383b67f",
      "End": "8ad6e70c097d462aa08c5b9785164f91",
      "Id": "ba99af6e43ea4d60bd503744eb0b527d"
    },
    {
      "Start": "11230a3b90084aa891030aecc9cbf7aa",
      "End": "3502c5526bbf4ba7941f791410d2eeb6",
      "Id": "862be48226c94bc2858e4c4d4f11ed72"
    },
    {
      "Start": "e85c6702a92c40d58a8ec6b95c48438c",
      "End": "47139e5efac949ea9bc077db0037cd47",
      "Id": "14458baf6ed1452ca7f3419bab327ef4"
    },
    {
      "Start": "18b82be1f62c4511b7ce83a19b3f9739",
      "End": "1d244e99591d48a1861be09a8e9d4fa8",
      "Id": "fda2d5bcbd2742fcb9c114783c59f861"
    },
    {
      "Start": "2721d3486302488586620f9049130fde",
      "End": "7a6a9436e29541a79def74c67aad44d2",
      "Id": "1452488d14a44801bba56ede09359d17"
    },
    {
      "Start": "5ca38d56853e41799bd1ea73797b8541",
      "End": "4a0cb677be5e499788ee1bd4d7784fd5",
      "Id": "f58adebfbc0141278db1736d287c163c"
    },
    {
      "Start": "b89f6c7456434ac9ad96b1d11b0cbb52",
      "End": "161eb7b87c0644be9224bad42140b20c",
      "Id": "ed29b5ec20f548b28faaa1e13fd5e398"
    },
    {
      "Start": "c0cc181bb2e44301a5d2c35f018309b1",
      "End": "ece8ae647c6040b8ad28a62296befdaf",
      "Id": "a1e50696b5194be4866f62bc4425ee6d"
    },
    {
      "Start": "c0cc181bb2e44301a5d2c35f018309b1",
      "End": "8fec6df8777e4a69b92792582352aafb",
      "Id": "185260e56d6c45a0932c7e8833c5accf"
    },
    {
      "Start": "25694868be6b472ca5506928e3fc372a",
      "End": "59e57c886ba04cefad6c076392654834",
      "Id": "d574f9427dd146ea963597fb0e117324"
    },
    {
      "Start": "7253a5d44c6d4650bec6635483b3a989",
      "End": "f80f6a0a0c5c44f7998d44686a8ba1f4",
      "Id": "39afb43ebe274e68b6107e43042b18b7"
    },
    {
      "Start": "6e3b90ec740a4399bace12a677e47b43",
      "End": "dd2156ae3a524be99d2e055f354dd73b",
      "Id": "56b608ace2564c38aa4b845c8caf4342"
    },
    {
      "Start": "a9cdc28c46c94faba4890f1327e1dcbe",
      "End": "fb2eff6622f546eea725fc1bc71bf23a",
      "Id": "bca7ab4e538948df905195c96e1cab3a"
    },
    {
      "Start": "2b4cb57741c548f4b136b7ef5a57ff43",
      "End": "3cf0435aebab41be9e8beeccbb20310e",
      "Id": "d191994c022b4bde8c7a442343ce4340"
    },
    {
      "Start": "acdcaf64ec1642ca8070f53128d1a371",
      "End": "496dd1654b244ed789fc1666c5cfe9b1",
      "Id": "196891fce1de4187876046d6de9b7621"
    },
    {
      "Start": "acdcaf64ec1642ca8070f53128d1a371",
      "End": "a5d7f7886c854d46a525181501e763e5",
      "Id": "cfa931fd853b44b999d295ce7db683d9"
    },
    {
      "Start": "05dc3076a7624658b79378787e09c441",
      "End": "a675e3c3e02348769b58e78412dc753a",
      "Id": "1cf136aea31946c08e5d7b5439917334"
    },
    {
      "Start": "05dc3076a7624658b79378787e09c441",
      "End": "d7c3c02e39ca4dcb9466f4e25730237c",
      "Id": "51a8bace025746c8a95d447adf392acd"
    },
    {
      "Start": "2450cd670cc9426bbbc89b1693658f2a",
      "End": "4dbd0f324dd541bba903699e3fe4f6a8",
      "Id": "0a5b8ebefca54923a604d1b38c35d057"
    },
    {
      "Start": "2450cd670cc9426bbbc89b1693658f2a",
      "End": "d2fc064100a345ed98f79bb12eb38009",
      "Id": "af6a502615ed439bb2a1ff01b57dfc25"
    },
    {
      "Start": "e3b626caf08f432a8d40fbe0ff7d4b6f",
      "End": "124e0593e2b1415c98c86fad33b21b05",
      "Id": "4f9609d01d784fa38fddc7837781f5fd"
    },
    {
      "Start": "78a35f81e86d4c4fa5e033f82a8179a9",
      "End": "4eef78ce825348308f7c9213c8768692",
      "Id": "741dfabd5e1a4b41a2209b189bfc04bf"
    },
    {
      "Start": "78a35f81e86d4c4fa5e033f82a8179a9",
      "End": "ebfe4dd302a24ddc9c5f3cbffc6b33a1",
      "Id": "0788ede3a74c411c86357d20a5255709"
    },
    {
      "Start": "78a35f81e86d4c4fa5e033f82a8179a9",
      "End": "77ac3397be474d7ab9b19f6500c1bbfc",
      "Id": "178ccf0686ab4b92af69eec9a638abeb"
    },
    {
      "Start": "78a35f81e86d4c4fa5e033f82a8179a9",
      "End": "5875352ff54643a580f4226de9d275ef",
      "Id": "51aeeeb2c27a4112b3185ccb8e8eabe5"
    },
    {
      "Start": "7f23cfcc92344217b428aeda2acde013",
      "End": "0a53b3a6bad945fbb61bbd80b3fca62b",
      "Id": "98e8a92ad0cb413f901bab908a0ce2c3"
    },
    {
      "Start": "7f23cfcc92344217b428aeda2acde013",
      "End": "60911bbd15f3429a9e1797f46a5372b9",
      "Id": "df4c9683f4e3455490a8971b2a2849ed"
    },
    {
      "Start": "6bfaf0fa99de460ea2d0be4d63faa465",
      "End": "104de5004f3f49d18f50cf971f7dfd39",
      "Id": "7b6743feff61443fa776a7b0635e5210"
    },
    {
      "Start": "6bfaf0fa99de460ea2d0be4d63faa465",
      "End": "6bc046a1e482484198cc6e391d989800",
      "Id": "3b572c57eb154081a0da0b949b56441f"
    },
    {
      "Start": "13ebddfd435443d38b6415c0d9e76c71",
      "End": "b4d6f4be231d4c69aad00bad8b549531",
      "Id": "ca9e2a84e39f45e09e481de89f7b7e7b"
    },
    {
      "Start": "13ebddfd435443d38b6415c0d9e76c71",
      "End": "eecce6d0127e48fb90f6ac5b7ba0e2b5",
      "Id": "57b0dde4b8d44a5897f0b9786ac7f4b1"
    },
    {
      "Start": "024047c177234e9da0b882ede7c5f1db",
      "End": "0e14969f21c5472e86cbf59c60acbaad",
      "Id": "e75342aee4dd43c5a2a851175938e401"
    },
    {
      "Start": "e70330a672334958bb3758c3c6ead5b2",
      "End": "efb671ffed054abea90db5cad1c92f85",
      "Id": "a91685facd074d518d3c4ed907d5e66e"
    },
    {
      "Start": "e70330a672334958bb3758c3c6ead5b2",
      "End": "5f1df1426d434c28aadaaeecfdee19ae",
      "Id": "328e0770ba38453c9bf98c12fdfa19d2"
    },
    {
      "Start": "98eb831a927042009f8db1b5341d7d98",
      "End": "522f8452ff794b3eb27c40e2c1bdc9ad",
      "Id": "c2addc32550e4bd9a6228bd540644aa7"
    },
    {
      "Start": "98eb831a927042009f8db1b5341d7d98",
      "End": "7d6b410a8c4b4f0d9d7f2a380e539a24",
      "Id": "08212109fe73487d89ca47afc5b59cf9"
    },
    {
      "Start": "f40625b6c4dc4252ab6ae8c522e65133",
      "End": "1221f50801ab4af78a44baaf9447f0dd",
      "Id": "511e9a011c2a4996a8abdaeb41e725e3"
    },
    {
      "Start": "f40625b6c4dc4252ab6ae8c522e65133",
      "End": "1dfa796f52144088a5b6875acab1f7e6",
      "Id": "e197d75822a1472699544f1d4db42a97"
    },
    {
      "Start": "f40625b6c4dc4252ab6ae8c522e65133",
      "End": "c753a0d896924a6db352a032f55306ce",
      "Id": "b70aa23c74544485a5e970ccb62180de"
    },
    {
      "Start": "f40625b6c4dc4252ab6ae8c522e65133",
      "End": "6b755b53fcca4465b2616346483fd294",
      "Id": "7ab9960251f54a57bdb63b89d1ce02b4"
    },
    {
      "Start": "f40625b6c4dc4252ab6ae8c522e65133",
      "End": "aa9c9072e4e743378ceb1410f03cd875",
      "Id": "3ad3922d935549fdbd19443b28a464d4"
    },
    {
      "Start": "aff27b227a7b48c19830fb2661d326df",
      "End": "6bb23af38df14bbc9a8f5f96caa9d01e",
      "Id": "015fdd80471f446f87689d475356a531"
    },
    {
      "Start": "83cc58422786415fb1739a5385cc303a",
      "End": "459fc43680a84d0795fa7b1b70781112",
      "Id": "144aa3536e9a42ce995392c8cd49511a"
    },
    {
      "Start": "83cc58422786415fb1739a5385cc303a",
      "End": "6cf1ec3bb8134bc9a364388d1033cafa",
      "Id": "e684d81b27f04dfc878adcde33e900b7"
    },
    {
      "Start": "6080626f98e345ef8294aefe508f7049",
      "End": "a16b690d67a04fbaaa2bcf35f537b9de",
      "Id": "e2a3579a7c5d489b9cd725a77c95f896"
    },
    {
      "Start": "aa62ea3b68304c86ba9ef01e1b37c09f",
      "End": "9c978ddcbe0f4b5491b3516e1c631e34",
      "Id": "68204c0861b247cb9f705e9d3f51fcee"
    },
    {
      "Start": "eec95316090247cc97feb1675a326ed1",
      "End": "dc839e26c5104f8abde13d316c5c1e47",
      "Id": "e705dd5a815e4b819f0a6261d85606bb"
    },
    {
      "Start": "98810e6b12934c12863ad5642ab61f9c",
      "End": "f760c86a89ff48feb47d12c89929b9f2",
      "Id": "716feaaa6ae84989853597f479a27077"
    },
    {
      "Start": "9aedf3058b1e462d83d73db3997c406a",
      "End": "f5522247b1184cc2960b93c005498bab",
      "Id": "6173cc067ed04400bc3ccff24b4466b7"
    },
    {
      "Start": "b9860f6844c2488da3d2ff3e4db68152",
      "End": "842aecab54a94e77b19b86c276869ca7",
      "Id": "35e4184dbf944e8796049c2479872d88"
    },
    {
      "Start": "be8156b144ea4dcfbf79831511f189b4",
      "End": "4e9bca098f6c48ef9882ff8902f37993",
      "Id": "46bae49c064a4ff5bc63c18e6135c3e8"
    },
    {
      "Start": "be8156b144ea4dcfbf79831511f189b4",
      "End": "a6973f7836564119bc702a903c71ec33",
      "Id": "072a2f8e7d164ff58b3b87aee36884f8"
    },
    {
      "Start": "be8156b144ea4dcfbf79831511f189b4",
      "End": "87d9e6e71a6846c28d6e8f35f664d8f9",
      "Id": "1c8f8e773ac7440bbb0a0c118fb82b34"
    },
    {
      "Start": "46f854c7d417496b90ba4d5060b2ee0e",
      "End": "a41ec36a58914c06911c1dec8915b97e",
      "Id": "9c5c9e91c41b481d8c9af23d9c2d45d6"
    },
    {
      "Start": "46f854c7d417496b90ba4d5060b2ee0e",
      "End": "8d53be6b3f55484f9eee2640b8df5dff",
      "Id": "ac42486f44b8498ebd6a9957ca1bf757"
    },
    {
      "Start": "46f854c7d417496b90ba4d5060b2ee0e",
      "End": "15f5fedc2be24c38b6c09f113db4f3ce",
      "Id": "39a811b3384e4af8ba66304aeceb954e"
    },
    {
      "Start": "afbfc327500a4d1296602f1a64e6c9cd",
      "End": "0e2d1d26519f4484bf7ab3f4b8c27363",
      "Id": "38555430535241dd99fbeb21f2e3b183"
    },
    {
      "Start": "fcd3402ac11c4a708e26343f864956d2",
      "End": "e693f42308094c8aa3395f93af3fbc6a",
      "Id": "9929eb54d99e41ec87e12bcaa6d88ecc"
    },
    {
      "Start": "dd5835a0290b42d6a23c38170fb29c22",
      "End": "4ebe7b1b765a4c09a7e5b8501e993654",
      "Id": "65f44cb916434bffb2c55880a77acb80"
    },
    {
      "Start": "38832914013b484cbb83a69f33ab3ca6",
      "End": "69ccb9be2fde4d69bc1ac41313974336",
      "Id": "e40dd5a63c4c4e58824d86e4bf68ebe8"
    },
    {
      "Start": "6de7dae399cf45fdb42a7597a633bdc5",
      "End": "18bc0d80635542e188ec023837613e56",
      "Id": "5d704dcd85164d3d979e0f08bfd21247"
    },
    {
      "Start": "b9d26b7ddad14f878e4bb75d7324bd27",
      "End": "015da0988b59481c8fa55f1a2b5a9cff",
      "Id": "e3981e86c2ed4c64a00672c494daf4bb"
    },
    {
      "Start": "456c5212e3a646e482c682562cce491c",
      "End": "e189d73b80434e0e8d225dd40b67590b",
      "Id": "585675c8a8194078b4773c48753d04bf"
    },
    {
      "Start": "4547cab306e1412a8053889f73914597",
      "End": "f58823f27d534baa94d894f201f5013e",
      "Id": "bed5f513ad314e18a4914787f9dfa0dc"
    },
    {
      "Start": "85b8bbb6f7994151bf44c7f5df76c229",
      "End": "8a3db03187f948dcaa51b31e300b4b29",
      "Id": "39a49cad10214f44ac0a1fe034e60c2b"
    },
    {
      "Start": "32f62348879f46b1a8de97ed4c9abacf",
      "End": "9bc5ab7d527245d4892ff4b29ee35622",
      "Id": "1ab02b19b1814e3285a4ba2ec6eea84c"
    },
    {
      "Start": "98d46ee858ee40efbdcf3e4ea8bd05d3",
      "End": "97b0bd1d43cc4548867ce64df5e28678",
      "Id": "2a69960fde7d41e1964f806c479962d8"
    },
    {
      "Start": "158cb92b30e34b208b4486ff0262bbf7",
      "End": "3c7100fbe5474ce4aa2f1649138dfecb",
      "Id": "dda98fff499247afbc926ec0a905f5fb"
    },
    {
      "Start": "158cb92b30e34b208b4486ff0262bbf7",
      "End": "62dc4b181d8d4e239729ce4db8ddf7c9",
      "Id": "9200cb47172b4a28bbc0690303e5589f"
    },
    {
      "Start": "158cb92b30e34b208b4486ff0262bbf7",
      "End": "365cf749ab3540dfa1866764dbbcb27c",
      "Id": "c560d233faaa448e83ef3bdb8f8395b2"
    },
    {
      "Start": "548d1cddc75c49fb9803cbb4ccf4b3a1",
      "End": "05509ec02eba42c8a83374c68c78facf",
      "Id": "95df5f9883c749438c23db0cda3f835e"
    },
    {
      "Start": "8eb3d545a5214f2cbc68f7381da33447",
      "End": "c6198421e617412bbbb014a09640e73e",
      "Id": "06e4a2cdb60040deb19745e8ec9ed760"
    },
    {
      "Start": "2a8ce80be6e04ff8acfb2cda7291438c",
      "End": "f8d2e0499d6448d886cb1aab92d1e9fa",
      "Id": "b5d8afb70c0a4bb0a48ab29f24f80697"
    },
    {
      "Start": "6710a5feffea4a32a2bc8c70c0c05c82",
      "End": "169b3eceb27247869ae6eb8fb5468a46",
      "Id": "f7c92cd4b6d540dfa84a31537af8915f"
    },
    {
      "Start": "4736676db0d2421db8787d0252f0d3a9",
      "End": "d5b41cf83ed54e30ba313703abbdd85b",
      "Id": "4a57cabfeafe4a728ab88a06c354492c"
    },
    {
      "Start": "3351656dbbd040f6bab7dcdb9c33c679",
      "End": "7a72c2ac8e30423d8d9af1d40b82dda0",
      "Id": "b2d1ef1fd95e4dd896702a03bc292afc"
    },
    {
      "Start": "b59c82a322de4d23886306c4985db027",
      "End": "b080ecefab05470c9f39debd4338a949",
      "Id": "c6297c8329e845d28e5fbd20f094de12"
    },
    {
      "Start": "b59c82a322de4d23886306c4985db027",
      "End": "0571c73e5e1c4b8dab620a62c6f1ad8c",
      "Id": "0965f633102d49dca2ad2ab522c203cc"
    },
    {
      "Start": "fde1773db1b346588b20c30043434f5f",
      "End": "2e2af076efde425f81a1729665e19194",
      "Id": "1eef1bdf5f7c40f6903feebca0c17bed"
    },
    {
      "Start": "4f2e0a1125264e629ac5994beec5de3c",
      "End": "11840eb934774b67a9dadbe33cda4e6d",
      "Id": "7e4b592e89f84eb99511e7b49ab96bf9"
    },
    {
      "Start": "bf0ce21333b443768cf7529387864327",
      "End": "3f66c252697a49419a125886bf647cb1",
      "Id": "a4df0e83546c4ed9a3326e45dd149fb1"
    },
    {
      "Start": "67f73c1600af481198cf432c3cce4595",
      "End": "72bc9c783aa54254b6a7a5ba78d5afc6",
      "Id": "582b5f1a423a4af9b25105e957163581"
    },
    {
      "Start": "eec6a6502c3a406686aa324d2da45aeb",
      "End": "a2ab2eb8b1f8457fa69480cc016e4779",
      "Id": "fcf27d57e7a143b8ad9ccba8901f53fc"
    },
    {
      "Start": "d4abe8c388ea41fd82c3dfb6962d4633",
      "End": "65f5e74a3a974215b0c169419a9d1ef2",
      "Id": "dbd3772472c14e4c9a7c33b959336ba9"
    },
    {
      "Start": "58dbc2d076c04901ac00956619cf798c",
      "End": "e5641f846bbc4ec8aec1303348507242",
      "Id": "93703e4b7e8e42dd90a8f6a820c64d3f"
    },
    {
      "Start": "9aaf66308e4644bca84bc470d12015c4",
      "End": "90362a5f29dd4df4bd98720fcf7d37c7",
      "Id": "39b0a28b8098473ab58070f5d555c129"
    },
    {
      "Start": "0562daf54e584888a327f64491694c75",
      "End": "fbb8c7e7de8043afb5d7c1353689e85a",
      "Id": "fdb7852bb8114164b211ec380899d8e1"
    },
    {
      "Start": "696122c5f5414e329e26907aebcac572",
      "End": "49e55997b2544acf84b7116b63373cc2",
      "Id": "107295b0ad274b4a91e8dcf7a2928d51"
    },
    {
      "Start": "e16f0317d85e42bd8e47c75bd8f4914e",
      "End": "267593ce67d74cb7b9ff6fed77551585",
      "Id": "17dbb06bc3c84f1893f39a863ccbd511"
    },
    {
      "Start": "e00edef3663846cebfd591b3b6219a55",
      "End": "30b8e39ee6894776b52eaf8172646fb2",
      "Id": "9e324af092b24232bb0b02e3fdb0c7b3"
    },
    {
      "Start": "56c4eafac010474282bb830a641e4192",
      "End": "8e66b2711c744610886de99d33052f89",
      "Id": "5441ff91b002461d9f423feb06ba23d0"
    },
    {
      "Start": "96953f1087254831b8494553191d3bc0",
      "End": "e22ad8e75a1f43d69a70807aa08ff5e8",
      "Id": "a2e5c1d49e714134a6853f0051b4bff0"
    },
    {
      "Start": "fb3ce9f817834c069a4662f7afef1fb3",
      "End": "3f023e48c36842f2810099f492e553a3",
      "Id": "19b025ec9dec4c1893f972601ca14459"
    },
    {
      "Start": "2240339328d04264bac7653dbd1bdc93",
      "End": "2e40e87999924f6abce636ae451c9a15",
      "Id": "af1838dc823f48cda5d7830d4ec20fde"
    },
    {
      "Start": "103a7dee18114a57b0278ac5129ce082",
      "End": "3f401ecf76e84209bf732bacc14bc332",
      "Id": "e88651d96b71441aa8c880ceada7385a"
    },
    {
      "Start": "103a7dee18114a57b0278ac5129ce082",
      "End": "c78f8044fb7347aeaec693653817f2f8",
      "Id": "a153fbc492044e7aafa5442712d68460"
    },
    {
      "Start": "e6ceed3ff3dc4c0dbf1ca067ca92cab2",
      "End": "73d20249d86f43a897fa0b0f2a9ef001",
      "Id": "57b872cf7a20418fa69d907a203a92f6"
    },
    {
      "Start": "f10aa629f65d49b2b6aeba3c2de437ad",
      "End": "4b13239878f14cc880603e1f829829ce",
      "Id": "5dee5227c5eb486c9d6b4003302ea004"
    },
    {
      "Start": "380af45b78544b2497bc76e7ea2fed74",
      "End": "1e636a22defe4423b7eb4a52a04116c5",
      "Id": "47035157305f45ffb29f4c1c89315a46"
    },
    {
      "Start": "072a62e592ae474db57fa69a3c41dc23",
      "End": "ee5a8c775c274f278166901468b57627",
      "Id": "83e1eb72465f4074a2293300d2aaa59a"
    },
    {
      "Start": "52e83fbf1a294e3a9f7a9fef9ca41b15",
      "End": "87762472af1646d4bada8b70557623b8",
      "Id": "fdf9c52a9a294bf08a569ab38caa578b"
    },
    {
      "Start": "52e83fbf1a294e3a9f7a9fef9ca41b15",
      "End": "8b18c0b756ff4f778dd8d7925007d04b",
      "Id": "3ff6180bf1ed4c5b812aecc014be4b8d"
    },
    {
      "Start": "9ea66a09cb2a4e06b4b4d5036e1e0c57",
      "End": "e4187ecd31354318b999eb74489d95e0",
      "Id": "cf8093053f6a419782d7332bb43d1d3f"
    },
    {
      "Start": "1f92383d21c74deab1d8c9c5ed9aab0c",
      "End": "8a4890df5d4544df887471a7c4f7216a",
      "Id": "a1c2410e32f743728c28af5999e1f258"
    },
    {
      "Start": "1f92383d21c74deab1d8c9c5ed9aab0c",
      "End": "89d2356932c54411bc73bbab63516900",
      "Id": "a7a32f18e32740cb9e1fdcfb99236fe1"
    },
    {
      "Start": "87f93e0e878a4d578fb220d8fcd1d72c",
      "End": "da250ef77c9f4499b796f3d7ccdb8b11",
      "Id": "4bddc344b33a4248adaa3562256072a1"
    },
    {
      "Start": "21bff435aec14bd0bbc9e299d537206c",
      "End": "b6290123c06249318f24a7642b57a5ad",
      "Id": "4b9a85ed0d3243e8acc53619ebab877e"
    },
    {
      "Start": "63ddfe60f27743b4909a76e2803e5faa",
      "End": "fd12b79320be410195f40a47e917e66d",
      "Id": "7c02c06508de467aa5ba771ce656b865"
    },
    {
      "Start": "403c3a5521f4420ab4a192ddeb5471e9",
      "End": "383db9bed05140bda6af0f94d69189d8",
      "Id": "45fb937fefd6433f95d00c44b643ca91"
    },
    {
      "Start": "47b11a49b3ca4c77aecfb08da5b6270c",
      "End": "97e967c94a5343f28fe664a0f0335584",
      "Id": "7b0b07f2c91b4902b7c5c70740c746b8"
    },
    {
      "Start": "8696ed829e0e4a1eb472082059b87a9a",
      "End": "a6c5a89270b2453a94330da1bb316772",
      "Id": "12d7fa306c3944f19d463a9d185b3369"
    },
    {
      "Start": "21db4c2532e641c0b132f827ac0970e5",
      "End": "569eabb2c4ff4816a3458371c5b6449f",
      "Id": "dadffe1500ee4d8580a910eb7bfd6cc3"
    },
    {
      "Start": "c1e97c7bb3cc4933ad1704141e4f4c9c",
      "End": "083460b545ef450aaace418a6a45b0a1",
      "Id": "e3e7f5b42d344ab3998570b93a16ef36"
    },
    {
      "Start": "c1e97c7bb3cc4933ad1704141e4f4c9c",
      "End": "b1c8585434964f5f93b960224fe45e12",
      "Id": "d36c04520a8d4e10a657e0b68680b540"
    },
    {
      "Start": "c1e97c7bb3cc4933ad1704141e4f4c9c",
      "End": "cf4ee8e2b57947cb93ea3d3ba94be675",
      "Id": "85af468df7c14828a4e9020075a9fe7a"
    },
    {
      "Start": "398e905377c24ff59f1d7b9cb0745946",
      "End": "aae866d327fb41cb83e9636bb58b1dc1",
      "Id": "e5c30dfcd2a548d7870a54a7ba4dccc4"
    },
    {
      "Start": "d086f59371394d2eaf983ff55edad3e2",
      "End": "ccf029f58a0a45269a4443d01176c446",
      "Id": "43796063f0c845fba5f1a7f59f91f5c3"
    },
    {
      "Start": "e43ee92c6fb243fc812c54856be436c1",
      "End": "1b46e975e53f4d7f90fdf1b66034f117",
      "Id": "98f4b0eb58c8471ab3e2f6caff812fc7"
    },
    {
      "Start": "38e3e02e65c84b61bf8c6387cd3faef4",
      "End": "349472162e584c9ab937e64abce4e00c",
      "Id": "800df0635a8e444a976c19ae7542358d"
    },
    {
      "Start": "a2dd0031aa104b0e901c7560bc08526c",
      "End": "8813cf26d98145818025f5b32490759b",
      "Id": "bde7a3c99e0b40aebf0c7df6b4138fec"
    },
    {
      "Start": "a2dd0031aa104b0e901c7560bc08526c",
      "End": "bc2a7114705143ceabb4e354cb9d2e06",
      "Id": "d66a2bf6556b4587b599b45fa42ba1d7"
    },
    {
      "Start": "a2dd0031aa104b0e901c7560bc08526c",
      "End": "c3dbb7144fd940f09c3b8372a5e3ffb0",
      "Id": "eccfab3bdd29463281fc344d12572a6d"
    },
    {
      "Start": "48ea084cb85547ea8e9e882e1c737cc6",
      "End": "acae0ef2290c4a2da7c7d82e435f24cb",
      "Id": "3fd72758dabe42c08f5ce9d2b57a051f"
    },
    {
      "Start": "e2c61a8a959448ab97e764e642ece026",
      "End": "dcc5b36958f84cf6874a52db08e9dbaa",
      "Id": "751ac952cb214223b8771d86652275e6"
    },
    {
      "Start": "ddc7f190faea4b4e99bad336c4e50c23",
      "End": "256250b61332416baa8cd892b2ebbd78",
      "Id": "d5003242328c4e8c867e75486cb8fed5"
    },
    {
      "Start": "8c2bb0e34de549f9bd9e5f359dda671e",
      "End": "15e98f0691eb45d88fa0057517cd617b",
      "Id": "44b31e5ec33940f7a92ee7bd7a3f8058"
    },
    {
      "Start": "bae4dfe687d942a7aa56daa961aaa9ca",
      "End": "36bda33f4bd94fc1989939b0926aa92d",
      "Id": "a0b78b7ae5464556a35fc2f711818a54"
    },
    {
      "Start": "bae4dfe687d942a7aa56daa961aaa9ca",
      "End": "8f3c78f0c5494b229be3f6133d177928",
      "Id": "53b0e4fde9f349e8ad50213e30666f69"
    },
    {
      "Start": "383b804147244ee4b52647f130c4f948",
      "End": "e741079354c040f0a464d5e0a2462fb7",
      "Id": "15308e8d786c4040bb7a860d9ab6fae3"
    },
    {
      "Start": "d88eb279256949d9a50f64e72bf36a1c",
      "End": "365d11db8d93406d9cd7f9c8f6f1dafd",
      "Id": "a8cc8984cee14e0e8cc4870039acbf59"
    },
    {
      "Start": "270cac9c874848c1aa627044853ef321",
      "End": "2b9010033533498e900f87c38ef0cf39",
      "Id": "935fe7b61e5a430b94983e9368cdfa24"
    },
    {
      "Start": "2f85511bb205458eb0485b20610f5b9b",
      "End": "853ee244ae4f40f6af2a3ecec2330a42",
      "Id": "5d503a8853c64e6e82f21fea125503ad"
    },
    {
      "Start": "5fd8c3081b4c4df2b11d6e5fb168c5ab",
      "End": "8f26c11ec866499a835456682b82f2e7",
      "Id": "f2d9dc33a0cd499481a8c30a76d470fc"
    },
    {
      "Start": "b2b0b173491f4e48b32569e2d8237f6a",
      "End": "16134557470b44f882de3b3d48e5809b",
      "Id": "321a8c2f2ac54dc9a22c3c5323a8094f"
    },
    {
      "Start": "b2b0b173491f4e48b32569e2d8237f6a",
      "End": "c14e345f7cb6412e8b527a2ea6cf02e7",
      "Id": "0da24de087ce446b8d9b22509c125d33"
    },
    {
      "Start": "ac99553d5b3d4e558b2613df7de2b8ba",
      "End": "d7c96caf2de142cb843ec95727482090",
      "Id": "fa9ed156c971497e97e6cfd83a4e6284"
    },
    {
      "Start": "f65d778b89004a908eab98b08690ad28",
      "End": "954d8d7cc198463b985688a14b9ecf32",
      "Id": "7d1afe436b984f9a9c5d5b3805f53fb7"
    },
    {
      "Start": "fd853bb99b7649708e138e3cdbffe8b8",
      "End": "5d9dbcfd1a064b578ee5a49ae49e4306",
      "Id": "83d4e44434f5484eb600569155c0d301"
    },
    {
      "Start": "761dc5faea694d8e8cfa8ed5bd0973bf",
      "End": "67e0f680a02b43299b783e9ace34b6e6",
      "Id": "3afb06722fd4497c9416cd46ce798177"
    },
    {
      "Start": "a536484c80b04550829aa07baecb056b",
      "End": "968621f3cb904f6ea47659543e893bef",
      "Id": "087a520f00c447e8a810b5832b84bc48"
    },
    {
      "Start": "50cab9e4a4e1432c8413d4f1a14cec69",
      "End": "1bb160e30b944ffaabb98d0237d70e24",
      "Id": "410ed474eafb4c469cff27c97cceb851"
    },
    {
      "Start": "ae2843a72d42499796316d5870851980",
      "End": "2f079d98379143e0894e9bdcabd5b4eb",
      "Id": "86af921f63b546a189dc45c159541c67"
    },
    {
      "Start": "e1067ed00cae4b8cbafd5dcadfa7bdbc",
      "End": "d202d0bee50d4c40939a72e6c5b61f6a",
      "Id": "932fa84a75374d77a0f69c02c01df93f"
    },
    {
      "Start": "e90a5a1a722c43068489e13f57bae66f",
      "End": "e03144a2f3ee48dbac0747ce97d68dd1",
      "Id": "3781babe7ce84102ad2d74156bdc47fc"
    },
    {
      "Start": "672d993438844c83b1578518dbdd0a5e",
      "End": "b48dc067fe9b42ec81433fcd544c1d3d",
      "Id": "5f23b201ecec4cf5b527943bfc80f35b"
    },
    {
      "Start": "4cf45f84276f4c37a993cda092203ff7",
      "End": "6c45053330b549c6a03f22cd73d49772",
      "Id": "eba83fa233094aa2925d50228519b832"
    },
    {
      "Start": "2fee110675f149f28f08e2afbf7d1d47",
      "End": "a965b6ddb52f4096acfe7f3e7bc1d9c0",
      "Id": "9d1d6573df8e46efafc88f5b9e3edc9b"
    },
    {
      "Start": "783219e88f854cd3b543f71cd5d21e16",
      "End": "7c0b896b81144298857a5ffea4a0a1b6",
      "Id": "d9609f2d40894e1997e41ef1632a02f8"
    },
    {
      "Start": "4ea07304569c4ec1a841785f85198159",
      "End": "83c31a7c476a466aa2a9427494de3820",
      "Id": "2691a4f47ad84cb68bdb01e2cf1507ed"
    },
    {
      "Start": "1c200880ed5d49cb8b6977aafb5f5cff",
      "End": "2a90223dea4245638dc83eb1670ab23a",
      "Id": "1fa25246cb3543ec8b03fbab0d4afbd2"
    },
    {
      "Start": "b66d84996b984a1a90f9db7b53f4858c",
      "End": "b8129f60659c49b9b0a7b0da4c6c0185",
      "Id": "4c8dd9c4afc7455da66612eccbfaf051"
    },
    {
      "Start": "a44f76d87b8c4f11a53f16ac24df0725",
      "End": "9b561bf838f24af68b70aecc4eeb8185",
      "Id": "eb1cf2f859a74ecda466de9af305d7ce"
    },
    {
      "Start": "5ea91a3ff03a4396bea81ef46557b742",
      "End": "ea877de7919d4c98b991b4d2a1d8fe3a",
      "Id": "cae9a80b2c6042a3af7fe70a00a4f9e2"
    },
    {
      "Start": "086dcf3b77624e4b83a2bbcf6a0819eb",
      "End": "f1708b07bd4449ec9b2fdc9079774b4a",
      "Id": "0d2ae9d995454382ac2f3ba10dd530f6"
    },
    {
      "Start": "086dcf3b77624e4b83a2bbcf6a0819eb",
      "End": "77c95318dcab407990d2fc57e0f2f34f",
      "Id": "cac62a856cb24f9880a2c71497a1760e"
    },
    {
      "Start": "4695188adab84ff2ad029d441addd702",
      "End": "d244ed0aadce4f19be393a18a133fe62",
      "Id": "0288d9f7e4be4660af34c6d3d17e2c3e"
    },
    {
      "Start": "0dab0d47d5e74057914cb09e0892383a",
      "End": "472f5734435047209979c9a571867b73",
      "Id": "efeaff4621e8417786c1992e61e3ae81"
    },
    {
      "Start": "9c9a3499c67642819f1f533047b30c91",
      "End": "d5926d5f915a47a6933a845513637b7c",
      "Id": "9f141263dbb94982ab36b78c21cd59c8"
    },
    {
      "Start": "685c727aa73f4f59a4c518e0f282a6f5",
      "End": "82d07e8fcf004b0881cb9aaf680f4e97",
      "Id": "54b18b698d3841cbb497dd9d34fccef4"
    },
    {
      "Start": "c1e4c1ad52d04b3e99681ee4fbf81c02",
      "End": "ed3b7f964cc94d6889da374532dca901",
      "Id": "23e6b1321a9a4bab80d5d9493506430e"
    },
    {
      "Start": "c468651dafc04072b35082d9791ec149",
      "End": "aaece05a33604c3a9a59e2f0d955eea3",
      "Id": "0d43cd6c23e14ecdbc6f9650807238a2"
    },
    {
      "Start": "b7f49092ef6c413aab0a522dae366546",
      "End": "172b82c430fd42cb9238e057957cd3f4",
      "Id": "b8b37480cbc140e38d175b2f1839fa16"
    },
    {
      "Start": "b7f49092ef6c413aab0a522dae366546",
      "End": "1d04e04c13db47979e09e246f52a93b4",
      "Id": "16984a08492341ba956edc7bd4ca78d8"
    },
    {
      "Start": "c5e7718a880b42179659686d08cf0dce",
      "End": "c233a2afd3db448598a36dc0c1479f20",
      "Id": "7ce3125a104a4f878adf405f4f01a649"
    },
    {
      "Start": "20193c5ee70c4ab281c24d510d3d51f2",
      "End": "dd3e9306f39c4a488dc77bf00f6ea394",
      "Id": "cb75bf23b3ba46be919dc6864bcb417c"
    },
    {
      "Start": "de5fe901811d48c3bec576218e623046",
      "End": "feb4b74d48c640ecbc281cc6a9320040",
      "Id": "e9974db89a8445d4a92169da42799c5f"
    },
    {
      "Start": "2956a4e1595b499b81bfa69152537d0f",
      "End": "e915adaf5aaa4bba8348d58415406a91",
      "Id": "5b0d0722ffa44b29bc0f034ae7d3f315"
    },
    {
      "Start": "83d3f7d2f4174880b63921c94f225aed",
      "End": "edeb08e0c7ed4daf801ef0ca6110a6e1",
      "Id": "9c5bc116b5ea44b9b7d81aca0afac69f"
    },
    {
      "Start": "83d3f7d2f4174880b63921c94f225aed",
      "End": "cc6eb3ff98aa4b96a68e401654ce967a",
      "Id": "3222014c1b054b19a403dd05d3adc4e0"
    },
    {
      "Start": "83d3f7d2f4174880b63921c94f225aed",
      "End": "1087e68288e34f1680372d92c895bfc1",
      "Id": "e5fffe0743ed43fb8427ceba195f39fb"
    },
    {
      "Start": "49d9ce95bae14eca9db79625b5c0d923",
      "End": "021bd141b32f469590a12582d77c4171",
      "Id": "48eb0e5d9a21436ca0f632b8c7b91520"
    },
    {
      "Start": "a607e2548e6e42d1a9c05b51b9827797",
      "End": "e38ec452b13f45f7af29f769baf9f94b",
      "Id": "745bcc4a7a434d24a9e24affc0261419"
    },
    {
      "Start": "4d3ce376f9cf4e27a0c47d0475632fba",
      "End": "74a1c1e931df495bbe949e6781081bb8",
      "Id": "f5da032597db41aa85c6ccc397194c0f"
    },
    {
      "Start": "193e39f88bbe4c2c8f5e33c413052dcd",
      "End": "7c5d18b73fbd4b63beaf019eb4350e5e",
      "Id": "b199d8534df94584a689dbe87c03961b"
    },
    {
      "Start": "f596e040ea9442cf9387870a673c17da",
      "End": "b51a076ada804d788558e0f299b93fdf",
      "Id": "1c54c2b43d64473ebd1a076e3f5dc9df"
    },
    {
      "Start": "85311f189a9f4cc5927ae8db87057302",
      "End": "0ef4a070c16c4be390005ccac3744019",
      "Id": "9a87a0a2f68c48a6a8c54a67f7206404"
    },
    {
      "Start": "050d423bca134dcb88397436bb5b10ec",
      "End": "52b622fdf97742f7854da12e8c0b2a51",
      "Id": "7ddf3e07484e46b1b7607f6a93ab95b9"
    },
    {
      "Start": "cacc30fdcc9546a8819a716f3d1ac3f2",
      "End": "119b70efe0164640b19ddfe55736911d",
      "Id": "6c420efebbd84d5a8490b80a500c41a8"
    },
    {
      "Start": "4bd58def7042443ba52245c9c19d4430",
      "End": "bc4ddfa7d5984ba181796730931c480a",
      "Id": "7a5fad86d6f5464e89da8224d247c370"
    },
    {
      "Start": "eea992901c854c5caf8825c307eef2dc",
      "End": "4ec96b15881c4177874682d7d7a1c9c2",
      "Id": "aef4e092c6d6402cbe3e23a8167b6921"
    },
    {
      "Start": "eea992901c854c5caf8825c307eef2dc",
      "End": "1ca8395e8b0348639485f7830d37e0d2",
      "Id": "577da61df1a843898394e9fc29299971"
    },
    {
      "Start": "2112261a956844daac627699028df688",
      "End": "472ca881b77e4fdc8b9f0fc53a5f78fb",
      "Id": "c0ae8c2b67c24a00ba535eae1deffdf1"
    },
    {
      "Start": "2112261a956844daac627699028df688",
      "End": "b1814a8d6279461c969ce87413952dc0",
      "Id": "f7ef7c4ec2ea43649fc3f0ddaa9705af"
    },
    {
      "Start": "be066a6bf51543d98d25de91cf584a20",
      "End": "dc8f1c2d843a4d59a064093324578f7a",
      "Id": "d4f465051785496a87c8d694a91483d0"
    },
    {
      "Start": "be066a6bf51543d98d25de91cf584a20",
      "End": "8bb9992b038a40dc91d8dc1113327684",
      "Id": "789ce74869ab4aa1bef73080680e08fa"
    },
    {
      "Start": "17bf4b4eb64941e09a3e3a7a32a6a62b",
      "End": "81cd23e6466a4480908922499728cbca",
      "Id": "d32398bff5a14feb93391d3d1d241252"
    },
    {
      "Start": "42f277162b0946ea8803e2c774bebf40",
      "End": "1bb510ebbf0c4a2ba3a7120e156c70c2",
      "Id": "8d8e3ba507b1490ea7d9cb13ec2e38c4"
    },
    {
      "Start": "1d50d421a6f24d05a70071331849efad",
      "End": "ba8f735b92484c3390d08216fb0834eb",
      "Id": "46bdd60dfa094200a4a9619985297e1d"
    },
    {
      "Start": "4cf92c42858146f4a947aac987ee3969",
      "End": "aed246504f2e43bc95c39315ff2a88a4",
      "Id": "2a8d2a196fd545449c0d611af91ace53"
    },
    {
      "Start": "9e18046337ea4b419497c9fd5a222fe6",
      "End": "6a4724270b9140b79d18ca86858a5ebb",
      "Id": "355458dfd18a4c4bb8a61fb234698e59"
    },
    {
      "Start": "9e18046337ea4b419497c9fd5a222fe6",
      "End": "7bd2e6b3e1504d79a7107693e4d43da3",
      "Id": "64fb6b18223c462497713883d955bc41"
    },
    {
      "Start": "38d634f4d2584223a8a729e9ea0c73eb",
      "End": "ede6dcdc78b34a3990c5d59532f0c3a0",
      "Id": "f261f5640dd64ae6a3cd01f7aa4a8ec0"
    },
    {
      "Start": "38d634f4d2584223a8a729e9ea0c73eb",
      "End": "dd8978fc20ae41199c67c103765a4e6b",
      "Id": "afac88b2f001473fa71387b5e6370337"
    },
    {
      "Start": "f75d57c4e9f04344b9496de697041064",
      "End": "988161e147634f49bb79caf8eaeac3f9",
      "Id": "6e46ae8eb6c2430db0986e0d674f290e"
    },
    {
      "Start": "9c37073615a646f0ba374acb954d739b",
      "End": "43e637a65ef54c3eb47568e84fca2672",
      "Id": "e1d8187a315b4c9bbb36f8f5058c3e83"
    },
    {
      "Start": "cad8d0e2c53e47deab59f3f89729a412",
      "End": "081fefba6da44022985fccff65b073e2",
      "Id": "ef4f7527cc9b43a19cceef2b6f4d8a72"
    },
    {
      "Start": "e87e069a522a4e7d87b1a9b49d2721fa",
      "End": "a452d9223cc94fa2969e9ea31c30c3ea",
      "Id": "c8f85f4fb03e4674add9dd1e02bd3c04"
    },
    {
      "Start": "e87e069a522a4e7d87b1a9b49d2721fa",
      "End": "3eeb39e6d278433c9cff9031ae11c305",
      "Id": "dab1c942769f4a33965c913a2a92352b"
    },
    {
      "Start": "43cd5b1abe6e4b79bac67cc2b36901e7",
      "End": "2a90153b417f4ca3b5c200080ce39986",
      "Id": "415276d0e4384262942c8709d49d0ebc"
    },
    {
      "Start": "3f651a230f0e4e72904dd335ccb4c09d",
      "End": "8c34c33a4f1e45859b208ce0fe3a19a7",
      "Id": "7b55ac55bf6845dba2318727471f8c6d"
    },
    {
      "Start": "9f2f186f02de432da9b79173d1b12272",
      "End": "9ea938205eee4aa5ac824ba61959789c",
      "Id": "6811470e220347cea345f868c9c2f63f"
    },
    {
      "Start": "faa23f327c6f48a79ac673b5b45396a0",
      "End": "e5750db9721a465f91d557e9b5980300",
      "Id": "70e0f139849f427fa873f6598d5af579"
    },
    {
      "Start": "fd0f26c023e04805b0b4798033ea6092",
      "End": "88f0f168bd06426c80a87f8684bcb9fa",
      "Id": "dfd89c61db00497f976ed827709160e3"
    },
    {
      "Start": "5ab37197e4a64a0495328c0b20fe3a00",
      "End": "e555f749fca843028643d9539703eb33",
      "Id": "0b9d5e5f593640fdbf1918585b290b20"
    },
    {
      "Start": "1db3af769c984141b2e5ff9a228d9194",
      "End": "192f9f8b35ae44e2b9abb19e2405b690",
      "Id": "0e149474167943bba37786c973825192"
    },
    {
      "Start": "2448bb412e84434fb328e761c30052be",
      "End": "67253b79b63544ea8726d0c0dc71bbb2",
      "Id": "f1d3203170ca4b4892b163a1338e4909"
    },
    {
      "Start": "d29501bc803a4934b83ae7af4b0cdb40",
      "End": "5bc6a867db4d42b99c30d29f803476ff",
      "Id": "196b285e15854a7aa158ba74fdeb6a7d"
    },
    {
      "Start": "d29501bc803a4934b83ae7af4b0cdb40",
      "End": "89930acc7c514cb7b05d8dff6610d7bb",
      "Id": "8a7059a0ed0b43f6b9edb570b8368a4d"
    },
    {
      "Start": "d29501bc803a4934b83ae7af4b0cdb40",
      "End": "96bb6a843af9436e868dd6eccfc5d4df",
      "Id": "f11cb3180fdf4600994c9cec7db74a55"
    },
    {
      "Start": "c8e2cc2dbaba43888e14cb6b22622c28",
      "End": "85f092b721ca4b5d9c3dc9cf7b3decbf",
      "Id": "a7bf235ab00a4dd191059295af2a5048"
    },
    {
      "Start": "c8e2cc2dbaba43888e14cb6b22622c28",
      "End": "943d95d139ad4bf1936bff4e262c6766",
      "Id": "786bf2eab2284c09b50f87c8241cb37d"
    },
    {
      "Start": "f202474159984002ba6e13a1228957c4",
      "End": "9a842634c8294a41bdec1cb5e0b7a479",
      "Id": "92f4c47a37944c928065b235ead45705"
    },
    {
      "Start": "f202474159984002ba6e13a1228957c4",
      "End": "f1a0d77408a74cb480512911d6dc2c88",
      "Id": "894cb59837e047429ac5158c27c5c034"
    },
    {
      "Start": "f202474159984002ba6e13a1228957c4",
      "End": "5a3d3049e9de4a439858796bf692bfe8",
      "Id": "3ae0e9331d914b54bc0d22e337e55a9c"
    },
    {
      "Start": "f202474159984002ba6e13a1228957c4",
      "End": "5b18959391804e16b1476e1f9aaf75b4",
      "Id": "d7f6310a346948bba705343f0a1851aa"
    },
    {
      "Start": "a3927a38ccaf4d78a3907494cac2ebed",
      "End": "cdac7afdca7c40e3add454ba600f59dc",
      "Id": "357a0b9581ee487e902552be9abf78a3"
    },
    {
      "Start": "29d9d461c44e468e827abe5cc4454964",
      "End": "6113220af14b4a2e98c0115f0696a1a6",
      "Id": "5767746696b84f049e43d4f3e7adc491"
    },
    {
      "Start": "29d9d461c44e468e827abe5cc4454964",
      "End": "d1d3376b8db74123aaa65f9f21aeabb5",
      "Id": "f700e5427d1a45dea07f9551cf218699"
    },
    {
      "Start": "29d9d461c44e468e827abe5cc4454964",
      "End": "7df7d52491d84292af5e91c3a9481873",
      "Id": "21da9029f5104b4a92e038080f602384"
    },
    {
      "Start": "59d3a38a0f4243f7881177386ca1168e",
      "End": "77b3b9bb5f5c49618df4227bbe38fe7b",
      "Id": "ec2d6a3c0f724a6f9d9466382f360c1d"
    },
    {
      "Start": "ca14694daa8b4cc2aa9df4f140059c15",
      "End": "d7748cc61ac8461b996ba5db4d28c199",
      "Id": "df9c4c43335c4148a6d2b0ac02595d8d"
    },
    {
      "Start": "a5cc1718bdec4ab1a3a78f4b39d12f62",
      "End": "352bf928d2004cf38a45125731a274dd",
      "Id": "b5728aecd2764bff97af8879a4969f9d"
    },
    {
      "Start": "51947ab9076d41c0972fe76cd06e1247",
      "End": "8ed8617f2cc341d1bc0b714e25de2611",
      "Id": "b2c0253b97b4404aaf23d4a63903b875"
    },
    {
      "Start": "e9f7f09fca834114967b97233dd4fe9e",
      "End": "ead735a0cc304d50bed250a2896ecdc3",
      "Id": "92f3d293ddeb4fab85f72f18bd121390"
    },
    {
      "Start": "0ad73e01de064e1d8cd3fbcb0ea1cac8",
      "End": "2228662488ea440c9bc46c06c6c05aea",
      "Id": "4edda4ccbf4441729eb5fccdd6da74b4"
    },
    {
      "Start": "20d304fbefc546c9a9e0ee2dc7695a16",
      "End": "b9fedb246a4b44cd8291fc354960aa5c",
      "Id": "a51d24004e8044de87fa76bf85b21ec3"
    },
    {
      "Start": "b95d8fa868ca4baba494e31295f2ffb6",
      "End": "3d0e7441ac4b44d9bcb50aea018e6d4b",
      "Id": "04bea4f0b2b843c6a4ed44cedb05bc47"
    },
    {
      "Start": "a16f5cd67df249b9917ada690975968c",
      "End": "97c27130e8184870b6b2d0980b976d09",
      "Id": "352235eb3b47422bb637818bf4da9337"
    },
    {
      "Start": "53d592e8d0944475a7dbeaf6ec3a92a6",
      "End": "97db5c7532894890a8e5993196188e20",
      "Id": "e69cbc19a05749129cbe2bfc75282a0d"
    },
    {
      "Start": "ef639ce700804fb78b5e59dc3916bbc7",
      "End": "cd1b4e311d734ce8aaab0d247605ee03",
      "Id": "31fcebd100504824930a4a3f95255ad7"
    },
    {
      "Start": "ef639ce700804fb78b5e59dc3916bbc7",
      "End": "3c3bb9a61dce40e8902ed20587f46740",
      "Id": "603743564d2441668ea608a6b792af83"
    },
    {
      "Start": "b8f4c14a851841c9baff19d12ee90da6",
      "End": "59e770a85dc440159b8f6f1be93b610d",
      "Id": "ea7ab8c302a54a328cb309deda3c09ef"
    }
  ],
  "Dependencies": [],
  "Bindings": [
    {
      "NodeId": "25f7002c-44e9-42e8-b59f-2dca2e6b6d2b",
      "Binding": {
        "Remember_InClassDecl-1_InFunctionScope-1_Instance0_25f7002c-44e9-42e8-b59f-2dca2e6b6d2b": ""
      }
    },
    {
      "NodeId": "76bc313a-c1bf-4aa3-a820-c11e9f4bd2a9",
      "Binding": {
        "Remember_InClassDecl-1_InFunctionScope-1_Instance0_76bc313a-c1bf-4aa3-a820-c11e9f4bd2a9": ""
      }
    },
    {
      "NodeId": "cc267419-c3c8-4d77-9c54-291f3f343012",
      "Binding": {
        "ByElevationAndName_InClassDecl-1_InFunctionScope-1_Instance0_cc267419-c3c8-4d77-9c54-291f3f343012": ""
      }
    },
    {
      "NodeId": "04d3b706-97bf-4e7b-b24d-e58da9b391c6",
      "Binding": {
        "ByOutlineTypeAndLevel_InClassDecl-1_InFunctionScope-1_Instance0_04d3b706-97bf-4e7b-b24d-e58da9b391c6": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.3.8810",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 854.91307083420088,
      "EyeY": 210.46682076242109,
      "EyeZ": -123.54556681679811,
      "LookX": -465.701708285609,
      "LookY": -640.4952645185997,
      "LookZ": -63.291215073263871,
      "UpX": -0.65463902799316154,
      "UpY": 0.75068788740783587,
      "UpZ": -0.088968751410839861
    },
    "NodeViews": [
      {
        "Id": "e47835728a284f859955308a5430e98f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Select Model Element",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -381.384001164083,
        "Y": 49.223088524454766
      },
      {
        "Id": "577e49374abe41798c1435389dc99658",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Select Model Element",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -379.29112136659035,
        "Y": 573.77686368854006
      },
      {
        "Id": "c6d67a4b6f5149bfa0340cfef2601624",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.Solids",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 316.39645958780932,
        "Y": 290.54395423497772
      },
      {
        "Id": "8aaef1814eb24e6f9d6a90e8342e5d77",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.Solids",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 323.49991609226754,
        "Y": 555.21062090164423
      },
      {
        "Id": "d5185e210f1e4c72bfd31bd64de43de4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Solid.ByUnion",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 768.70768898131485,
        "Y": 554.5495672391844
      },
      {
        "Id": "863c5edb61f9432b8110e54cdb9cf112",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "PolySurface.BySolid",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1089.5552206422346,
        "Y": 540.46518750303585
      },
      {
        "Id": "124c3f393fb848f7a9ccbd88f4a1c945",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PointAtParameter",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1618.4307153027255,
        "Y": 635.58756858409981
      },
      {
        "Id": "419a1ab2567c41569e20df1f61a2079f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1499.5839812567478,
        "Y": 677.00214142921959
      },
      {
        "Id": "29e6513c7ec74ebf8c1507b1bc300d7d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.SortByKey",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2082.0437816662552,
        "Y": 543.294226669138
      },
      {
        "Id": "32ddd9a7dd6c4a98b9e4edc65882cce3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2348.9074757304488,
        "Y": 542.5787744062311
      },
      {
        "Id": "080a1ffc911244f3b9ea1da8234f8cfd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2230.0607416844723,
        "Y": 654.82312127911268
      },
      {
        "Id": "579bc5c8d1c846d89b178838df258beb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PointAtParameter",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1424.5019000100392,
        "Y": 1392.5113131173484
      },
      {
        "Id": "7364443fdafc4513bbe436d7b1d422e4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Retail-BaseVPosition",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -321.31467354934284,
        "Y": 1598.3530364785502
      },
      {
        "Id": "bda8c6ae0e944ff58c2a641fbedb9163",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Rectangle.ByWidthLength",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1955.1724872478644,
        "Y": 1230.9709060610132
      },
      {
        "Id": "47b90335b8e740acbbd4d1621bfce6d5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Plane.ByOriginNormal",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1671.7848463544537,
        "Y": 1179.3622075756216
      },
      {
        "Id": "01acd9995aeb4146afb7ee2d4e073c86",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Retail-BaseLength",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -671.76778724469,
        "Y": 1841.8784285066452
      },
      {
        "Id": "c226447e8525453d966d3a68305df971",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Retail-Base Width ",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -675.41799245430457,
        "Y": 1773.4146109955177
      },
      {
        "Id": "8da5426d1b4942528025ca470b43db75",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1976.0484355376639,
        "Y": 1639.8575081438764
      },
      {
        "Id": "7210ce36dfa6489a91ce37d0f3e74c91",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "/",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2186.7805244894917,
        "Y": 1584.8018003743364
      },
      {
        "Id": "fdc628f209aa49fa98ca2cc42f8ad6cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2456.9536814289027,
        "Y": 1370.4833298150586
      },
      {
        "Id": "83c8410172ed478585597481f346a327",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Curve.ExtrudeAsSolid",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2956.8705703106184,
        "Y": 1325.2333674029865
      },
      {
        "Id": "f3d3c0ed58dd47e985b78652978f04a8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Vector.ZAxis",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2797.6908505305696,
        "Y": 1441.1498040114716
      },
      {
        "Id": "8daede497dbd40a188c01e1da413cc6d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Geometry.Rotate",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3228.8287031749842,
        "Y": 1459.1018865859144
      },
      {
        "Id": "0cf8fb265de44403899c56c40d4ea0a0",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Retail-Rotation",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -673.293535316253,
        "Y": 1918.2657309265403
      },
      {
        "Id": "46801006db6e48f5a2346e5d17fe3304",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Sequence",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2663.2770933194342,
        "Y": 1815.6241203440343
      },
      {
        "Id": "364c9f62f9cd4932993319c873c42fa4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Plane.ByOriginNormal",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3136.4858553295644,
        "Y": 1838.1339394831841
      },
      {
        "Id": "76cba9146b7844c38e3cb15ab33aa829",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Vector.ZAxis",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2759.2738845529498,
        "Y": 1955.1835836768132
      },
      {
        "Id": "b72c763ec332427aaeb812e35ff5b317",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.ByCoordinates",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2932.4355946503329,
        "Y": 1670.1637095148478
      },
      {
        "Id": "196ef861e3a040ddb52b2ebdac3c0619",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Geometry.Intersect",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3661.7091368148526,
        "Y": 1581.39047943973
      },
      {
        "Id": "1e30329d1e284df1a0335fc5c7d84ca6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 935.53229076415187,
        "Y": -196.68344170634435
      },
      {
        "Id": "008105518fa8404ca6f4ce40c82b12a4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color.ByARGB",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 750.19631621912731,
        "Y": -167.04135704307492
      },
      {
        "Id": "5147cfa7170b4672baa4e0cabf2040a3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 629.60854030886094,
        "Y": -188.38432623073248
      },
      {
        "Id": "83abd94e62144dddb6459d3bf25055e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 607.27490445463877,
        "Y": -120.24280242122342
      },
      {
        "Id": "e365c589bc154462a94ada93b4ee3791",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1961.3241045010811,
        "Y": 142.61849736583974
      },
      {
        "Id": "e999ab27676a41f482c0480e6595c397",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color.ByARGB",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1757.5940802713328,
        "Y": 220.63012008893776
      },
      {
        "Id": "e89fa2589ac74bceb309080eb8631a74",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1628.9791515949621,
        "Y": 245.62831952889462
      },
      {
        "Id": "7b45b322815a46648d0dc5b2d17c091b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1626.4152086685147,
        "Y": 302.63533538985484
      },
      {
        "Id": "f8d68e49c503403aa548fe1799dc4b8b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "PolySurface.BySolid",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1191.2068167211748,
        "Y": 107.84227347548904
      },
      {
        "Id": "43b276925891416a996906e7f96b7129",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Retail Area",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 807.22995270562456,
        "Y": 1120.4813507058914
      },
      {
        "Id": "cecda705df4a46a8978df9a04cb9c274",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4372.6567106835791,
        "Y": 1285.4180726760392
      },
      {
        "Id": "83e4db675c27420199385670757caa26",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4378.8652012087705,
        "Y": 1414.4483037013647
      },
      {
        "Id": "1d73c7feff1842ce9151cc4f9b835482",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.Area",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6085.6156969293233,
        "Y": 1513.2225899188495
      },
      {
        "Id": "878a48e39584425f8580e0c4c45d6c11",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 5831.1922900628888,
        "Y": 1514.3145358710656
      },
      {
        "Id": "994eebc8c1cf4ad7aa594d026b37775f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5943.7376239203195,
        "Y": 1662.6772776061664
      },
      {
        "Id": "1e4e0be7c5714a32bf29913757c108f7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PointAtParameter",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6062.58435796631,
        "Y": 1621.2627047610461
      },
      {
        "Id": "b416f008c3fb43b38e89d419c14d469a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6864.6276629525846,
        "Y": 1538.2225886597832
      },
      {
        "Id": "0246f57202ec4e258e21b7a627e4f937",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6866.9037707475627,
        "Y": 1802.0508057344061
      },
      {
        "Id": "82e8627b121740429b0b3337d5661499",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6859.487489197395,
        "Y": 1667.0476129583151
      },
      {
        "Id": "4c430b5422ba4afa94852ced625be50c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6578.9882990621027,
        "Y": 1591.968295633593
      },
      {
        "Id": "db23ce34cfcc47f197c34e1b8c13938a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6583.8101173085834,
        "Y": 1683.6571517011564
      },
      {
        "Id": "3cd1488a46574f8dab26fa1c07741df4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6587.5666555142061,
        "Y": 1778.4539112138884
      },
      {
        "Id": "390f9c3ee0534887b0463478737fa209",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7103.29823111637,
        "Y": 1539.0992719735139
      },
      {
        "Id": "bf9d4c3b12734e0d80ae2e9db2b7169f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7104.0700117388578,
        "Y": 1667.7819826958514
      },
      {
        "Id": "e3f7b073de604db0a285218d4b1db378",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7105.76965389752,
        "Y": 1801.6012427484386
      },
      {
        "Id": "87c232ee909644c0a19ff206e5eb9ee1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List Create",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7377.4813495110466,
        "Y": 1634.9540326747558
      },
      {
        "Id": "e32f4a1adf2f429e8d461c6fbfcf7cf3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7799.838864580167,
        "Y": 1674.4642100633264
      },
      {
        "Id": "faff7e7c0be748359629c0b48801441c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Math.Sum",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8013.8036435138438,
        "Y": 1765.6814987480088
      },
      {
        "Id": "ff6074e1920a4c61b846dcdea684fade",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "OUTPUT - Program 1 - Value Generated",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8601.57971247173,
        "Y": 1525.4702383718436
      },
      {
        "Id": "08f5f169c76142b983627d78fb9449ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6882.5915242987858,
        "Y": 2537.1109025719807
      },
      {
        "Id": "6dc2f218fd544f43b7797cf297f7677e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6603.2544090654255,
        "Y": 2513.5140080514611
      },
      {
        "Id": "e013aaec0a79460f9e44260125611f6f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7121.4574074487455,
        "Y": 2536.6613395860113
      },
      {
        "Id": "e7881fa080e046859d0f6ed84060e53f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7795.6570935654845,
        "Y": 2557.1264893904618
      },
      {
        "Id": "3cc415b7dcb34668820a31a2a5cfaaaa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Math.Sum",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8025.8090516907459,
        "Y": 2556.5910794303009
      },
      {
        "Id": "30efa5036c304b96acd3bb5cd625d28a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "OUTPUT - Program 2 - Value Generated",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8603.0819413716545,
        "Y": 1635.5029539780162
      },
      {
        "Id": "33d7c3b453b54142b31050b6489da92d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7392.8735286034162,
        "Y": 2652.3034648649318
      },
      {
        "Id": "20ac434c1c7b4a9b9b3fa3bd0973e853",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7595.744666043046,
        "Y": 2554.7842801794914
      },
      {
        "Id": "b48aee1a90254ae7a12944ed2293ebf6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5970.5508293694184,
        "Y": 2429.7230486501244
      },
      {
        "Id": "0073bfaeb4774685a302acbe72282b4b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PointAtParameter",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6078.2721115175364,
        "Y": 2356.3228015986215
      },
      {
        "Id": "b305ac0d8e004d00b67d898dc8966492",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6875.1752427486163,
        "Y": 2402.1077097958905
      },
      {
        "Id": "1c70a30ba27c4c93b11c0e873650e529",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6599.4978708598055,
        "Y": 2418.7172485387309
      },
      {
        "Id": "b2867d12f4da45179b4052f29444c945",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7119.7577652900754,
        "Y": 2402.8420795334305
      },
      {
        "Id": "61c993a266eb4e3da17e028c445e2eb8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List Create",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7388.9970586005647,
        "Y": 2379.748899922969
      },
      {
        "Id": "50f1957b42b745f893532d2af37e6ed0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6594.6760526133248,
        "Y": 2327.0283924711712
      },
      {
        "Id": "d00b228633b74281af95896e050286bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.Area",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6077.6618651975677,
        "Y": 2203.7808791649322
      },
      {
        "Id": "88c79eedbc2e4303893fe82e573f789d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 5846.8800436141055,
        "Y": 2249.374632708641
      },
      {
        "Id": "97776695def84d028ca42b15e0fd2ce5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6880.3154165038059,
        "Y": 2273.2826854973609
      },
      {
        "Id": "8cb6515501bb43c5b8faa3a2da6a618f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7118.9859846675963,
        "Y": 2274.1593688110906
      },
      {
        "Id": "7301eec0657245cb83a20b764322bb58",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Vector.ZAxis",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3561.5274236808555,
        "Y": 3040.5044072831947
      },
      {
        "Id": "e454e10bf33e41878ad6b77d9de05cfc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Sequence",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3447.2481456852956,
        "Y": 2904.6014413028247
      },
      {
        "Id": "3becc28ceb544d80ab397fea1435f289",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Plane.ByOriginNormal",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3920.4569076954258,
        "Y": 2927.1112604419745
      },
      {
        "Id": "8f87a75b99624083be7d68fe4debf7dd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4969.3333751982846,
        "Y": 3352.0232206090636
      },
      {
        "Id": "11294ae4807145c99bb7d24fd56e62e6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4971.1183797046378,
        "Y": 3479.6216763324528
      },
      {
        "Id": "514878d08f3e4ac9a9403d7a77602d9e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "/",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2977.5750332417565,
        "Y": 2669.6850475012848
      },
      {
        "Id": "b13111987fbb48369cac7320d7fbfee4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3201.3486867536276,
        "Y": 2669.6231074750644
      },
      {
        "Id": "893e1340c6fd47c28265c17f393723d7",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "INPUT - Program 2 - Mass Rotation",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -664.77735173692008,
        "Y": 2825.030633496774
      },
      {
        "Id": "f8d12a3a276b4a66ba522ce7b9e7d19e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.ByCoordinates",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3697.8996924250869,
        "Y": 2791.1075884037346
      },
      {
        "Id": "94f2d2d1921b4c7985d4618615999d56",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Geometry.Intersect",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4333.0971151339236,
        "Y": 2841.7331514364546
      },
      {
        "Id": "faf214a09d714c7785ac3bbb533cb716",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "INPUT - Program 2 - Base Length (Feet)",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -664.77735173692008,
        "Y": 2748.6433310768748
      },
      {
        "Id": "9fbe4cea724647329b4f75de1ec117ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Geometry.Rotate",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4012.7997555408465,
        "Y": 2548.0792075447048
      },
      {
        "Id": "d9270299c18f4543832d3e61d0d4f2f2",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "INPUT - Program 2 - Base Width (Feet)",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -664.77735173692008,
        "Y": 2685.0464538452347
      },
      {
        "Id": "ea10600fcf484f88962de1eb436c8a9a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2761.3841791808072,
        "Y": 2569.1659496608345
      },
      {
        "Id": "361c905d10cd4f2ea732a221356508dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Vector.ZAxis",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3525.7095605279255,
        "Y": 2602.4557626661349
      },
      {
        "Id": "de083f5e7d56445c93e81c1b0ec708ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Office Area",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1521.1444481414592,
        "Y": 2523.892584727002
      },
      {
        "Id": "456ebb02bb2948da8c4997abe1d02482",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PointAtParameter",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2175.7203617211662,
        "Y": 2406.4306138257048
      },
      {
        "Id": "ac9e7d2da2694e1d91a86235befc0e35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "IN-Program2-BaseVPosition",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -310.43032789251561,
        "Y": 2643.3457249910584
      },
      {
        "Id": "22677d9c01034fdaadb344af3cad92f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Rectangle.ByWidthLength",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2760.9786000502163,
        "Y": 2410.0178513203246
      },
      {
        "Id": "b13fd6c6ac854c8787f1255ba685bb1c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Curve.ExtrudeAsSolid",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3739.1893780808759,
        "Y": 2409.2539545749646
      },
      {
        "Id": "6bfd11a028ab4fd18340df717e8a18de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "IN-Program2-BaseUPosition",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -314.69252794417588,
        "Y": 2576.0041252404553
      },
      {
        "Id": "c4858c0430d449df8aaf363719710ff9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Plane.ByOriginNormal",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2435.2855295611071,
        "Y": 2406.1733475397546
      },
      {
        "Id": "06371f3044c8417c9e1ed83d59c9ceb6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List Create",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8938.7080326055657,
        "Y": 1586.6494682971147
      },
      {
        "Id": "9712eed346ca4abe86e588634dc3a150",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Math.Sum",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9116.0836229012548,
        "Y": 1592.4692086297218
      },
      {
        "Id": "69edd1b639a2429aa1a9e9d78976123b",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Name": "TotValue/Yr",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9345.9677263781141,
        "Y": 1599.6739769307133
      },
      {
        "Id": "8f802e6d1b1744cfa7cd9bbf08bcaaa4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6563.5535623266942,
        "Y": 1479.3318747419385
      },
      {
        "Id": "1f593c64c9474a6bab353510d91d4a81",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6534.0443020338507,
        "Y": 2201.8614003047005
      },
      {
        "Id": "3eebaaba846d48de8758f9ed6d742f5a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1816.8374272892897,
        "Y": 2498.1801880725056
      },
      {
        "Id": "6856a3096a1c4d9daacf1b8091b43af4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "*",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1056.0007281675516,
        "Y": 1145.6031444105424
      },
      {
        "Id": "e087768916874ca4b9efb1481c5ecc93",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Math.Sum",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9126.7009255245921,
        "Y": 1771.6720998582241
      },
      {
        "Id": "96d8f353b98a49f5b46d18e7b4c8385b",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Name": "TotCost",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9372.7363021348483,
        "Y": 1767.274678275091
      },
      {
        "Id": "3986756dfa9f46b797949a45e2c8d72d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List Create",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8940.5425762455161,
        "Y": 1770.3590462253997
      },
      {
        "Id": "df0ffa6d40a445f1b5bf2feeb4e7814e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "/",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9541.9782718233382,
        "Y": 1664.7217949939359
      },
      {
        "Id": "d1066a3596ad49969dab28cea0e6e6c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "YrsToPayback",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9870.4021971207276,
        "Y": 1691.7827231149902
      },
      {
        "Id": "f8200f8b8c8e4cfa89a3d47b30a3707a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Gross Sq. Ft.",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -469.63998379300006,
        "Y": 983.18502392616892
      },
      {
        "Id": "fe30eb6635f145a6bc65100f50892c97",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Retail%",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -664.753136376916,
        "Y": 1099.70385135888
      },
      {
        "Id": "25f7002c44e942e8b59f2dca2e6b6d2b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Data.Remember",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 569.92440425784207,
        "Y": 290.19046632004859
      },
      {
        "Id": "76bc313ac1bf4aa3a820c11e9f4bd2a9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Data.Remember",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 589.58612983048965,
        "Y": 555.21650460315368
      },
      {
        "Id": "3f9e35f3ee7d4e2ea457c38cec0cd607",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List Create",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 5888.4040700747519,
        "Y": 4149.4505199914947
      },
      {
        "Id": "3a8984a7f00d4220b89797594ebb169d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6080.585847175972,
        "Y": 4149.3291915876744
      },
      {
        "Id": "739a1981020b4286a1f4e3d27cb6a23f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Count",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6335.4947914868826,
        "Y": 4061.6863410717947
      },
      {
        "Id": "ab37f6080a1046ee9a731cd796ab9a4c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Sequence",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6581.8112994727126,
        "Y": 4035.9090320965242
      },
      {
        "Id": "b27ab61dd9de43ca9a4d608635b25bf6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6446.6236346246824,
        "Y": 4001.5392867961846
      },
      {
        "Id": "b81d481159df4b4cb04fca31c5e587df",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6693.3527598262626,
        "Y": 3965.1231345889546
      },
      {
        "Id": "6a643403222e4d98a51a7ba0203a5352",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String from Object",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6795.4179978744123,
        "Y": 4039.0029930924347
      },
      {
        "Id": "8280fc234381491bbdbc58e9ffa7d514",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PointAtParameter",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6518.6888168903115,
        "Y": 4300.3583306885348
      },
      {
        "Id": "6fefda0d19be4b2d8be0d9b790509b12",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6423.3512286888727,
        "Y": 4350.9199186952947
      },
      {
        "Id": "cc267419c3c84d779c54291f3f343012",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Level.ByElevationAndName",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7240.1074467849357,
        "Y": 4098.5021638255457
      },
      {
        "Id": "04d3b70697bf4e7bb24de58da9b391c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Floor.ByOutlineTypeAndLevel",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7473.8051150312995,
        "Y": 4221.5508725423842
      },
      {
        "Id": "681eb615dad7465181a24e50f3e9e9d7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "PolyCurve.ByJoinedCurves",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6756.3736488842624,
        "Y": 4458.805317407825
      },
      {
        "Id": "853340820c954f138b50e5f5e26ccf96",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Floor Types",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7224.9323180535694,
        "Y": 4469.675394143811
      },
      {
        "Id": "a0a5ba3e7d1a45cfb51b8d0dc6c9ce76",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Retail-BaseUPosition",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -322.48250736300611,
        "Y": 1531.8184672740006
      },
      {
        "Id": "7e20b08a662f493a9f38c9ecd7aa1b99",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "OUTPUT - Program 1 - Building Cost",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8619.073025771957,
        "Y": 1752.5805928288128
      },
      {
        "Id": "85c0806daeda409e91f0d18cbb7e7347",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "OUTPUT - Program 2 - Building Cost",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8613.06411017226,
        "Y": 1862.9946977785917
      },
      {
        "Id": "4d8e64a4577545049e874436a61e4cb0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Curve.Extrude",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 2804.5572039635845,
        "Y": 1155.7544939854222
      },
      {
        "Id": "225c63d428174f4381bc5c4c3970c0f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.Area",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3054.5008336995043,
        "Y": 1155.3618643849661
      },
      {
        "Id": "5a3814944558442ea6ff827083cbca94",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Curve.Extrude",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 3739.0104389979151,
        "Y": 2277.6550862960803
      },
      {
        "Id": "70a9ecd12c31437c8636d4084f6675f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.Area",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3988.9540687338349,
        "Y": 2277.2624566956242
      },
      {
        "Id": "65ccd0ff4d1b4882b49848bb6e07f036",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "OUTPUT - Program 2 - Ext. Surface Area",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8589.06411017226,
        "Y": 2099.1777941880255
      },
      {
        "Id": "9fd92f7f986644d0a2b399bec5dc84cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "OUTPUT - Program 1 - Ext. Surface Area",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8587.5618812723351,
        "Y": 1985.3504860113126
      },
      {
        "Id": "6f62523ee2f64a6cb55b65067df15270",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List Create",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8962.43231322276,
        "Y": 2024.1026174537224
      },
      {
        "Id": "e0ed5d3f80aa49ec9faa12a913314045",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Math.Sum",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9125.9419217948434,
        "Y": 2011.7803037791523
      },
      {
        "Id": "4cb9e2c336ab413b9e05f60de1ee2636",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "TotExtSurfArea",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9760.7666170914654,
        "Y": 2016.4170820631384
      },
      {
        "Id": "d540fcc341e04b399d1dda4278573d07",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "PolySurface.Surfaces",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1431.2603051336741,
        "Y": 105.43078538329257
      },
      {
        "Id": "703bf8cbb71942ea975a47e5308a5aaf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PerimeterCurves",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1701.5548373391002,
        "Y": 107.92326362122913
      },
      {
        "Id": "dacca06c24554ab09dcdc2d925b39669",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "PolySurface.Surfaces",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 1337.2715272038572,
        "Y": 543.69050467401007
      },
      {
        "Id": "2038fbcddf0b49e58591f761d676f25f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1849.6662594389393,
        "Y": 635.86440554016087
      },
      {
        "Id": "39ff65c2cc5047e9aad0cac6deea3a95",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.X",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2662.8752542505254,
        "Y": 1635.7464699308005
      },
      {
        "Id": "96e7b66efdc746dc841823c37d09a184",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Y",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2663.7791022831889,
        "Y": 1726.5493630813544
      },
      {
        "Id": "7641d4267ab947b494e869fae7902690",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1979.8457910670131,
        "Y": 1815.7561865765113
      },
      {
        "Id": "4733798a7a71419a9136fe1017ce6f9b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "PolySurface.Surfaces",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4311.2250798157411,
        "Y": 1861.7289157957298
      },
      {
        "Id": "e1e4c9ecdb184dc3afce5c1a13fa2c57",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Reverse",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 5316.5862496204763,
        "Y": 1860.0097372964688
      },
      {
        "Id": "c1423f932b5a4ed39d67901b818d6a29",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4476.8546670802061,
        "Y": 1992.6596056418989
      },
      {
        "Id": "66c487e90e884f78852439ba45e7f9e6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PointAtParameter",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4595.7014011261963,
        "Y": 1951.2450327967786
      },
      {
        "Id": "65ee879e93dc403bb8bd891c0f95b048",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "PolySurface.BySolid",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4064.714142083456,
        "Y": 1862.4579448624686
      },
      {
        "Id": "7b9b52784f5a4f8c84af8bce79bd3f84",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 5508.8582590755959,
        "Y": 1943.5867759855987
      },
      {
        "Id": "cc35c903b2964a70a7aef819c555cf3a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.SortByKey",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 5059.3144674897267,
        "Y": 1858.9516908818186
      },
      {
        "Id": "c31b9b35c9414a6c8aaeb33fe8f646ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5395.252347499506,
        "Y": 1968.983207643249
      },
      {
        "Id": "0b68d993b2d24c21990b89fcc9a458a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4824.2885388616987,
        "Y": 1951.4759133414441
      },
      {
        "Id": "50cf14d0f0704eca8e01438a59e284f0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PerimeterCurves",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4061.1633899052949,
        "Y": 1427.6143664676142
      },
      {
        "Id": "8631b8a0ce99432cb43ab2dc7c6e33c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6314.5450550911864,
        "Y": 1620.2232602038714
      },
      {
        "Id": "eefb454198674f2c833cdc3bda24d0ae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.X",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3442.664898663741,
        "Y": 2727.7056527503764
      },
      {
        "Id": "3f30d2f66f224fd4a848bd286cf8b3e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Y",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3443.6077418328932,
        "Y": 2814.1201818434615
      },
      {
        "Id": "4252b2b2e025403e82ee04b74c18aadc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3194.5291194128595,
        "Y": 2905.2696251553066
      },
      {
        "Id": "bdebeae036d64a25899a108fb07d7480",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PerimeterCurves",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4688.91125364628,
        "Y": 3478.8189644911317
      },
      {
        "Id": "f00ee6c4d8b34dd7a79cc0184d9b0e9e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6325.8781162452788,
        "Y": 2356.4204913597068
      },
      {
        "Id": "b48d8983c61746c18f063a0d06e19e58",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -333.85238102945857,
        "Y": 1038.4842466150749
      },
      {
        "Id": "c3cbfb80c81a4b05aad462c6fe99238e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "check the sum",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 51.067974869849991,
        "Y": 1121.9827814782691
      },
      {
        "Id": "e7935e8b9bec4f03a41f3d0175fae863",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Retail Metrics",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 652.541216112765,
        "Y": 2111.3787784992082
      },
      {
        "Id": "50376c03755b43dc8fcd0cbc2c5bd92e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Office Metrics",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 663.79679187992315,
        "Y": 3063.5637142153164
      },
      {
        "Id": "1e4a7e67801145c390ef5e2b8c8d62cc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6777.7168758168827,
        "Y": 4299.6246874948547
      },
      {
        "Id": "253617051d0d42d281188f2b9db5864d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PerimeterCurves",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6515.6760263204615,
        "Y": 4485.6413399151443
      },
      {
        "Id": "ec955658e63a47339dd956f5a07c8d53",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color Palette",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4063.652665614356,
        "Y": 1245.0655620497114
      },
      {
        "Id": "b7497f0e3a404859a5d33291a1a32651",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color Palette",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4059.5850463085008,
        "Y": 1333.2322854175809
      },
      {
        "Id": "b97b2da1235849e8b8d5964bf1a296f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color Palette",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4725.8939329790555,
        "Y": 3595.2993582654344
      },
      {
        "Id": "db0f62c16b2142df9d0ea3d202bafc7a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color Palette",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4720.1737539513888,
        "Y": 3356.195874908944
      },
      {
        "Id": "ef0de6ed84514df29d840fe0d508343c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 5816.6489177329477,
        "Y": 1066.5003040409329
      },
      {
        "Id": "e1265dc1228b41be8a58b92a6cdc6f53",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Solid.Volume",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6672.789034694787,
        "Y": 1017.9692243071424
      },
      {
        "Id": "8b72ed9bac63487f9f13c643219e2f92",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Solid.Union",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6175.3351411649255,
        "Y": 1071.868348651411
      },
      {
        "Id": "6f66488db4514f2e898fab7f69e5b543",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Name": "VolumeOutsideZoning",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9729.6116982602562,
        "Y": 1500.1506408981727
      },
      {
        "Id": "6be59004ab1c4198bd0184bd8ff5bf13",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Solid.Difference",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6421.6212406224595,
        "Y": 1064.7824711691542
      },
      {
        "Id": "87b0790298334e439ee6d719567071d5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6905.9195357935887,
        "Y": 1113.8452903567681
      },
      {
        "Id": "66aee6e710fe4ce5b5c2abb0fd1b8806",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 6775.44699571117,
        "Y": 1165.9392977819557
      },
      {
        "Id": "9f081c7782954e0da86a0dacc2187051",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7318.6546249641206,
        "Y": 997.84583960173677
      },
      {
        "Id": "1076f97ebac64a11a030cf6115b38d25",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color.ByARGB",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7063.6334220712279,
        "Y": 841.88178383998945
      },
      {
        "Id": "530472146c9e42219344c9e9317876dd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6935.4090555874263,
        "Y": 917.54846109027255
      },
      {
        "Id": "49f9476953194ea79c395b0d6b11a6a2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6960.3638690350208,
        "Y": 3969.9527677593414
      },
      {
        "Id": "f22e88c92c4e4c94bc6d854603457681",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Solid.Volume",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12803.474781892028,
        "Y": -1642.9765453196255
      },
      {
        "Id": "009555212cfb446b992170552315800f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Vector.ByTwoPoints",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8450.550996650034,
        "Y": -785.5911486633745
      },
      {
        "Id": "7a896bdff0d54920950c5cb4792c129b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Vector.AngleWithVector",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9578.8061904343976,
        "Y": -885.68277304097546
      },
      {
        "Id": "4a36b01dd0644fdfaccbf465f01f6b16",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": ">",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9874.626005362059,
        "Y": -762.0273853412134
      },
      {
        "Id": "cfce2831b4964560af87245864e3239c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Minimum Angle",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9709.139973363539,
        "Y": -729.94891901308745
      },
      {
        "Id": "bf628ae135e2467398287dc16834c408",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Vector.X",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7545.5228770545991,
        "Y": -1235.8781408512314
      },
      {
        "Id": "24ce4838da8b4f42b1501b6b304b421d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7795.59114151402,
        "Y": -1232.1228176659583
      },
      {
        "Id": "cc11affa953f4db4abb33d2c6ae955b6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7966.6355216343691,
        "Y": -1142.5800995524714
      },
      {
        "Id": "9c9d554c947c451da29212e2acc21f1c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7964.6362775742182,
        "Y": -1356.7293557986336
      },
      {
        "Id": "7496cc0555b742f0bbf91caa27a3a28e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 10281.836273978035,
        "Y": -1049.0916032376715
      },
      {
        "Id": "78db98dbd4e64d1cbafe9fa38bf3d1c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9704.6872603644169,
        "Y": -1218.7489468877504
      },
      {
        "Id": "8f557a62a70644fe857bc1f572400c78",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Cycle",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 10030.920384829498,
        "Y": -1194.4215058909185
      },
      {
        "Id": "7eecb695082b49baaddf5935e24c7e11",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Count",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9773.1162526500684,
        "Y": -1102.0899311798946
      },
      {
        "Id": "94bc59590b394594b4994f91f73c439c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 9861.5805371935985,
        "Y": -1219.5831009919605
      },
      {
        "Id": "f9f366a0d2794b21ab5affe4c8b65022",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.FilterByBoolMask",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7968.4038751666794,
        "Y": -984.38045954426445
      },
      {
        "Id": "4481290a174d480e8ee2138c9dd2fc9a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Panel.PanelQuad",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 10904.106981029014,
        "Y": -1301.5139184538293
      },
      {
        "Id": "2c740e8791744dc3bdf94e1fecb2753a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Number of Panel Divisions",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 10646.68627904323,
        "Y": -1223.6228544214805
      },
      {
        "Id": "3366a95520344973a15ae2685916d51a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 11306.489677377029,
        "Y": -1152.5613510291844
      },
      {
        "Id": "f76f3d94d7e8425d9a26dd6424d2c180",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Viewpoint Scores",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12795.553115378929,
        "Y": -1466.0046602943526
      },
      {
        "Id": "ad2a84f2ad694c6eb00e4857e5b840f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Mean Score",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 13007.44393100323,
        "Y": -1464.0778556290416
      },
      {
        "Id": "b15a6a89e1914386a2f33a732a813779",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Sphere.ByCenterPointRadius",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 12723.132464920427,
        "Y": -710.72735577557148
      },
      {
        "Id": "4b114e34d0c448aab8d2dd38e6d749d5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Sphere Size",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12515.52756452553,
        "Y": -655.5552411691375
      },
      {
        "Id": "b0353c826aea4cc5854f9db34ce097fd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color Range",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12660.802607359828,
        "Y": -573.64922789233947
      },
      {
        "Id": "9ba161e91a42431c8d6b28e514d17174",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color Palette",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12074.791265201029,
        "Y": -637.45156379363948
      },
      {
        "Id": "5d79454d7bd54f07a3626fe769bc083d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Color Palette",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12076.380862142129,
        "Y": -546.0497396793055
      },
      {
        "Id": "389e48ace46d47348f7e5bc2c9786e37",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12347.64667983553,
        "Y": -622.95780318021048
      },
      {
        "Id": "04322deb87d64453b1c480796de3ed32",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12407.388868111228,
        "Y": -502.81324646683538
      },
      {
        "Id": "2956186f01f04ec0be54eb684dc6bfac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 13184.123859188529,
        "Y": -666.75881453200645
      },
      {
        "Id": "253d7b9f8b3448449ed89b494be2c9da",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Math.MapTo",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12262.345268321527,
        "Y": -364.67943221170549
      },
      {
        "Id": "cbbf3d90cf3e4e228d110c39fd2433b3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 11993.150455604527,
        "Y": -333.71255460928546
      },
      {
        "Id": "a4e943c4c2324075a39f4c3b57dcf3ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12741.242741781729,
        "Y": -888.19174633629348
      },
      {
        "Id": "56d4a95c451240669ef483cd7ce070ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 12735.267704596228,
        "Y": -997.96352656319345
      },
      {
        "Id": "c60e8927d13d4432b977239eacccd4a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 13000.448823924629,
        "Y": -909.00958620568247
      },
      {
        "Id": "5fec3108dc6240b696c26cf1147df20d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "GeometryColor.ByGeometryColor",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 13184.626611987527,
        "Y": -970.39487317972748
      },
      {
        "Id": "f29cf2546dc04a3d8bd941da2bf75dfc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 11567.032118405228,
        "Y": -1074.3919214789044
      },
      {
        "Id": "c77007caa057495e9f15edee25301f30",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Topology.Faces",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6474.8873403212583,
        "Y": -833.21434557931241
      },
      {
        "Id": "54320309a08248e4a9d76ab2a8a3123a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Face.SurfaceGeometry",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6725.3594565322592,
        "Y": -832.15598554445444
      },
      {
        "Id": "53f6ede7cce34edf8da729ef475d3bee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.NormalAtParameter",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7138.9920083968691,
        "Y": -951.47790886705047
      },
      {
        "Id": "8a7446ae724943bd9176923bcaba2186",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6837.7904874596588,
        "Y": -742.13246909379245
      },
      {
        "Id": "7768595597f949a899c58c6a251e54de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Surface.PointAtParameter",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7142.8812964559684,
        "Y": -804.55082193325643
      },
      {
        "Id": "4c20ff08fc4a44889a50d37f944bb9c4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6851.53841261643,
        "Y": -1597.72529039158
      },
      {
        "Id": "bbcb95176ac6445db10f5f13750b5b8f",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Name": "Volume",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 13301.171465573128,
        "Y": -1641.9633008548826
      },
      {
        "Id": "275d639ded39479ea65cc000b98a0713",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Name": "Mean Score",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 13302.489891485229,
        "Y": -1463.8633808387424
      },
      {
        "Id": "43d8f670b9ba4eeb9c04e66b74b19fd5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Viewpoints",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 4621.0732989348544,
        "Y": -1012.9655728325959
      },
      {
        "Id": "5f31f4d87ed14448b2d41248a8d9c000",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Viewpoints",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4194.5492989829936,
        "Y": -1013.7443363114388
      },
      {
        "Id": "230c7cafa4794e259d3ab0c80801d467",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Geometry.Translate",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 5273.7412686962343,
        "Y": -1249.996145776219
      },
      {
        "Id": "2c33c87fc45d41909954872efeea9bab",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Eyepoint above plane",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5028.7881604523436,
        "Y": -1166.3286666915769
      },
      {
        "Id": "69b45228683f4dfab6e349c6073c6b10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Geometry.Scale",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5625.862175172414,
        "Y": -1131.7334164472902
      },
      {
        "Id": "8f04a7b7a037482d9684d59a3bdc2a9d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5357.0,
        "Y": -1029.0
      },
      {
        "Id": "39e503ee73444e4abfe27a34655905cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8205.6246184963784,
        "Y": -893.209636192314
      },
      {
        "Id": "7d541e25f09c45b58e5111888ac5b854",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 8042.8250649525417,
        "Y": -781.44837172871689
      },
      {
        "Id": "0e38d11595b548a5a7f217340b31f1fd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6261.1730192916211,
        "Y": -723.40118734261728
      },
      {
        "Id": "b086aac0c828447d8d53c83c8ea478ea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6120.0,
        "Y": -659.0
      },
      {
        "Id": "eac916ca29fa4d07b55720cccb7d7a22",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6688.0432387675592,
        "Y": -644.90042650845
      }
    ],
    "Annotations": [
      {
        "Id": "a3f09c39f0474d338e9cda0f8092036f",
        "Title": " Select Urban Context from Revit",
        "Nodes": [
          "e47835728a284f859955308a5430e98f",
          "7ba9632c2d074821ba3f0157c52e3fc8"
        ],
        "Left": -691.864973395794,
        "Top": -219.77691147554523,
        "Width": 489.480972231711,
        "Height": 388.0,
        "FontSize": 72.0,
        "InitialTop": 49.223088524454766,
        "InitialHeight": 177.54786911798172,
        "TextblockHeight": 259.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "44e91ff5d8924047a411ce1329dfad2c",
        "Title": "Select Site Volume from Revit",
        "Nodes": [
          "577e49374abe41798c1435389dc99658",
          "5450610f0c2e490a82afbf7a1b1ed349"
        ],
        "Left": -683.94249840017449,
        "Top": 216.39507295559167,
        "Width": 483.65137703358414,
        "Height": 476.38179073294839,
        "FontSize": 72.0,
        "InitialTop": 485.39507295559167,
        "InitialHeight": 233.38179073294839,
        "TextblockHeight": 259.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "f83573cabcc64e34a019bbae7a5e8fdd",
        "Title": "Geometry: Zoning Boundary",
        "Nodes": [
          "e365c589bc154462a94ada93b4ee3791",
          "e999ab27676a41f482c0480e6595c397",
          "e89fa2589ac74bceb309080eb8631a74",
          "7b45b322815a46648d0dc5b2d17c091b",
          "f8d68e49c503403aa548fe1799dc4b8b",
          "d540fcc341e04b399d1dda4278573d07",
          "703bf8cbb71942ea975a47e5308a5aaf"
        ],
        "Left": 1181.2068167211748,
        "Top": 9.430785383292573,
        "Width": 1060.1172877799063,
        "Height": 382.19933470564519,
        "FontSize": 72.0,
        "InitialTop": 105.43078538329257,
        "InitialHeight": 342.20455000656227,
        "TextblockHeight": 86.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "5f119cb4200b467694429a1eb598cd75",
        "Title": "Geometry: Site Context ",
        "Nodes": [
          "1e30329d1e284df1a0335fc5c7d84ca6",
          "008105518fa8404ca6f4ce40c82b12a4",
          "5147cfa7170b4672baa4e0cabf2040a3",
          "83abd94e62144dddb6459d3bf25055e9"
        ],
        "Left": 597.27490445463877,
        "Top": -379.68344170634435,
        "Width": 618.25738630951309,
        "Height": 383.64208466326943,
        "FontSize": 72.0,
        "InitialTop": -196.68344170634435,
        "InitialHeight": 221.44063928512094,
        "TextblockHeight": 173.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "9d41f34bb6a2406f9eeb1693cf416b7e",
        "Title": "FUNCTION - Revit Geometry Solids",
        "Nodes": [
          "c6d67a4b6f5149bfa0340cfef2601624",
          "8aaef1814eb24e6f9d6a90e8342e5d77",
          "d5185e210f1e4c72bfd31bd64de43de4",
          "25f7002c44e942e8b59f2dca2e6b6d2b",
          "76bc313ac1bf4aa3a820c11e9f4bd2a9"
        ],
        "Left": 306.39645958780932,
        "Top": 107.19046632004859,
        "Width": 656.31122939350553,
        "Height": 541.02603828310509,
        "FontSize": 72.0,
        "InitialTop": 290.19046632004859,
        "InitialHeight": 410.02603828310509,
        "TextblockHeight": 173.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "f6fe7bd6d1454bad934573abc2f9a588",
        "Title": "Control retail geometry display",
        "Nodes": [
          "cecda705df4a46a8978df9a04cb9c274",
          "83e4db675c27420199385670757caa26",
          "50cf14d0f0704eca8e01438a59e284f0",
          "ec955658e63a47339dd956f5a07c8d53",
          "b7497f0e3a404859a5d33291a1a32651"
        ],
        "Left": 4049.5850463085008,
        "Top": 1062.0655620497114,
        "Width": 609.28015490026974,
        "Height": 458.54880441790283,
        "FontSize": 72.0,
        "InitialTop": 1245.0655620497114,
        "InitialHeight": 327.54880441790283,
        "TextblockHeight": 173.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "a15d9ae404554772ae278d7752235c7d",
        "Title": "Geometry: Site Outline",
        "Nodes": [
          "863c5edb61f9432b8110e54cdb9cf112",
          "124c3f393fb848f7a9ccbd88f4a1c945",
          "419a1ab2567c41569e20df1f61a2079f",
          "29e6513c7ec74ebf8c1507b1bc300d7d",
          "32ddd9a7dd6c4a98b9e4edc65882cce3",
          "080a1ffc911244f3b9ea1da8234f8cfd",
          "dacca06c24554ab09dcdc2d925b39669",
          "2038fbcddf0b49e58591f761d676f25f"
        ],
        "Left": 1079.5552206422346,
        "Top": 444.46518750303585,
        "Width": 1458.3522550882142,
        "Height": 336.12238108106396,
        "FontSize": 72.0,
        "InitialTop": 540.46518750303585,
        "InitialHeight": 281.53695392618374,
        "TextblockHeight": 86.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "fe021e18227d412aa3138b22d0112919",
        "Title": "Create geometry for retail block",
        "Nodes": [
          "579bc5c8d1c846d89b178838df258beb",
          "bda8c6ae0e944ff58c2a641fbedb9163",
          "47b90335b8e740acbbd4d1621bfce6d5",
          "8da5426d1b4942528025ca470b43db75",
          "7210ce36dfa6489a91ce37d0f3e74c91",
          "fdc628f209aa49fa98ca2cc42f8ad6cd",
          "83c8410172ed478585597481f346a327",
          "f3d3c0ed58dd47e985b78652978f04a8",
          "8daede497dbd40a188c01e1da413cc6d",
          "46801006db6e48f5a2346e5d17fe3304",
          "364c9f62f9cd4932993319c873c42fa4",
          "76cba9146b7844c38e3cb15ab33aa829",
          "b72c763ec332427aaeb812e35ff5b317",
          "225c63d428174f4381bc5c4c3970c0f3",
          "4d8e64a4577545049e874436a61e4cb0",
          "96e7b66efdc746dc841823c37d09a184",
          "39ff65c2cc5047e9aad0cac6deea3a95",
          "7641d4267ab947b494e869fae7902690",
          "196ef861e3a040ddb52b2ebdac3c0619",
          "38a003684b0846ff88a21f0e87817ab7"
        ],
        "Left": 1414.5019000100392,
        "Top": 988.49404502870107,
        "Width": 2503.2072368048134,
        "Height": 1059.6895386481121,
        "FontSize": 72.0,
        "InitialTop": 1084.4940450287011,
        "InitialHeight": 1015.6895386481121,
        "TextblockHeight": 86.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "63216ec3a3514eafb9fd9e406fe7a194",
        "Title": "Calculate amount of  value generated per year in the retail block",
        "Nodes": [
          "1d73c7feff1842ce9151cc4f9b835482",
          "878a48e39584425f8580e0c4c45d6c11",
          "994eebc8c1cf4ad7aa594d026b37775f",
          "1e4e0be7c5714a32bf29913757c108f7",
          "b416f008c3fb43b38e89d419c14d469a",
          "0246f57202ec4e258e21b7a627e4f937",
          "82e8627b121740429b0b3337d5661499",
          "4c430b5422ba4afa94852ced625be50c",
          "db23ce34cfcc47f197c34e1b8c13938a",
          "3cd1488a46574f8dab26fa1c07741df4",
          "390f9c3ee0534887b0463478737fa209",
          "bf9d4c3b12734e0d80ae2e9db2b7169f",
          "e3f7b073de604db0a285218d4b1db378",
          "87c232ee909644c0a19ff206e5eb9ee1",
          "e32f4a1adf2f429e8d461c6fbfcf7cf3",
          "faff7e7c0be748359629c0b48801441c",
          "8f802e6d1b1744cfa7cd9bbf08bcaaa4",
          "8631b8a0ce99432cb43ab2dc7c6e33c6",
          "9b6d1ccbbe3c4359a9e3298186792686"
        ],
        "Left": 5820.2292171379149,
        "Top": 1337.0469841903928,
        "Width": 2387.5744263759289,
        "Height": 584.00382154401336,
        "FontSize": 72.0,
        "InitialTop": 1433.0469841903928,
        "InitialHeight": 514.00382154401336,
        "TextblockHeight": 86.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "627dfe2a7fa6419dae419ec17cfbe56f",
        "Title": "Calculate value generated per year by the office block",
        "Nodes": [
          "d00b228633b74281af95896e050286bd",
          "88c79eedbc2e4303893fe82e573f789d",
          "b48aee1a90254ae7a12944ed2293ebf6",
          "0073bfaeb4774685a302acbe72282b4b",
          "97776695def84d028ca42b15e0fd2ce5",
          "08f5f169c76142b983627d78fb9449ce",
          "b305ac0d8e004d00b67d898dc8966492",
          "50f1957b42b745f893532d2af37e6ed0",
          "1c70a30ba27c4c93b11c0e873650e529",
          "6dc2f218fd544f43b7797cf297f7677e",
          "8cb6515501bb43c5b8faa3a2da6a618f",
          "b2867d12f4da45179b4052f29444c945",
          "e013aaec0a79460f9e44260125611f6f",
          "61c993a266eb4e3da17e028c445e2eb8",
          "e7881fa080e046859d0f6ed84060e53f",
          "3cc415b7dcb34668820a31a2a5cfaaaa",
          "33d7c3b453b54142b31050b6489da92d",
          "20ac434c1c7b4a9b9b3fa3bd0973e853",
          "1f593c64c9474a6bab353510d91d4a81",
          "f00ee6c4d8b34dd7a79cc0184d9b0e9e"
        ],
        "Left": 5836.8800436141055,
        "Top": 2105.8614003047005,
        "Width": 2382.9290080766405,
        "Height": 717.4420645602313,
        "FontSize": 72.0,
        "InitialTop": 2201.8614003047005,
        "InitialHeight": 595.4420645602313,
        "TextblockHeight": 86.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "80450f9890db4d90a9aced8465c0aa73",
        "Title": "Control office geometry display",
        "Nodes": [
          "8f87a75b99624083be7d68fe4debf7dd",
          "11294ae4807145c99bb7d24fd56e62e6",
          "bdebeae036d64a25899a108fb07d7480",
          "b97b2da1235849e8b8d5964bf1a296f2",
          "db0f62c16b2142df9d0ea3d202bafc7a"
        ],
        "Left": 4678.91125364628,
        "Top": 3169.0232206090636,
        "Width": 572.207126058358,
        "Height": 519.27613765637079,
        "FontSize": 72.0,
        "InitialTop": 3352.0232206090636,
        "InitialHeight": 388.27613765637079,
        "TextblockHeight": 173.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "971655bc04344cd3ad38d51939d664ca",
        "Title": "Create geometry for office block",
        "Nodes": [
          "456ebb02bb2948da8c4997abe1d02482",
          "22677d9c01034fdaadb344af3cad92f1",
          "c4858c0430d449df8aaf363719710ff9",
          "ea10600fcf484f88962de1eb436c8a9a",
          "514878d08f3e4ac9a9403d7a77602d9e",
          "b13111987fbb48369cac7320d7fbfee4",
          "b13fd6c6ac854c8787f1255ba685bb1c",
          "361c905d10cd4f2ea732a221356508dc",
          "9fbe4cea724647329b4f75de1ec117ec",
          "e454e10bf33e41878ad6b77d9de05cfc",
          "3becc28ceb544d80ab397fea1435f289",
          "7301eec0657245cb83a20b764322bb58",
          "f8d12a3a276b4a66ba522ce7b9e7d19e",
          "5a3814944558442ea6ff827083cbca94",
          "70a9ecd12c31437c8636d4084f6675f9",
          "4252b2b2e025403e82ee04b74c18aadc",
          "3f30d2f66f224fd4a848bd286cf8b3e9",
          "eefb454198674f2c833cdc3bda24d0ae",
          "94f2d2d1921b4c7985d4618615999d56"
        ],
        "Left": 2165.7203617211662,
        "Top": 2181.2624566956242,
        "Width": 2423.3767534127574,
        "Height": 952.2419505875705,
        "FontSize": 72.0,
        "InitialTop": 2277.2624566956242,
        "InitialHeight": 908.2419505875705,
        "TextblockHeight": 86.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "4ec57580bfda4c529e7202f008e64ecb",
        "Title": "Office: Total Cost",
        "Nodes": [
          "3eebaaba846d48de8758f9ed6d742f5a"
        ],
        "Left": 1806.8374272892897,
        "Top": 2229.1801880725056,
        "Width": 213.31,
        "Height": 388.0,
        "FontSize": 72.0,
        "InitialTop": 2498.1801880725056,
        "InitialHeight": 145.0,
        "TextblockHeight": 259.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "d262b45ffc8742ea917af6688be75a03",
        "Title": "Retail: Total Cost",
        "Nodes": [
          "6856a3096a1c4d9daacf1b8091b43af4"
        ],
        "Left": 1046.0007281675516,
        "Top": 876.60314441054243,
        "Width": 200.12666666666667,
        "Height": 388.0,
        "FontSize": 72.0,
        "InitialTop": 1145.6031444105424,
        "InitialHeight": 145.0,
        "TextblockHeight": 259.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "62a75524c6064872922db1ed2a11984a",
        "Title": "OUTPUT - Overall Metrics",
        "Nodes": [
          "06371f3044c8417c9e1ed83d59c9ceb6",
          "9712eed346ca4abe86e588634dc3a150",
          "69edd1b639a2429aa1a9e9d78976123b",
          "e087768916874ca4b9efb1481c5ecc93",
          "96d8f353b98a49f5b46d18e7b4c8385b",
          "3986756dfa9f46b797949a45e2c8d72d",
          "df0ffa6d40a445f1b5bf2feeb4e7814e",
          "d1066a3596ad49969dab28cea0e6e6c0",
          "ff6074e1920a4c61b846dcdea684fade",
          "30efa5036c304b96acd3bb5cd625d28a",
          "7e20b08a662f493a9f38c9ecd7aa1b99",
          "85c0806daeda409e91f0d18cbb7e7347",
          "6f62523ee2f64a6cb55b65067df15270",
          "65ccd0ff4d1b4882b49848bb6e07f036",
          "e0ed5d3f80aa49ec9faa12a913314045",
          "4cb9e2c336ab413b9e05f60de1ee2636",
          "9fd92f7f986644d0a2b399bec5dc84cb",
          "6f66488db4514f2e898fab7f69e5b543",
          "69edac61892347a49cd55c088b749a3c"
        ],
        "Left": 8577.5618812723351,
        "Top": 1322.0083536549214,
        "Width": 1450.8403158483925,
        "Height": 886.16944053310408,
        "FontSize": 72.0,
        "InitialTop": 1418.0083536549214,
        "InitialHeight": 826.16944053310408,
        "TextblockHeight": 86.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "641032a9a78043be95aade6552b823f9",
        "Title": "INPUT - Program Area Distributions",
        "Nodes": [
          "f8200f8b8c8e4cfa89a3d47b30a3707a",
          "fe30eb6635f145a6bc65100f50892c97",
          "b48d8983c61746c18f063a0d06e19e58",
          "c3cbfb80c81a4b05aad462c6fe99238e",
          "0d58f2835cf249fa935e29c079a513f1"
        ],
        "Left": -678.68703113844936,
        "Top": 741.65185218172485,
        "Width": 840.75500600829935,
        "Height": 489.33092929654424,
        "FontSize": 72.0,
        "InitialTop": 924.65185218172485,
        "InitialHeight": 342.33092929654424,
        "TextblockHeight": 173.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "5ed2f6e0aa014709b1530dd1392e3e23",
        "Title": "URBAN BUILDING MASSER\r\nRefinery Graph Example",
        "Nodes": [
          "f03653ca3b8249c09f0a9ebe8c9b0e41",
          "54646f251bb0446c975aa4fbdfef5be3",
          "1614fb25b5cb42abb44460a13e948df9",
          "38735826eb5c4dc188aaad33f1c8c6bb",
          "86c611392ded4d1a8384e47bed1f7975",
          "473d0c654179453e9be3deef4fe7c89c",
          "dbc780d6735b4b89a7b225ca09a09e48"
        ],
        "Left": -1989.4169555806609,
        "Top": 241.04456383897866,
        "Width": 642.17586348366171,
        "Height": 694.28479234605788,
        "FontSize": 36.0,
        "InitialTop": 337.04456383897866,
        "InitialHeight": 406.28479234605788,
        "TextblockHeight": 86.0,
        "Background": "#FFFFFFFF"
      },
      {
        "Id": "30339aaf16da4c3cbe49c70af0710b94",
        "Title": "",
        "Nodes": [
          "dcc74992708a4b91bfd6311957083227"
        ],
        "Left": -1326.5441170826709,
        "Top": 562.142619634084,
        "Width": 314.0,
        "Height": 118.0,
        "FontSize": 14.0,
        "InitialTop": 592.142619634084,
        "InitialHeight": 140.0,
        "TextblockHeight": 20.0,
        "Background": "#FFFFC999"
      },
      {
        "Id": "ac898775e1a441d6bcb1701b27f88bb5",
        "Title": "",
        "Nodes": [
          "e29d2bbcb7514842bd8e7ade90c527b3"
        ],
        "Left": -1327.3897758081835,
        "Top": 401.4609341395639,
        "Width": 314.0,
        "Height": 146.0,
        "FontSize": 14.0,
        "InitialTop": 431.4609341395639,
        "InitialHeight": 140.0,
        "TextblockHeight": 20.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "d296211942c54f79a0332109090d4560",
        "Title": "",
        "Nodes": [
          "ac6f02e06fd04aa3915f59a57f844aad"
        ],
        "Left": -1325.7954549882634,
        "Top": 245.10784977594398,
        "Width": 314.0,
        "Height": 146.0,
        "FontSize": 14.0,
        "InitialTop": 275.107849775944,
        "InitialHeight": 140.0,
        "TextblockHeight": 20.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "66732efee97d4dbd9da9a4a5ffdf6759",
        "Title": "INTEGRATE - Revit Output",
        "Nodes": [
          "3f9e35f3ee7d4e2ea457c38cec0cd607",
          "3a8984a7f00d4220b89797594ebb169d",
          "739a1981020b4286a1f4e3d27cb6a23f",
          "ab37f6080a1046ee9a731cd796ab9a4c",
          "b27ab61dd9de43ca9a4d608635b25bf6",
          "b81d481159df4b4cb04fca31c5e587df",
          "6a643403222e4d98a51a7ba0203a5352",
          "8280fc234381491bbdbc58e9ffa7d514",
          "6fefda0d19be4b2d8be0d9b790509b12",
          "cc267419c3c84d779c54291f3f343012",
          "04d3b70697bf4e7bb24de58da9b391c6",
          "681eb615dad7465181a24e50f3e9e9d7",
          "853340820c954f138b50e5f5e26ccf96",
          "1e4a7e67801145c390ef5e2b8c8d62cc",
          "253617051d0d42d281188f2b9db5864d",
          "49f9476953194ea79c395b0d6b11a6a2"
        ],
        "Left": 5878.4040700747519,
        "Top": 3869.1231345889546,
        "Width": 1813.4010449565476,
        "Height": 709.51820532618967,
        "FontSize": 72.0,
        "InitialTop": 3965.1231345889546,
        "InitialHeight": 665.51820532618967,
        "TextblockHeight": 86.0,
        "Background": "#FFB5B5B5"
      },
      {
        "Id": "f1fadb3efa0e443a8379ae6e2910b2a5",
        "Title": "INPUTS: Variable Office position and rotation",
        "Nodes": [
          "893e1340c6fd47c28265c17f393723d7",
          "faf214a09d714c7785ac3bbb533cb716",
          "d9270299c18f4543832d3e61d0d4f2f2"
        ],
        "Left": -674.77735173692008,
        "Top": 2157.0464538452347,
        "Width": 319.0,
        "Height": 735.98417965153931,
        "FontSize": 72.0,
        "InitialTop": 2685.0464538452347,
        "InitialHeight": 284.98417965153931,
        "TextblockHeight": 518.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "5fcffc2a4eab46c99d2bb74bfefe2501",
        "Title": "INPUTS Variable retail position and rotation",
        "Nodes": [
          "01acd9995aeb4146afb7ee2d4e073c86",
          "c226447e8525453d966d3a68305df971",
          "0cf8fb265de44403899c56c40d4ea0a0"
        ],
        "Left": -685.41799245430457,
        "Top": 1245.4146109955177,
        "Width": 322.65020520961457,
        "Height": 740.85111993102259,
        "FontSize": 72.0,
        "InitialTop": 1773.4146109955177,
        "InitialHeight": 289.85111993102259,
        "TextblockHeight": 518.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "266805ff01bd4ff9be832b5bf455b837",
        "Title": "Find the  upper surface of the retail block for stacking",
        "Nodes": [
          "c31b9b35c9414a6c8aaeb33fe8f646ca",
          "cc35c903b2964a70a7aef819c555cf3a",
          "7b9b52784f5a4f8c84af8bce79bd3f84",
          "65ee879e93dc403bb8bd891c0f95b048",
          "66c487e90e884f78852439ba45e7f9e6",
          "c1423f932b5a4ed39d67901b818d6a29",
          "e1e4c9ecdb184dc3afce5c1a13fa2c57",
          "4733798a7a71419a9136fe1017ce6f9b",
          "0b68d993b2d24c21990b89fcc9a458a0",
          "0c40bb86994b4193bd921eaaba60294f"
        ],
        "Left": 4054.714142083456,
        "Top": 1675.9516908818186,
        "Width": 1643.14411699214,
        "Height": 420.29334191495991,
        "FontSize": 72.0,
        "InitialTop": 1858.9516908818186,
        "InitialHeight": 299.48913725115926,
        "TextblockHeight": 173.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "94e8db17a55d4105b96b7a82ca20ad37",
        "Title": "Retail Metrics",
        "Nodes": [
          "e7935e8b9bec4f03a41f3d0175fae863",
          "9aa62412dc484a69b709021a36c6cf15",
          "c3465a78b94d4db2b17af0aa416a6889"
        ],
        "Left": 329.27088577207689,
        "Top": 2015.3787784992082,
        "Width": 577.27033034068813,
        "Height": 330.42392507628938,
        "FontSize": 72.0,
        "InitialTop": 2111.3787784992082,
        "InitialHeight": 229.42392507628938,
        "TextblockHeight": 86.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "79dff1d067854e6eb6ff5765d338a500",
        "Title": "Office Metrics",
        "Nodes": [
          "50376c03755b43dc8fcd0cbc2c5bd92e",
          "134d23bf76a04451a98d2b28392714f7",
          "2e2cff01f2ac4ed98b91927cf906ed26"
        ],
        "Left": 332.69211573764062,
        "Top": 2967.5637142153164,
        "Width": 594.10467614228253,
        "Height": 426.0,
        "FontSize": 72.0,
        "InitialTop": 3063.5637142153164,
        "InitialHeight": 279.81327678209072,
        "TextblockHeight": 86.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "1fa3a6b39c354bbba955ea62fa304ab0",
        "Title": "",
        "Nodes": [
          "373bbc97f2be4943b1affd2505502d69"
        ],
        "Left": -1329.6142590521274,
        "Top": 697.73693689288086,
        "Width": 314.0,
        "Height": 132.0,
        "FontSize": 14.0,
        "InitialTop": 727.73693689288086,
        "InitialHeight": 140.0,
        "TextblockHeight": 20.0,
        "Background": "#FFB5B5B5"
      },
      {
        "Id": "e9204a03d30f4ac698d039f5862ce2e9",
        "Title": "INPUTS Non-Varying Retail",
        "Nodes": [
          "7364443fdafc4513bbe436d7b1d422e4",
          "a0a5ba3e7d1a45cfb51b8d0dc6c9ce76"
        ],
        "Left": -332.48250736300611,
        "Top": 1262.8184672740006,
        "Width": 412.12,
        "Height": 403.5345692045496,
        "FontSize": 72.0,
        "InitialTop": 1531.8184672740006,
        "InitialHeight": 211.5345692045496,
        "TextblockHeight": 259.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "24b413aedc2b430284083f1f8bbae8e7",
        "Title": "INPUTS: Non-Variable Office Position",
        "Nodes": [
          "ac9e7d2da2694e1d91a86235befc0e35",
          "6bfd11a028ab4fd18340df717e8a18de"
        ],
        "Left": -324.69252794417588,
        "Top": 2220.0041252404553,
        "Width": 428.18333333333334,
        "Height": 491.34159975060311,
        "FontSize": 72.0,
        "InitialTop": 2576.0041252404553,
        "InitialHeight": 212.34159975060311,
        "TextblockHeight": 346.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "b1ebff7d54e1426ba2e83d5855dc8547",
        "Title": "Total Retail Area",
        "Nodes": [
          "43b276925891416a996906e7f96b7129"
        ],
        "Left": 797.22995270562456,
        "Top": 851.48135070589137,
        "Width": 184.51666666666668,
        "Height": 378.0,
        "FontSize": 72.0,
        "InitialTop": 1120.4813507058914,
        "InitialHeight": 145.0,
        "TextblockHeight": 259.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "aed180be5b6f46ac80304756168013c8",
        "Title": "Total Office Area",
        "Nodes": [
          "de083f5e7d56445c93e81c1b0ec708ec"
        ],
        "Left": 1511.1444481414592,
        "Top": 2254.892584727002,
        "Width": 197.70000000000002,
        "Height": 378.0,
        "FontSize": 72.0,
        "InitialTop": 2523.892584727002,
        "InitialHeight": 145.0,
        "TextblockHeight": 259.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "a4cdbbbd05ed44a8895148a67b9e0074",
        "Title": "Calculate volume outside zoning boundary",
        "Nodes": [
          "ef0de6ed84514df29d840fe0d508343c",
          "e1265dc1228b41be8a58b92a6cdc6f53",
          "8b72ed9bac63487f9f13c643219e2f92",
          "6be59004ab1c4198bd0184bd8ff5bf13",
          "87b0790298334e439ee6d719567071d5",
          "66aee6e710fe4ce5b5c2abb0fd1b8806",
          "9f081c7782954e0da86a0dacc2187051",
          "1076f97ebac64a11a030cf6115b38d25",
          "530472146c9e42219344c9e9317876dd"
        ],
        "Left": 5806.6489177329477,
        "Top": 745.88178383998945,
        "Width": 1792.0057072311729,
        "Height": 513.05751394196625,
        "FontSize": 72.0,
        "InitialTop": 841.88178383998945,
        "InitialHeight": 469.05751394196625,
        "TextblockHeight": 86.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "2455b4648cfe449198b59643c49e6feb",
        "Title": "Filter out Top and Bottom Surfaces (X component of normal == 0)",
        "Nodes": [
          "bf628ae135e2467398287dc16834c408",
          "24ce4838da8b4f42b1501b6b304b421d",
          "cc11affa953f4db4abb33d2c6ae955b6",
          "9c9d554c947c451da29212e2acc21f1c"
        ],
        "Left": 7535.5228770545991,
        "Top": -1452.7293557986336,
        "Width": 612.11264457977,
        "Height": 429.14925624616217,
        "FontSize": 36.0,
        "InitialTop": -1356.7293557986336,
        "InitialHeight": 359.14925624616217,
        "TextblockHeight": 86.0,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "3eb97d6f655d48c7ba5c9315c5bd7435",
        "Title": "Get Surfaces that are Facing the Viewpoint (ignores very acute angles of <10 degrees)",
        "Nodes": [
          "7a896bdff0d54920950c5cb4792c129b",
          "4a36b01dd0644fdfaccbf465f01f6b16",
          "cfce2831b4964560af87245864e3239c",
          "7496cc0555b742f0bbf91caa27a3a28e",
          "78db98dbd4e64d1cbafe9fa38bf3d1c5",
          "8f557a62a70644fe857bc1f572400c78",
          "7eecb695082b49baaddf5935e24c7e11",
          "94bc59590b394594b4994f91f73c439c",
          "a8ff51234b484b7c828fbf5c7817a86e",
          "e7e333ad340345229cefb3922fa90767"
        ],
        "Left": 9562.3163480329185,
        "Top": -1394.6025262574381,
        "Width": 900.51992594511648,
        "Height": 824.35627363604272,
        "FontSize": 36.0,
        "InitialTop": -1298.6025262574381,
        "InitialHeight": 809.35627363604272,
        "TextblockHeight": 86.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "eb289e729d1c4268902b7f3a4ce5b588",
        "Title": "Get Normal for each Face",
        "Nodes": [
          "c77007caa057495e9f15edee25301f30",
          "54320309a08248e4a9d76ab2a8a3123a",
          "53f6ede7cce34edf8da729ef475d3bee",
          "8a7446ae724943bd9176923bcaba2186",
          "7768595597f949a899c58c6a251e54de",
          "009555212cfb446b992170552315800f"
        ],
        "Left": 6464.8873403212583,
        "Top": -1004.4779088670505,
        "Width": 2181.6636563287757,
        "Height": 355.345439773258,
        "FontSize": 36.0,
        "InitialTop": -951.47790886705047,
        "InitialHeight": 354.345439773258,
        "TextblockHeight": 43.0,
        "Background": "#FFFFC999"
      },
      {
        "Id": "4eb62fbcd6f34a69aea675100367d5e9",
        "Title": "Volume - High is Better",
        "Nodes": [
          "f22e88c92c4e4c94bc6d854603457681",
          "bbcb95176ac6445db10f5f13750b5b8f"
        ],
        "Left": 12793.474781892028,
        "Top": -1695.9765453196255,
        "Width": 612.69668368110069,
        "Height": 163.01324446474291,
        "FontSize": 36.0,
        "InitialTop": -1642.9765453196255,
        "InitialHeight": 146.01324446474291,
        "TextblockHeight": 43.0,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "c369cd7f714f4bc090f093d25bcf55c3",
        "Title": "FIND SURFACES THAT ARE ANGLED TOWARDS VIEWER",
        "Nodes": [
          "5a3fe68e2b2e469a93e830a0f78a68cd",
          "ff3d4f18454a4ccf987859e200be84c7"
        ],
        "Left": 6452.1934092988149,
        "Top": -1903.1289972789223,
        "Width": 4008.7185354651583,
        "Height": 171.23858266467482,
        "FontSize": 96.0,
        "InitialTop": -1778.1289972789223,
        "InitialHeight": 142.23858266467482,
        "TextblockHeight": 115.0,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "8c25faf5a27940b4a153db5d2fba7d14",
        "Title": "Python\r\nCalculate Sightlines and Scores",
        "Nodes": [
          "3366a95520344973a15ae2685916d51a",
          "f29cf2546dc04a3d8bd941da2bf75dfc"
        ],
        "Left": 11296.489677377029,
        "Top": -1248.5613510291844,
        "Width": 502.54244102819939,
        "Height": 349.16942955028003,
        "FontSize": 36.0,
        "InitialTop": -1152.5613510291844,
        "InitialHeight": 223.16942955028003,
        "TextblockHeight": 86.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "31b2814c09154ad2b4172749536b1f53",
        "Title": "Mean Score for Form - High is Better",
        "Nodes": [
          "f76f3d94d7e8425d9a26dd6424d2c180",
          "ad2a84f2ad694c6eb00e4857e5b840f2",
          "275d639ded39479ea65cc000b98a0713"
        ],
        "Left": 12785.553115378929,
        "Top": -1519.0046602943526,
        "Width": 609.93677610630039,
        "Height": 164.14127945561017,
        "FontSize": 36.0,
        "InitialTop": -1466.0046602943526,
        "InitialHeight": 147.14127945561017,
        "TextblockHeight": 43.0,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "a049843a120a412e8c948242308ab6c0",
        "Title": "Sightlines as Coloured Lines",
        "Nodes": [
          "a4e943c4c2324075a39f4c3b57dcf3ec",
          "56d4a95c451240669ef483cd7ce070ff",
          "c60e8927d13d4432b977239eacccd4a1",
          "5fec3108dc6240b696c26cf1147df20d"
        ],
        "Left": 12725.267704596228,
        "Top": -1050.9635265631935,
        "Width": 739.358907391299,
        "Height": 255.77178022689998,
        "FontSize": 36.0,
        "InitialTop": -997.96352656319345,
        "InitialHeight": 254.77178022689998,
        "TextblockHeight": 43.0,
        "Background": "#FFFFC999"
      },
      {
        "Id": "bbf70a3933ae48089eccf203e755db70",
        "Title": "Coloured Spheres at Viewpoints",
        "Nodes": [
          "b15a6a89e1914386a2f33a732a813779",
          "4b114e34d0c448aab8d2dd38e6d749d5",
          "b0353c826aea4cc5854f9db34ce097fd",
          "9ba161e91a42431c8d6b28e514d17174",
          "5d79454d7bd54f07a3626fe769bc083d",
          "389e48ace46d47348f7e5bc2c9786e37",
          "04322deb87d64453b1c480796de3ed32",
          "2956186f01f04ec0be54eb684dc6bfac",
          "253d7b9f8b3448449ed89b494be2c9da",
          "cbbf3d90cf3e4e228d110c39fd2433b3"
        ],
        "Left": 11983.150455604527,
        "Top": -763.72735577557148,
        "Width": 1480.9734035840011,
        "Height": 596.047923563866,
        "FontSize": 36.0,
        "InitialTop": -710.72735577557148,
        "InitialHeight": 522.014801166286,
        "TextblockHeight": 43.0,
        "Background": "#FF71C6A8"
      },
      {
        "Id": "b6f36ee5b06345cb9ac5ba3313b09625",
        "Title": "Lunchbox\r\nPanels",
        "Nodes": [
          "4481290a174d480e8ee2138c9dd2fc9a"
        ],
        "Left": 10894.106981029014,
        "Top": -1397.5139184538293,
        "Width": 195.0,
        "Height": 241.0,
        "FontSize": 36.0,
        "InitialTop": -1301.5139184538293,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "4663949f592949adb78a4f32c4cb872f",
        "Title": "PANELS AND SIGHTLINES",
        "Nodes": [
          "37172f838d934b9db0360c3e23fa4869",
          "3fec5413581f4c819d8d447a53778121"
        ],
        "Left": 10593.396599137022,
        "Top": -1915.157668565269,
        "Width": 1213.3138692434077,
        "Height": 173.0691501597737,
        "FontSize": 96.0,
        "InitialTop": -1790.157668565269,
        "InitialHeight": 144.0691501597737,
        "TextblockHeight": 115.0,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "d7560136dfe3463db584f4f958b8d39e",
        "Title": "ANALYSE AND DISPLAY",
        "Nodes": [
          "a8d67c0ba6d24c739856c9fba2b7b4dc",
          "621e9876285f47268296451d6d54df39"
        ],
        "Left": 11957.797624891073,
        "Top": -1922.3852038625685,
        "Width": 1501.7961618844893,
        "Height": 174.95858763932029,
        "FontSize": 96.0,
        "InitialTop": -1797.3852038625685,
        "InitialHeight": 145.95858763932029,
        "TextblockHeight": 115.0,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "37e9edad14e0418da7212f905b6eb85d",
        "Title": "Viewpoint Selection Limit",
        "Nodes": [
          "4c20ff08fc4a44889a50d37f944bb9c4",
          "fe59a58c663d46f1a53a8210c278a328"
        ],
        "Left": 6841.53841261643,
        "Top": -1693.72529039158,
        "Width": 306.22482885364025,
        "Height": 266.2080069431936,
        "FontSize": 36.0,
        "InitialTop": -1597.72529039158,
        "InitialHeight": 251.2080069431936,
        "TextblockHeight": 86.0,
        "Background": "#FFD8D8D8"
      },
      {
        "Id": "e523358e247543e69e630f8bbea95178",
        "Title": "Translate Viewpoints to Chosen Eye Level",
        "Nodes": [
          "230c7cafa4794e259d3ab0c80801d467",
          "2c33c87fc45d41909954872efeea9bab"
        ],
        "Left": 5018.7881604523436,
        "Top": -1345.996145776219,
        "Width": 518.95310824389071,
        "Height": 282.66747908464208,
        "FontSize": 36.0,
        "InitialTop": -1249.996145776219,
        "InitialHeight": 228.66747908464208,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "7ba9632c2d074821ba3f0157c52e3fc8",
        "Title": "Select a Revit mass representing the urban context.",
        "Nodes": [],
        "Left": -681.864973395794,
        "Top": 86.770957642436485,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "5450610f0c2e490a82afbf7a1b1ed349",
        "Title": "Select a Revit mass representing the volumetric constraints of a site (heights, setbacks, etc)",
        "Nodes": [],
        "Left": -673.94249840017449,
        "Top": 485.39507295559167,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "9aa62412dc484a69b709021a36c6cf15",
        "Title": "Users can input cost and value factors for measuring and comparing options. Each program type may have its own cost and value return considerations.",
        "Nodes": [],
        "Left": 339.27088577207689,
        "Top": 2115.8873621707044,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c3465a78b94d4db2b17af0aa416a6889",
        "Title": "Several factors may contribute to increased value of a floor pertaining to a program type. For example, offices that are higher, may be more valuable but retail that is higher (farther from the street) may be less valuable.  Certain orientations towards certain views may be more valuable.  These bonuses are calculated after some geometric analyis of the mass.\r\n",
        "Nodes": [],
        "Left": 342.26742944552041,
        "Top": 2200.8027035754976,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "38a003684b0846ff88a21f0e87817ab7",
        "Title": "A rectangular mass is created with a postion on the site. Floors are also derived from this mass using a floor-floor measurement and driven by the desired area of the program.",
        "Nodes": [],
        "Left": 1427.9233406971666,
        "Top": 1084.4940450287011,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0c40bb86994b4193bd921eaaba60294f",
        "Title": "The top surface is identified to drive subsequent stacking of other masses.",
        "Nodes": [],
        "Left": 4074.2417221286414,
        "Top": 2018.4408281329779,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "9b6d1ccbbe3c4359a9e3298186792686",
        "Title": "This section computes the value generated by the program over 1 year. Bonus factors are also applied.",
        "Nodes": [],
        "Left": 5830.2292171379149,
        "Top": 1433.0469841903928,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "69edac61892347a49cd55c088b749a3c",
        "Title": "The overall metrics show aggregate clashes, cost, and value generated. These metrics can be used as fitness functions for Refinery to evaluate.",
        "Nodes": [],
        "Left": 8589.34456308278,
        "Top": 1418.0083536549214,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0d58f2835cf249fa935e29c079a513f1",
        "Title": "Users can set a gross square area and choose how to distribute the program among the 2 building masses",
        "Nodes": [],
        "Left": -668.68703113844936,
        "Top": 924.65185218172485,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "54646f251bb0446c975aa4fbdfef5be3",
        "Title": "DYNAMO PROJECT\r\n________________________________________________________\r\n\r\nBuildingMasser.dyn",
        "Nodes": [],
        "Left": -1975.6948649974679,
        "Top": 337.04456383897866,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "38735826eb5c4dc188aaad33f1c8c6bb",
        "Title": "ASSOCIATED FILES\r\n________________________________________________________\r\n\r\nUrbanBuildingSite.rvt",
        "Nodes": [],
        "Left": -1976.5044456680005,
        "Top": 428.00305970436875,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "86c611392ded4d1a8384e47bed1f7975",
        "Title": "AUTHORS / CREATION DATE\r\n________________________________________________________\r\n\r\nAutodesk Refinery Team, January 2019",
        "Nodes": [],
        "Left": -1978.0210317723825,
        "Top": 518.0984457566384,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "f03653ca3b8249c09f0a9ebe8c9b0e41",
        "Title": "DESCRIPTION\r\n________________________________________________________\r\n\r\nThis parametric system allows users to study massing and programmatic distributions for an urban site. Users can select a site boundary and urban context in Revit. Users can also calibrate parameters representing program, cost, and value factors for the project. Using Refinery, the user can process options to explore possible configurations of the massing on the site.\r\n\r\nVariable Inputs:\r\n1. ratio of retail to office area for a fixed input gross area \r\n2. program block dimensions\r\n3. program block rotation\r\nGoals:\r\n1. Minimize the number of clashes\r\n2. Minimize the cost\r\n3. Maximize the total value per year",
        "Nodes": [],
        "Left": -1979.4169555806609,
        "Top": 603.32935618503654,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "1614fb25b5cb42abb44460a13e948df9",
        "Title": "DYNAMO VERSION\r\n________________________________________________________\r\n\r\n2.0.2",
        "Nodes": [],
        "Left": -1656.2410920969992,
        "Top": 339.65911621956991,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "473d0c654179453e9be3deef4fe7c89c",
        "Title": "REQUIRED DYNAMO PACKAGES\r\n________________________________________________________\r\n\r\nNone\r\nDoes require Dynamo for Revit if you want to change the input geometry.",
        "Nodes": [],
        "Left": -1657.4379632965597,
        "Top": 429.27355710227977,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "dbc780d6735b4b89a7b225ca09a09e48",
        "Title": "ADDITIONAL COMMENTS\r\n________________________________________________________\r\n\r\nNA",
        "Nodes": [],
        "Left": -1657.9265626114438,
        "Top": 544.61044888209381,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "dcc74992708a4b91bfd6311957083227",
        "Title": "Checking / Outputs\r\n_______________________________________________________\r\nOrange indicates analaysis nodes to measure outcomes.",
        "Nodes": [],
        "Left": -1316.5441170826709,
        "Top": 592.142619634084,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "e29d2bbcb7514842bd8e7ade90c527b3",
        "Title": "Working / Functions\r\n_______________________________________________________\r\n\r\nGreen indicates the working of the script. No changes should be made in these groups unless advised.",
        "Nodes": [],
        "Left": -1317.3897758081835,
        "Top": 431.4609341395639,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ac6f02e06fd04aa3915f59a57f844aad",
        "Title": "Variables / Inputs\r\n_______________________________________________________\r\n\r\nPink indicates Variables that can be altered per project and must be set accordingly before running the script.",
        "Nodes": [],
        "Left": -1315.7954549882634,
        "Top": 275.107849775944,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "373bbc97f2be4943b1affd2505502d69",
        "Title": "Revit Output\r\n_______________________________________________________\r\n\r\nGrey indicates notes that are used for creating and updating Revit elements.",
        "Nodes": [],
        "Left": -1319.6142590521274,
        "Top": 727.73693689288086,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "134d23bf76a04451a98d2b28392714f7",
        "Title": "Users can input cost and value factors for measuring and comparing options. Each program type may have its own cost and value return considerations.",
        "Nodes": [],
        "Left": 342.69211573764062,
        "Top": 3120.2710394624696,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "2e2cff01f2ac4ed98b91927cf906ed26",
        "Title": "Several factors may contribute to increased value of a floor pertaining to a program type. For example, offices that are higher, may be more valuable but retail that is higher (farther from the street) may be less valuable.  Certain orientations towards certain views may be more valuable.  These bonuses are calculated after some geometric analyis of the mass.\r\n",
        "Nodes": [],
        "Left": 345.68865941108413,
        "Top": 3203.3769909974071,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ff3d4f18454a4ccf987859e200be84c7",
        "Title": "",
        "Nodes": [],
        "Left": 10400.911944763973,
        "Top": -1775.8904146142474,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "37172f838d934b9db0360c3e23fa4869",
        "Title": "",
        "Nodes": [],
        "Left": 10603.396599137022,
        "Top": -1786.0885184054953,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3fec5413581f4c819d8d447a53778121",
        "Title": "",
        "Nodes": [],
        "Left": 11746.71046838043,
        "Top": -1790.157668565269,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "a8d67c0ba6d24c739856c9fba2b7b4dc",
        "Title": "",
        "Nodes": [],
        "Left": 11967.797624891073,
        "Top": -1791.4266162232482,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "a8ff51234b484b7c828fbf5c7817a86e",
        "Title": "Needs further refinement to avoid surface that are facing to viewer but obscured by other surfaces on the form",
        "Nodes": [],
        "Left": 9572.3163480329185,
        "Top": -1298.6025262574381,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "e7e333ad340345229cefb3922fa90767",
        "Title": "Use 100 degrees as the limit to avoid very acute angled surfaces to the viewpoiunt (<10 degrees)",
        "Nodes": [],
        "Left": 9577.7450318657884,
        "Top": -629.24625262139534,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "efacd1aecfde4740b465ff70856b0d95",
        "Title": "Requires further work to ensure the number of panels are proportional to the area of the face",
        "Nodes": [],
        "Left": 10648.135843278984,
        "Top": -1124.2414272929218,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "fe59a58c663d46f1a53a8210c278a328",
        "Title": "Limits the number of viewpoints that are tested to keep computation time down for testing",
        "Nodes": [],
        "Left": 6852.76324147007,
        "Top": -1486.5172834483865,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "5a3fe68e2b2e469a93e830a0f78a68cd",
        "Title": "",
        "Nodes": [],
        "Left": 6462.1934092988149,
        "Top": -1778.1289972789223,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "621e9876285f47268296451d6d54df39",
        "Title": "",
        "Nodes": [],
        "Left": 13399.593786775562,
        "Top": -1797.3852038625685,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -5380.4967990861041,
    "Y": 884.74215938814427,
    "Zoom": 0.71748366037355327
  }
}